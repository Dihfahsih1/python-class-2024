[
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "class_1",
        "description": "class_1",
        "isExtraImport": true,
        "detail": "class_1",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "sleeping_func",
        "description": "sleeping_func",
        "isExtraImport": true,
        "detail": "sleeping_func",
        "documentation": {}
    },
    {
        "label": "colorsys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorsys",
        "description": "colorsys",
        "detail": "colorsys",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "first_module",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "first_module",
        "description": "first_module",
        "detail": "first_module",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "afod.assignent9.assignment9",
        "description": "afod.assignent9.assignment9",
        "peekOfCode": "name = (\"enter your name\")\nprint(name)\nbalance = float(input(\"Enter your balance\"))\nprint(\"Your balance is:\" ,  balance)\ntransaction =input(\"enter w for withdraw or d for deposit\")\nprint(transaction)\nif (transaction == \"d\" or transaction == \"D\"):\n    amount = int(input(\"enter deposit  amount\"))\n    if (amount < 0):\n        print(\"amount cannot be a negative\")",
        "detail": "afod.assignent9.assignment9",
        "documentation": {}
    },
    {
        "label": "balance",
        "kind": 5,
        "importPath": "afod.assignent9.assignment9",
        "description": "afod.assignent9.assignment9",
        "peekOfCode": "balance = float(input(\"Enter your balance\"))\nprint(\"Your balance is:\" ,  balance)\ntransaction =input(\"enter w for withdraw or d for deposit\")\nprint(transaction)\nif (transaction == \"d\" or transaction == \"D\"):\n    amount = int(input(\"enter deposit  amount\"))\n    if (amount < 0):\n        print(\"amount cannot be a negative\")\n    else:\n        new_balance = balance + amount",
        "detail": "afod.assignent9.assignment9",
        "documentation": {}
    },
    {
        "label": "current_day",
        "kind": 2,
        "importPath": "afod.assignent9.routine",
        "description": "afod.assignent9.routine",
        "peekOfCode": "def current_day():\n    current_day= datetime.datetime.now()\n    if current_day.strftime('%a') ==\"Mon\":\n        print(\"monday: First day of the week.\")\n    if current_day.strftime('%a') == \"Tue\":\n        print(\"tuesda: second day of the week.\")\n    if current_day.strftime('%a') == \"wed\":\n        print(\"wednesday: mid week.\")\n    if current_day.strftime('%a') == \"Thur\":\n        print(\"Thursday: Assignment day is here.\")",
        "detail": "afod.assignent9.routine",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "afod.assignment10.class",
        "description": "afod.assignment10.class",
        "peekOfCode": "class Car:\n    def __init__(self,make,model,year):\n        self.make = make\n        self.model = model\n        self.year =year\n    def display_info(self):\n        print(f\"car: {self.make} {self.model} {self.year}\")\n#use the same class to iplement an object.\nmy_car = Car(\"toyota\", \"corolla\", 2023)\nprint(my_car.model)",
        "detail": "afod.assignment10.class",
        "documentation": {}
    },
    {
        "label": "my_car",
        "kind": 5,
        "importPath": "afod.assignment10.class",
        "description": "afod.assignment10.class",
        "peekOfCode": "my_car = Car(\"toyota\", \"corolla\", 2023)\nprint(my_car.model)\nprint(my_car.make)\nprint(my_car.year)\nmy_car.display_info()\n#how to use github as a team.\n# Create or Import Repositories: Create new repositories for your projects or import existing ones into your \n# organization. You can do this directly from the GitHub website or using Git commands on your local machine.\n# Add Team Members: Invite team members to join your organization and grant them appropriate permissions to \n# access repositories. You can manage permissions at the organization level and for each repository.",
        "detail": "afod.assignment10.class",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "afod.assignment11.assignment11",
        "description": "afod.assignment11.assignment11",
        "peekOfCode": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    def display_info(self):\n        print(f\"Car: {self.year} {self.make} {self.model}\")\nclass ElectricCar(Car):\n    def __init__(self, make, model, year, battery_capacity):\n        super().__init__(make, model, year)",
        "detail": "afod.assignment11.assignment11",
        "documentation": {}
    },
    {
        "label": "ElectricCar",
        "kind": 6,
        "importPath": "afod.assignment11.assignment11",
        "description": "afod.assignment11.assignment11",
        "peekOfCode": "class ElectricCar(Car):\n    def __init__(self, make, model, year, battery_capacity):\n        super().__init__(make, model, year)\n        self.battery_capacity = battery_capacity\n    def display_info(self):\n        super().display_info()\n        print(f\"Battery Capacity: {self.battery_capacity} kWh\")\nmy_electric_car = ElectricCar(\"Tesla\", \"model S\",2023, 100)\nmy_electric_car.display_info()\n# how do we access a project/repository and create branches in it?",
        "detail": "afod.assignment11.assignment11",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "kind": 6,
        "importPath": "afod.assignment11.assignment11",
        "description": "afod.assignment11.assignment11",
        "peekOfCode": "class Calculator:\n    def add(self, a, b):\n        return a + b\n    def add(self, a, b, c):\n        return a + b + c\n# Creating an instance of Calculator\ncalc = Calculator()\n# Polymorphic method call\nprint(calc.add(2, 3, 4))  \n2.#Run-Time Polymorphism (Method Overriding):In run-time polymorphism, a method in a subclass overrides ",
        "detail": "afod.assignment11.assignment11",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "afod.assignment11.assignment11",
        "description": "afod.assignment11.assignment11",
        "peekOfCode": "class Animal:\n    def speak(self):\n        print(\"Animal speaks\")\nclass Dog(Animal):\n    def speak(self):\n        print(\"Dog barks\")\nclass Cat(Animal):\n    def speak(self):\n        print(\"Cat meows\")\n# Creating instances of Dog and Cat",
        "detail": "afod.assignment11.assignment11",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "afod.assignment11.assignment11",
        "description": "afod.assignment11.assignment11",
        "peekOfCode": "class Dog(Animal):\n    def speak(self):\n        print(\"Dog barks\")\nclass Cat(Animal):\n    def speak(self):\n        print(\"Cat meows\")\n# Creating instances of Dog and Cat\ndog = Dog()\ncat = Cat()\n# Polymorphic method call",
        "detail": "afod.assignment11.assignment11",
        "documentation": {}
    },
    {
        "label": "Cat",
        "kind": 6,
        "importPath": "afod.assignment11.assignment11",
        "description": "afod.assignment11.assignment11",
        "peekOfCode": "class Cat(Animal):\n    def speak(self):\n        print(\"Cat meows\")\n# Creating instances of Dog and Cat\ndog = Dog()\ncat = Cat()\n# Polymorphic method call\ndog.speak()  \ncat.speak()",
        "detail": "afod.assignment11.assignment11",
        "documentation": {}
    },
    {
        "label": "my_electric_car",
        "kind": 5,
        "importPath": "afod.assignment11.assignment11",
        "description": "afod.assignment11.assignment11",
        "peekOfCode": "my_electric_car = ElectricCar(\"Tesla\", \"model S\",2023, 100)\nmy_electric_car.display_info()\n# how do we access a project/repository and create branches in it?\n1. #you clone the repository\n2.#then you navigate o the repositorydirectory\n3.#then you reate a new branch using the comand -b new-\"name of the new branch\"\n# what is polymorphism and give two examoles\n# Polymorphism is a fundamental concept in object-oriented programming (OOP) that allows objects of different\n#  classes to be treated as objects of a common superclass. It enables flexibility and extensibility in code by\n#   allowing methods to be invoked on objects of different classes without knowing their specific types at",
        "detail": "afod.assignment11.assignment11",
        "documentation": {}
    },
    {
        "label": "calc",
        "kind": 5,
        "importPath": "afod.assignment11.assignment11",
        "description": "afod.assignment11.assignment11",
        "peekOfCode": "calc = Calculator()\n# Polymorphic method call\nprint(calc.add(2, 3, 4))  \n2.#Run-Time Polymorphism (Method Overriding):In run-time polymorphism, a method in a subclass overrides \n# the implementation of a method with the same name and signature in its superclass.\nclass Animal:\n    def speak(self):\n        print(\"Animal speaks\")\nclass Dog(Animal):\n    def speak(self):",
        "detail": "afod.assignment11.assignment11",
        "documentation": {}
    },
    {
        "label": "dog",
        "kind": 5,
        "importPath": "afod.assignment11.assignment11",
        "description": "afod.assignment11.assignment11",
        "peekOfCode": "dog = Dog()\ncat = Cat()\n# Polymorphic method call\ndog.speak()  \ncat.speak()",
        "detail": "afod.assignment11.assignment11",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "afod.assignment11.assignment11",
        "description": "afod.assignment11.assignment11",
        "peekOfCode": "cat = Cat()\n# Polymorphic method call\ndog.speak()  \ncat.speak()",
        "detail": "afod.assignment11.assignment11",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "afod.assignment12.assignment12",
        "description": "afod.assignment12.assignment12",
        "peekOfCode": "class Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return 3.14 * self.radius ** 2\nclass Rectangle(Shape):",
        "detail": "afod.assignment12.assignment12",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "afod.assignment12.assignment12",
        "description": "afod.assignment12.assignment12",
        "peekOfCode": "class Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return 3.14 * self.radius ** 2\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):",
        "detail": "afod.assignment12.assignment12",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "afod.assignment12.assignment12",
        "description": "afod.assignment12.assignment12",
        "peekOfCode": "class Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):\n        return self.width * self.height\n# Usage\ncircle = Circle(5)\nrectangle = Rectangle(3, 4)\nprint(circle.area())      # Output: 78.5",
        "detail": "afod.assignment12.assignment12",
        "documentation": {}
    },
    {
        "label": "circle",
        "kind": 5,
        "importPath": "afod.assignment12.assignment12",
        "description": "afod.assignment12.assignment12",
        "peekOfCode": "circle = Circle(5)\nrectangle = Rectangle(3, 4)\nprint(circle.area())      # Output: 78.5\nprint(rectangle.area())   # Output: 12",
        "detail": "afod.assignment12.assignment12",
        "documentation": {}
    },
    {
        "label": "rectangle",
        "kind": 5,
        "importPath": "afod.assignment12.assignment12",
        "description": "afod.assignment12.assignment12",
        "peekOfCode": "rectangle = Rectangle(3, 4)\nprint(circle.area())      # Output: 78.5\nprint(rectangle.area())   # Output: 12",
        "detail": "afod.assignment12.assignment12",
        "documentation": {}
    },
    {
        "label": "Language",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class Language:\n    def say_hello(self):\n        raise  NotImplementedError(\"Please use say_hello class in child class\")\nclass French(Language):\n    def say_hello(self):\n        print(\"Bonjuor\")\nclass Chinese(Language):\n    def say_hello(self):\n        print(\"nia hao\")\ndef intro(lang):",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "French",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class French(Language):\n    def say_hello(self):\n        print(\"Bonjuor\")\nclass Chinese(Language):\n    def say_hello(self):\n        print(\"nia hao\")\ndef intro(lang):\n    lang.say_hello()\nNaomi = French()\njohn = Chinese()",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "Chinese",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class Chinese(Language):\n    def say_hello(self):\n        print(\"nia hao\")\ndef intro(lang):\n    lang.say_hello()\nNaomi = French()\njohn = Chinese()\nintro(Naomi)\nintro(john)\n# example2",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class Animal:\n    def speak(self):\n        print(\"Animal speaks\")\nclass Dog(Animal):\n    def speak(self):\n        print(\"Dog barks\")\nclass Cat(Animal):\n    def speak(self):\n        print(\"Cat meows\")\n# Creating instances of Dog and Cat",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class Dog(Animal):\n    def speak(self):\n        print(\"Dog barks\")\nclass Cat(Animal):\n    def speak(self):\n        print(\"Cat meows\")\n# Creating instances of Dog and Cat\ndog = Dog()\ncat = Cat()\n# Polymorphic method call",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "Cat",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class Cat(Animal):\n    def speak(self):\n        print(\"Cat meows\")\n# Creating instances of Dog and Cat\ndog = Dog()\ncat = Cat()\n# Polymorphic method call\ndog.speak()  \ncat.speak()  \n#ABSTRACTION",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return 3.14 * self.radius ** 2\nclass Rectangle(Shape):",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return 3.14 * self.radius ** 2\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):\n        return self.width * self.height\n# Usage\ncircle = Circle(5)\nrectangle = Rectangle(3, 4)\nprint(circle.area())      # Output: 78.5",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n    @abstractmethod\n    def perimeter(self):\n        pass\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius= radius",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class Circle(Shape):\n    def __init__(self, radius):\n        self.radius= radius\n    def area(self):\n        return 3.142*self.radius**2\n    def perimeter(self):\n        return 2*3.142*self.radius\nclass Triangle(Shape):\n    def __init__(self, base, height, sides):\n        self.base= base",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "Triangle",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class Triangle(Shape):\n    def __init__(self, base, height, sides):\n        self.base= base\n        self.height= height\n        self.sides= sides\n    def area(self):\n        return 0.5*self.base*self.height\n    def perimeter(self):\n        return sum(self.sides)\nclass Customer:",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "class Customer:\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n    def get_name(self):\n        return self._name\n    def get_age(self):\n        return self._age\n# Using data abstraction to access customer information\ncustomer1 = Customer(\"Alice\", 30)",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "intro",
        "kind": 2,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "def intro(lang):\n    lang.say_hello()\nNaomi = French()\njohn = Chinese()\nintro(Naomi)\nintro(john)\n# example2\n#Run-Time Polymorphism (Method Overriding):In run-time polymorphism, a method in a subclass overrides \n# the implementation of a method with the same name and signature in its superclass.\nclass Animal:",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "Naomi",
        "kind": 5,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "Naomi = French()\njohn = Chinese()\nintro(Naomi)\nintro(john)\n# example2\n#Run-Time Polymorphism (Method Overriding):In run-time polymorphism, a method in a subclass overrides \n# the implementation of a method with the same name and signature in its superclass.\nclass Animal:\n    def speak(self):\n        print(\"Animal speaks\")",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "john",
        "kind": 5,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "john = Chinese()\nintro(Naomi)\nintro(john)\n# example2\n#Run-Time Polymorphism (Method Overriding):In run-time polymorphism, a method in a subclass overrides \n# the implementation of a method with the same name and signature in its superclass.\nclass Animal:\n    def speak(self):\n        print(\"Animal speaks\")\nclass Dog(Animal):",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "dog",
        "kind": 5,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "dog = Dog()\ncat = Cat()\n# Polymorphic method call\ndog.speak()  \ncat.speak()  \n#ABSTRACTION\n    #This refers to the process of hiding the implementation details of a class and only showing the essential\n# features of the project.\n# it focuses on what the project does and not how it does.\n# in python the way we achieve abstraction is by inheritence,abstract classes and interfaces",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "cat = Cat()\n# Polymorphic method call\ndog.speak()  \ncat.speak()  \n#ABSTRACTION\n    #This refers to the process of hiding the implementation details of a class and only showing the essential\n# features of the project.\n# it focuses on what the project does and not how it does.\n# in python the way we achieve abstraction is by inheritence,abstract classes and interfaces\nfrom abc import ABC, abstractmethod",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "circle",
        "kind": 5,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "circle = Circle(5)\nrectangle = Rectangle(3, 4)\nprint(circle.area())      # Output: 78.5\nprint(rectangle.area())   # Output: 12\nfrom abc import ABC, abstractmethod\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n    @abstractmethod",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "rectangle",
        "kind": 5,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "rectangle = Rectangle(3, 4)\nprint(circle.area())      # Output: 78.5\nprint(rectangle.area())   # Output: 12\nfrom abc import ABC, abstractmethod\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n    @abstractmethod\n    def perimeter(self):",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "customer1",
        "kind": 5,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "customer1 = Customer(\"Alice\", 30)\ncustomer2 = Customer(\"Bob\", 25)\nprint(\"Customer 1:\", customer1.get_name(), customer1.get_age())  # Output: Customer 1: Alice 30\nprint(\"Customer 2:\", customer2.get_name(), customer2.get_age())  # Output: Customer 2: Bob 25",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "customer2",
        "kind": 5,
        "importPath": "afod.assignment13.assignment13",
        "description": "afod.assignment13.assignment13",
        "peekOfCode": "customer2 = Customer(\"Bob\", 25)\nprint(\"Customer 1:\", customer1.get_name(), customer1.get_age())  # Output: Customer 1: Alice 30\nprint(\"Customer 2:\", customer2.get_name(), customer2.get_age())  # Output: Customer 2: Bob 25",
        "detail": "afod.assignment13.assignment13",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "afod.assignment14.assignment14",
        "description": "afod.assignment14.assignment14",
        "peekOfCode": "def main():\n    input_string = input(\"enter your string: \")\n    reversed_string = input_string[::-1]\n    upper_cased_string = reversed_string.upper()\n    input_strip_string = input(\"enter your name begin with equal signs and end with equals\")\n    sriped_string= input_strip_string.strip(\"=\")\n    lowered_string = sriped_string.lower()\n    print(input_string)\n    print(reversed_string)\n    print(upper_cased_string)",
        "detail": "afod.assignment14.assignment14",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "afod.assignment15.assignment15",
        "description": "afod.assignment15.assignment15",
        "peekOfCode": "def main():\n    step = int(input(\"Enter the step: \"))\n    start = int(input(\"Enter the start value: \"))\n    end = int(input(\"Enter the end value: \"))\n    generated_range = list(range(start, end, step))\n    print(\"Generated range:\", generated_range)\nif __name__ == \"__main__\":\n    main()",
        "detail": "afod.assignment15.assignment15",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "afod.assignment15.assignment15",
        "description": "afod.assignment15.assignment15",
        "peekOfCode": "text = \"yooooooooooooooo\\ngotchu\"\nwith open('test.txt', 'w') as file:\n    file.write(text)\ndef main():\n    step = int(input(\"Enter the step: \"))\n    start = int(input(\"Enter the start value: \"))\n    end = int(input(\"Enter the end value: \"))\n    generated_range = list(range(start, end, step))\n    print(\"Generated range:\", generated_range)\nif __name__ == \"__main__\":",
        "detail": "afod.assignment15.assignment15",
        "documentation": {}
    },
    {
        "label": "first_code",
        "kind": 5,
        "importPath": "afod.assignment2.assignment2",
        "description": "afod.assignment2.assignment2",
        "peekOfCode": "first_code = \"hello world\"\nprint(first_code)\n#how to connect a project on a computer to github\n1.# frist you create an account on git hub\n2.# you make sure you have git installed on your laptop and if its not there you install it\n3.#you get an ssh  using this command: \"ssh-keygen -t rsa -b 4096 -C \"your email\"\n4.# then you will have connected your laptop to github now you can open your text editorand go tothe file\n#  you want to send to github and open the terminal.\n5. #then you type these commands in orderstarting with \"git init\", then \"git commit - m \"first commit\"\"\n#  and then \"git branch -M\"main\"\"",
        "detail": "afod.assignment2.assignment2",
        "documentation": {}
    },
    {
        "label": "word1",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "word1 = \"Hello\"\nword2 = \"hello\"\nprint(word1 == word2) \nword1 = \"Hello\"\nword2 = \"hello\"\nprint(word1.casefold() == word2.casefold())\n2. #casting.py\n#Casting in Python refers to the process of converting a variable from one data type to another. \n#Implicit Type Conversion:\n# Python automatically converts data types when necessary during operations.",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "word2",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "word2 = \"hello\"\nprint(word1 == word2) \nword1 = \"Hello\"\nword2 = \"hello\"\nprint(word1.casefold() == word2.casefold())\n2. #casting.py\n#Casting in Python refers to the process of converting a variable from one data type to another. \n#Implicit Type Conversion:\n# Python automatically converts data types when necessary during operations.\n# For example, when you add an integer and a float, Python automatically converts the integer to a",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "word1",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "word1 = \"Hello\"\nword2 = \"hello\"\nprint(word1.casefold() == word2.casefold())\n2. #casting.py\n#Casting in Python refers to the process of converting a variable from one data type to another. \n#Implicit Type Conversion:\n# Python automatically converts data types when necessary during operations.\n# For example, when you add an integer and a float, Python automatically converts the integer to a\n#  float before performing the addition.\n# Explicit Type Conversion:",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "word2",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "word2 = \"hello\"\nprint(word1.casefold() == word2.casefold())\n2. #casting.py\n#Casting in Python refers to the process of converting a variable from one data type to another. \n#Implicit Type Conversion:\n# Python automatically converts data types when necessary during operations.\n# For example, when you add an integer and a float, Python automatically converts the integer to a\n#  float before performing the addition.\n# Explicit Type Conversion:\n# Explicit type conversion involves manually converting a variable from one data type to another using ",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "string_num",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "string_num = \"123\"\ninteger_num = int(string_num)\n# Converting a float to an integer\nfloat_num = 3.14\ninteger_part = int(float_num)\n# Converting an integer to a float\ninteger_num = 42\nfloat_num = float(integer_num)\n3. #delete.py\nmy_list = [1, 2, 3, 4, 5]",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "integer_num",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "integer_num = int(string_num)\n# Converting a float to an integer\nfloat_num = 3.14\ninteger_part = int(float_num)\n# Converting an integer to a float\ninteger_num = 42\nfloat_num = float(integer_num)\n3. #delete.py\nmy_list = [1, 2, 3, 4, 5]\ndel my_list[2]  ",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "float_num",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "float_num = 3.14\ninteger_part = int(float_num)\n# Converting an integer to a float\ninteger_num = 42\nfloat_num = float(integer_num)\n3. #delete.py\nmy_list = [1, 2, 3, 4, 5]\ndel my_list[2]  \nprint(my_list)  \n# Using remove() method",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "integer_part",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "integer_part = int(float_num)\n# Converting an integer to a float\ninteger_num = 42\nfloat_num = float(integer_num)\n3. #delete.py\nmy_list = [1, 2, 3, 4, 5]\ndel my_list[2]  \nprint(my_list)  \n# Using remove() method\nmy_list.remove(4) ",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "integer_num",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "integer_num = 42\nfloat_num = float(integer_num)\n3. #delete.py\nmy_list = [1, 2, 3, 4, 5]\ndel my_list[2]  \nprint(my_list)  \n# Using remove() method\nmy_list.remove(4) \nprint(my_list)     \nmy_dict = {'a': 1, 'b': 2, 'c': 3}",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "float_num",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "float_num = float(integer_num)\n3. #delete.py\nmy_list = [1, 2, 3, 4, 5]\ndel my_list[2]  \nprint(my_list)  \n# Using remove() method\nmy_list.remove(4) \nprint(my_list)     \nmy_dict = {'a': 1, 'b': 2, 'c': 3}\ndel my_dict['b']  ",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "my_list = [1, 2, 3, 4, 5]\ndel my_list[2]  \nprint(my_list)  \n# Using remove() method\nmy_list.remove(4) \nprint(my_list)     \nmy_dict = {'a': 1, 'b': 2, 'c': 3}\ndel my_dict['b']  \nprint(my_dict)    \npopped_value = my_dict.pop('c')  ",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "my_dict = {'a': 1, 'b': 2, 'c': 3}\ndel my_dict['b']  \nprint(my_dict)    \npopped_value = my_dict.pop('c')  \nprint(popped_value)               \nprint(my_dict)                   \n4. #naming.py\ntotal_count = 10\nuser_name = \"John Doe\"\nis_active = True",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "popped_value",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "popped_value = my_dict.pop('c')  \nprint(popped_value)               \nprint(my_dict)                   \n4. #naming.py\ntotal_count = 10\nuser_name = \"John Doe\"\nis_active = True\n5. #multiply.py\n# Multiplying integers\nresult = 3 * 5",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "total_count",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "total_count = 10\nuser_name = \"John Doe\"\nis_active = True\n5. #multiply.py\n# Multiplying integers\nresult = 3 * 5\nprint(result)  \n# Multiplying floats\nresult = 3.5 * 2.5\nprint(result) ",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "user_name",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "user_name = \"John Doe\"\nis_active = True\n5. #multiply.py\n# Multiplying integers\nresult = 3 * 5\nprint(result)  \n# Multiplying floats\nresult = 3.5 * 2.5\nprint(result) \n# Multiplying a string to repeat it",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "is_active",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "is_active = True\n5. #multiply.py\n# Multiplying integers\nresult = 3 * 5\nprint(result)  \n# Multiplying floats\nresult = 3.5 * 2.5\nprint(result) \n# Multiplying a string to repeat it\nmessage = \"Hello, \"",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "result = 3 * 5\nprint(result)  \n# Multiplying floats\nresult = 3.5 * 2.5\nprint(result) \n# Multiplying a string to repeat it\nmessage = \"Hello, \"\nrepeated_message = message * 3\nprint(repeated_message)  \n# Multiplying a list to repeat it",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "result = 3.5 * 2.5\nprint(result) \n# Multiplying a string to repeat it\nmessage = \"Hello, \"\nrepeated_message = message * 3\nprint(repeated_message)  \n# Multiplying a list to repeat it\nnumbers = [1, 2, 3]\nrepeated_numbers = numbers * 2\nprint(repeated_numbers)  ",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "message = \"Hello, \"\nrepeated_message = message * 3\nprint(repeated_message)  \n# Multiplying a list to repeat it\nnumbers = [1, 2, 3]\nrepeated_numbers = numbers * 2\nprint(repeated_numbers)  \n6. #type.py\n# Integer\nx = 5",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "repeated_message",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "repeated_message = message * 3\nprint(repeated_message)  \n# Multiplying a list to repeat it\nnumbers = [1, 2, 3]\nrepeated_numbers = numbers * 2\nprint(repeated_numbers)  \n6. #type.py\n# Integer\nx = 5\nprint(type(x)) ",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "numbers = [1, 2, 3]\nrepeated_numbers = numbers * 2\nprint(repeated_numbers)  \n6. #type.py\n# Integer\nx = 5\nprint(type(x)) \n# Float\ny = 3.14\nprint(type(y)) ",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "repeated_numbers",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "repeated_numbers = numbers * 2\nprint(repeated_numbers)  \n6. #type.py\n# Integer\nx = 5\nprint(type(x)) \n# Float\ny = 3.14\nprint(type(y)) \n# String",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "x = 5\nprint(type(x)) \n# Float\ny = 3.14\nprint(type(y)) \n# String\nz = \"Hello\"\nprint(type(z))  \n# List\nmy_list = [1, 2, 3]",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "y = 3.14\nprint(type(y)) \n# String\nz = \"Hello\"\nprint(type(z))  \n# List\nmy_list = [1, 2, 3]\nprint(type(my_list))",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "z = \"Hello\"\nprint(type(z))  \n# List\nmy_list = [1, 2, 3]\nprint(type(my_list))",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "afod.assignment3.assignment3",
        "description": "afod.assignment3.assignment3",
        "peekOfCode": "my_list = [1, 2, 3]\nprint(type(my_list))",
        "detail": "afod.assignment3.assignment3",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "afod.assignment7.assignment7",
        "description": "afod.assignment7.assignment7",
        "peekOfCode": "def add(a, b):\n    return a + b\nresult = add(3, 4)\nprint(result)\ndef greet(name):\n    print(f\"Hello, {name}!\")\nresult = greet(\"Alice\")\nprint(result)",
        "detail": "afod.assignment7.assignment7",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "afod.assignment7.assignment7",
        "description": "afod.assignment7.assignment7",
        "peekOfCode": "def greet(name):\n    print(f\"Hello, {name}!\")\nresult = greet(\"Alice\")\nprint(result)",
        "detail": "afod.assignment7.assignment7",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment7.assignment7",
        "description": "afod.assignment7.assignment7",
        "peekOfCode": "result = add(3, 4)\nprint(result)\ndef greet(name):\n    print(f\"Hello, {name}!\")\nresult = greet(\"Alice\")\nprint(result)",
        "detail": "afod.assignment7.assignment7",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment7.assignment7",
        "description": "afod.assignment7.assignment7",
        "peekOfCode": "result = greet(\"Alice\")\nprint(result)",
        "detail": "afod.assignment7.assignment7",
        "documentation": {}
    },
    {
        "label": "numeric_elements",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "numeric_elements = [x for x in list1 if isinstance(x, int) or isinstance(x, float)]\nprint(numeric_elements) \n# how do you remove an element from a list using a pop method or function?\n#To remove an element from a list using the pop() method,\n#  you specify the index of the element you want to remove. \n# The pop() method not only removes the element but also returns it. \n# If you don't provide an index, it will remove and return the last element by default.\nmy_list = [1, 2, 3, 4, 5]\n# Removing the element at index 2 (which is 3)\nremoved_element = my_list.pop(2)",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "my_list = [1, 2, 3, 4, 5]\n# Removing the element at index 2 (which is 3)\nremoved_element = my_list.pop(2)\nprint(\"Removed element:\", removed_element)  # Output: Removed element: 3\nprint(\"List after removal:\", my_list)       # Output: List after removal: [1, 2, 4, 5]\n# Removing the last element without specifying an index\nremoved_element = my_list.pop()\nprint(\"Removed element:\", removed_element) \nprint(\"List after removal:\", my_list)    \n# how to delete in a dictionary",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "removed_element",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "removed_element = my_list.pop(2)\nprint(\"Removed element:\", removed_element)  # Output: Removed element: 3\nprint(\"List after removal:\", my_list)       # Output: List after removal: [1, 2, 4, 5]\n# Removing the last element without specifying an index\nremoved_element = my_list.pop()\nprint(\"Removed element:\", removed_element) \nprint(\"List after removal:\", my_list)    \n# how to delete in a dictionary\n#  you can delete items from a dictionary using the del keyword or the pop()\n#Using del keyword:",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "removed_element",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "removed_element = my_list.pop()\nprint(\"Removed element:\", removed_element) \nprint(\"List after removal:\", my_list)    \n# how to delete in a dictionary\n#  you can delete items from a dictionary using the del keyword or the pop()\n#Using del keyword:\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\n# Deleting the item with key 'b'\ndel my_dict['b']\nprint(my_dict)  # Output: {'a': 1, 'c': 3}",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "my_dict = {'a': 1, 'b': 2, 'c': 3}\n# Deleting the item with key 'b'\ndel my_dict['b']\nprint(my_dict)  # Output: {'a': 1, 'c': 3}\n#Using pop() method:\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\n# Deleting the item with key 'b' and returning its value\nremoved_value = my_dict.pop('b')\nprint(\"Removed value:\", removed_value)  # Output: Removed value: 2\nprint(\"Dictionary after deletion:\", my_dict)  # Output: Dictionary after",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "my_dict = {'a': 1, 'b': 2, 'c': 3}\n# Deleting the item with key 'b' and returning its value\nremoved_value = my_dict.pop('b')\nprint(\"Removed value:\", removed_value)  # Output: Removed value: 2\nprint(\"Dictionary after deletion:\", my_dict)  # Output: Dictionary after\n#how to use logical operators\n# logical operators are used to perform logical operations on boolean values or expressions. \n# The three main logical operators are and, or, and not.\n#'and': Returns True if both operands are True, otherwise returns False\nx = 5",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "removed_value",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "removed_value = my_dict.pop('b')\nprint(\"Removed value:\", removed_value)  # Output: Removed value: 2\nprint(\"Dictionary after deletion:\", my_dict)  # Output: Dictionary after\n#how to use logical operators\n# logical operators are used to perform logical operations on boolean values or expressions. \n# The three main logical operators are and, or, and not.\n#'and': Returns True if both operands are True, otherwise returns False\nx = 5\ny = 10\nz = 15",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "x = 5\ny = 10\nz = 15\n# Check if x is greater than 0 AND y is greater than 0\nresult = (x > 0) and (y > 0)\nprint(result)  # Output: True\n# Check if x is greater than 0 AND y is greater than 0 AND z is greater than 0\nresult = (x > 0) and (y > 0) and (z > 0)\nprint(result)  # Output: True\n#'or': Returns True if at least one operand is True, otherwise returns False.",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "y = 10\nz = 15\n# Check if x is greater than 0 AND y is greater than 0\nresult = (x > 0) and (y > 0)\nprint(result)  # Output: True\n# Check if x is greater than 0 AND y is greater than 0 AND z is greater than 0\nresult = (x > 0) and (y > 0) and (z > 0)\nprint(result)  # Output: True\n#'or': Returns True if at least one operand is True, otherwise returns False.\nx = 5",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "z = 15\n# Check if x is greater than 0 AND y is greater than 0\nresult = (x > 0) and (y > 0)\nprint(result)  # Output: True\n# Check if x is greater than 0 AND y is greater than 0 AND z is greater than 0\nresult = (x > 0) and (y > 0) and (z > 0)\nprint(result)  # Output: True\n#'or': Returns True if at least one operand is True, otherwise returns False.\nx = 5\ny = -2",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = (x > 0) and (y > 0)\nprint(result)  # Output: True\n# Check if x is greater than 0 AND y is greater than 0 AND z is greater than 0\nresult = (x > 0) and (y > 0) and (z > 0)\nprint(result)  # Output: True\n#'or': Returns True if at least one operand is True, otherwise returns False.\nx = 5\ny = -2\n# Check if x is greater than 0 OR y is greater than 0\nresult = (x > 0) or (y > 0)",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = (x > 0) and (y > 0) and (z > 0)\nprint(result)  # Output: True\n#'or': Returns True if at least one operand is True, otherwise returns False.\nx = 5\ny = -2\n# Check if x is greater than 0 OR y is greater than 0\nresult = (x > 0) or (y > 0)\nprint(result)  # Output: True\n# Check if x is greater than 0 OR y is greater than 0 OR both\nresult = (x > 0) or (y > 0) or (x == y)",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "x = 5\ny = -2\n# Check if x is greater than 0 OR y is greater than 0\nresult = (x > 0) or (y > 0)\nprint(result)  # Output: True\n# Check if x is greater than 0 OR y is greater than 0 OR both\nresult = (x > 0) or (y > 0) or (x == y)\nprint(result)  # Output: True\n#not: Returns the negation of the operand, i.e., \n# True becomes False and False becomes True",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "y = -2\n# Check if x is greater than 0 OR y is greater than 0\nresult = (x > 0) or (y > 0)\nprint(result)  # Output: True\n# Check if x is greater than 0 OR y is greater than 0 OR both\nresult = (x > 0) or (y > 0) or (x == y)\nprint(result)  # Output: True\n#not: Returns the negation of the operand, i.e., \n# True becomes False and False becomes True\nx = True",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = (x > 0) or (y > 0)\nprint(result)  # Output: True\n# Check if x is greater than 0 OR y is greater than 0 OR both\nresult = (x > 0) or (y > 0) or (x == y)\nprint(result)  # Output: True\n#not: Returns the negation of the operand, i.e., \n# True becomes False and False becomes True\nx = True\ny = False\n# Negate the value of x",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = (x > 0) or (y > 0) or (x == y)\nprint(result)  # Output: True\n#not: Returns the negation of the operand, i.e., \n# True becomes False and False becomes True\nx = True\ny = False\n# Negate the value of x\nresult = not x\nprint(result)  # Output: False\n# Negate the value of y",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "x = True\ny = False\n# Negate the value of x\nresult = not x\nprint(result)  # Output: False\n# Negate the value of y\nresult = not y\nprint(result)  # Output: True\n#how to use precidence\n# operator precedence determines the order in which operators are evaluated when an",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "y = False\n# Negate the value of x\nresult = not x\nprint(result)  # Output: False\n# Negate the value of y\nresult = not y\nprint(result)  # Output: True\n#how to use precidence\n# operator precedence determines the order in which operators are evaluated when an\n#  expression contains multiple operators.",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = not x\nprint(result)  # Output: False\n# Negate the value of y\nresult = not y\nprint(result)  # Output: True\n#how to use precidence\n# operator precedence determines the order in which operators are evaluated when an\n#  expression contains multiple operators.\n# Parentheses () - Highest precedence, expressions within parentheses are evaluated first.\n# Exponentiation ** - Second highest precedence.",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = not y\nprint(result)  # Output: True\n#how to use precidence\n# operator precedence determines the order in which operators are evaluated when an\n#  expression contains multiple operators.\n# Parentheses () - Highest precedence, expressions within parentheses are evaluated first.\n# Exponentiation ** - Second highest precedence.\n# Unary arithmetic operations: -x, +x, ~x - Unary minus, unary plus, and bitwise NOT.\n# Multiplication *, Division /, Floor division //, Modulus % - Multiplication, \n# division, integer division, and modulus have the same precedence and are evaluated from left to right.",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = 2 + 3 * 4  # Multiplication has higher precedence, so 3 * 4 is evaluated first\nprint(result)  # Output: 14\nresult = (2 + 3) * 4  # Parentheses have highest precedence, so 2 + 3 is evaluated first\nprint(result)  # Output: 20\n#assignment operators\n#Assignment operators in Python are used to assign values to variables.\n# = : Assigns the value on the right side to the variable on the left side\n# += : Adds the value on the right side to the variable's current value and assigns the result to the variable.\n# -= : Subtracts the value on the right side from the variable's\n#  current value and assigns the result to the variable.",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = (2 + 3) * 4  # Parentheses have highest precedence, so 2 + 3 is evaluated first\nprint(result)  # Output: 20\n#assignment operators\n#Assignment operators in Python are used to assign values to variables.\n# = : Assigns the value on the right side to the variable on the left side\n# += : Adds the value on the right side to the variable's current value and assigns the result to the variable.\n# -= : Subtracts the value on the right side from the variable's\n#  current value and assigns the result to the variable.\n# *= : Multiplies the variable's current value by the value on the \n# right side and assigns the result to the variable.",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "#",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "# = : Assigns the value on the right side to the variable on the left side\n# += : Adds the value on the right side to the variable's current value and assigns the result to the variable.\n# -= : Subtracts the value on the right side from the variable's\n#  current value and assigns the result to the variable.\n# *= : Multiplies the variable's current value by the value on the \n# right side and assigns the result to the variable.\n# /= : Divides the variable's current value by the value on the right side and assigns the result\n#  to the variable.\n# //= : Performs integer division of the variable's current value by the value on the right side and assigns the\n#  result to the variable.",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "x = 5  # 101 in binary\ny = 3  # 011 in binary\nresult = x & y  # 001 in binary\nprint(result)   # Output: 1\n# | : Bitwise OR - Sets each bit to 1 if at least one of the bits is 1.\nx = 5  # 101 in binary\ny = 3  # 011 in binary\nresult = x | y  # 111 in binary\nprint(result)   # Output: 7\n# ^ : Bitwise XOR - Sets each bit to 1 if only one of the bits is 1.",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "y = 3  # 011 in binary\nresult = x & y  # 001 in binary\nprint(result)   # Output: 1\n# | : Bitwise OR - Sets each bit to 1 if at least one of the bits is 1.\nx = 5  # 101 in binary\ny = 3  # 011 in binary\nresult = x | y  # 111 in binary\nprint(result)   # Output: 7\n# ^ : Bitwise XOR - Sets each bit to 1 if only one of the bits is 1.\nx = 5  # 101 in binary",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = x & y  # 001 in binary\nprint(result)   # Output: 1\n# | : Bitwise OR - Sets each bit to 1 if at least one of the bits is 1.\nx = 5  # 101 in binary\ny = 3  # 011 in binary\nresult = x | y  # 111 in binary\nprint(result)   # Output: 7\n# ^ : Bitwise XOR - Sets each bit to 1 if only one of the bits is 1.\nx = 5  # 101 in binary\ny = 3  # 011 in binary",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "x = 5  # 101 in binary\ny = 3  # 011 in binary\nresult = x | y  # 111 in binary\nprint(result)   # Output: 7\n# ^ : Bitwise XOR - Sets each bit to 1 if only one of the bits is 1.\nx = 5  # 101 in binary\ny = 3  # 011 in binary\nresult = x ^ y  # 110 in binary\nprint(result)   # Output: 6\n#  : Bitwise NOT - Inverts all the bits.",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "y = 3  # 011 in binary\nresult = x | y  # 111 in binary\nprint(result)   # Output: 7\n# ^ : Bitwise XOR - Sets each bit to 1 if only one of the bits is 1.\nx = 5  # 101 in binary\ny = 3  # 011 in binary\nresult = x ^ y  # 110 in binary\nprint(result)   # Output: 6\n#  : Bitwise NOT - Inverts all the bits.\nx = 5  # 101 in binary",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = x | y  # 111 in binary\nprint(result)   # Output: 7\n# ^ : Bitwise XOR - Sets each bit to 1 if only one of the bits is 1.\nx = 5  # 101 in binary\ny = 3  # 011 in binary\nresult = x ^ y  # 110 in binary\nprint(result)   # Output: 6\n#  : Bitwise NOT - Inverts all the bits.\nx = 5  # 101 in binary\nresult = ~x  # -(x+1) in binary",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "x = 5  # 101 in binary\ny = 3  # 011 in binary\nresult = x ^ y  # 110 in binary\nprint(result)   # Output: 6\n#  : Bitwise NOT - Inverts all the bits.\nx = 5  # 101 in binary\nresult = ~x  # -(x+1) in binary\nprint(result)   # Output: -6\n# << : Left shift - Shifts the bits of the left operand to the left by the number of positions specified\n#  by the right operand.",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "y = 3  # 011 in binary\nresult = x ^ y  # 110 in binary\nprint(result)   # Output: 6\n#  : Bitwise NOT - Inverts all the bits.\nx = 5  # 101 in binary\nresult = ~x  # -(x+1) in binary\nprint(result)   # Output: -6\n# << : Left shift - Shifts the bits of the left operand to the left by the number of positions specified\n#  by the right operand.\nx = 5  # 101 in binary",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = x ^ y  # 110 in binary\nprint(result)   # Output: 6\n#  : Bitwise NOT - Inverts all the bits.\nx = 5  # 101 in binary\nresult = ~x  # -(x+1) in binary\nprint(result)   # Output: -6\n# << : Left shift - Shifts the bits of the left operand to the left by the number of positions specified\n#  by the right operand.\nx = 5  # 101 in binary\nresult = x << 1  # 1010 in binary, equivalent to multiplying x by 2",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "x = 5  # 101 in binary\nresult = ~x  # -(x+1) in binary\nprint(result)   # Output: -6\n# << : Left shift - Shifts the bits of the left operand to the left by the number of positions specified\n#  by the right operand.\nx = 5  # 101 in binary\nresult = x << 1  # 1010 in binary, equivalent to multiplying x by 2\nprint(result)    # Output: 10\n#>> : Right shift - Shifts the bits of the left operand to the right by the number of positions specified by the right operand.\nx = 5  # 101 in binary",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = ~x  # -(x+1) in binary\nprint(result)   # Output: -6\n# << : Left shift - Shifts the bits of the left operand to the left by the number of positions specified\n#  by the right operand.\nx = 5  # 101 in binary\nresult = x << 1  # 1010 in binary, equivalent to multiplying x by 2\nprint(result)    # Output: 10\n#>> : Right shift - Shifts the bits of the left operand to the right by the number of positions specified by the right operand.\nx = 5  # 101 in binary\nresult = x >> 1  # 10 in binary, equivalent to dividing x by 2",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "x = 5  # 101 in binary\nresult = x << 1  # 1010 in binary, equivalent to multiplying x by 2\nprint(result)    # Output: 10\n#>> : Right shift - Shifts the bits of the left operand to the right by the number of positions specified by the right operand.\nx = 5  # 101 in binary\nresult = x >> 1  # 10 in binary, equivalent to dividing x by 2\nprint(result)    # Output: 2",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = x << 1  # 1010 in binary, equivalent to multiplying x by 2\nprint(result)    # Output: 10\n#>> : Right shift - Shifts the bits of the left operand to the right by the number of positions specified by the right operand.\nx = 5  # 101 in binary\nresult = x >> 1  # 10 in binary, equivalent to dividing x by 2\nprint(result)    # Output: 2",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "x = 5  # 101 in binary\nresult = x >> 1  # 10 in binary, equivalent to dividing x by 2\nprint(result)    # Output: 2",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "afod.assignment8.assignments",
        "description": "afod.assignment8.assignments",
        "peekOfCode": "result = x >> 1  # 10 in binary, equivalent to dividing x by 2\nprint(result)    # Output: 2",
        "detail": "afod.assignment8.assignments",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "afod.class_1",
        "description": "afod.class_1",
        "peekOfCode": "class Car:\n    def __init__(self, make, model, year):\n        self.make=make\n        self.model=model\n        self.year=year\n        self.is_running=False\n    def start_engine(self):\n        self.is_running=True\n        print(\"the engine has started\")\n    def stop_engine(self):",
        "detail": "afod.class_1",
        "documentation": {}
    },
    {
        "label": "my_car",
        "kind": 5,
        "importPath": "afod.class_1",
        "description": "afod.class_1",
        "peekOfCode": "my_car = Car(make, model, year)\nprint(f\"The car Make: {my_car.make}\")\nprint(f\"The car Model: {my_car.model}\")\nprint(f\"The car Year: {my_car.year}\")\nmy_car.start_engine()\nprint(my_car.is_running)\nmy_car.stop_engine()\nprint(my_car.is_running)",
        "detail": "afod.class_1",
        "documentation": {}
    },
    {
        "label": "afod",
        "kind": 2,
        "importPath": "afod.main",
        "description": "afod.main",
        "peekOfCode": "def afod():\n    print(\"gotchu\")\nif __name__ == \"__main__\":\n    afod()",
        "detail": "afod.main",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "afod.oop",
        "description": "afod.oop",
        "peekOfCode": "class Person:\n    def __init__(self, fname, lname):\n        self.fname = fname\n        self.lname = lname\n    def display_name(self):\n        print(self.fname, self.lname)\nclass Student(Person):\n    def __init__(fname, lname):\n        super().__init__(fname, lname)\n    def display_info(self):",
        "detail": "afod.oop",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "afod.oop",
        "description": "afod.oop",
        "peekOfCode": "class Student(Person):\n    def __init__(fname, lname):\n        super().__init__(fname, lname)\n    def display_info(self):\n        super().display_info()\nstudent1=Person(\"afod\", \"mat\")",
        "detail": "afod.oop",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 6,
        "importPath": "Aksam.abstract.class_1",
        "description": "Aksam.abstract.class_1",
        "peekOfCode": "class ABC:\n    def __init__(self, name, size):\n        self.name = name\n        self.size  = size\n    def size(self):\n        print(f\"Your size is {self.size}\")\nslick = ABC(\"Cyrus\", 40)",
        "detail": "Aksam.abstract.class_1",
        "documentation": {}
    },
    {
        "label": "slick",
        "kind": 5,
        "importPath": "Aksam.abstract.class_1",
        "description": "Aksam.abstract.class_1",
        "peekOfCode": "slick = ABC(\"Cyrus\", 40)",
        "detail": "Aksam.abstract.class_1",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "Aksam.abstract.test",
        "description": "Aksam.abstract.test",
        "peekOfCode": "class Human(ABC):\n    def __init__(self, name, size):\n        self.name = name\n        self.sized = size\n    @abstractmethod\n    def method1(self):\n        print(\"Hello world\")\n    def method2(self):\n        print(\"Hello world guys\")\nclass MorgCity(Human):",
        "detail": "Aksam.abstract.test",
        "documentation": {}
    },
    {
        "label": "MorgCity",
        "kind": 6,
        "importPath": "Aksam.abstract.test",
        "description": "Aksam.abstract.test",
        "peekOfCode": "class MorgCity(Human):\n    def method1(self):\n        super().method1()\n        return\ncity = MorgCity(\"Aksam\", 40)\ncity.method1()\ncity.method2()",
        "detail": "Aksam.abstract.test",
        "documentation": {}
    },
    {
        "label": "city",
        "kind": 5,
        "importPath": "Aksam.abstract.test",
        "description": "Aksam.abstract.test",
        "peekOfCode": "city = MorgCity(\"Aksam\", 40)\ncity.method1()\ncity.method2()",
        "detail": "Aksam.abstract.test",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 2,
        "importPath": "Aksam.advanced_func.main",
        "description": "Aksam.advanced_func.main",
        "peekOfCode": "def first():\n    print(\"first code\")\ndef main():\n    print(\"this script is being executed directly\")\nif __name__==\"__main__\":\n    main()\n    first()",
        "detail": "Aksam.advanced_func.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Aksam.advanced_func.main",
        "description": "Aksam.advanced_func.main",
        "peekOfCode": "def main():\n    print(\"this script is being executed directly\")\nif __name__==\"__main__\":\n    main()\n    first()",
        "detail": "Aksam.advanced_func.main",
        "documentation": {}
    },
    {
        "label": "step",
        "kind": 5,
        "importPath": "Aksam.advanced_func.range",
        "description": "Aksam.advanced_func.range",
        "peekOfCode": "step = int(input(\"Enter the step u want it to follow: \"))\nfor i in range(start,end,step):\n    print(i)\n    for i in range(5):\n    # print(i)\n    pass\n#start and end point\nfor i in range(2,8):\n    # print(i)\n    pass",
        "detail": "Aksam.advanced_func.range",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "class Human:\n    def brain(self):\n        return \"Thinking\"\nclass Cow(Human):\n    def brain(self):\n        return \"Closure\"\nclass Goat(Human):\n    def brain(self):\n        return \"Meow\"\n# polymorphism example 1",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "Cow",
        "kind": 6,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "class Cow(Human):\n    def brain(self):\n        return \"Closure\"\nclass Goat(Human):\n    def brain(self):\n        return \"Meow\"\n# polymorphism example 1\ndef make_sound(animal):\n    return animal.brain()\ncow = Cow()",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "Goat",
        "kind": 6,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "class Goat(Human):\n    def brain(self):\n        return \"Meow\"\n# polymorphism example 1\ndef make_sound(animal):\n    return animal.brain()\ncow = Cow()\ngoat = Goat()\nprint(make_sound(cow))\nprint(make_sound(goat))",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\np1 = Point(1,2)\np2 = Point(28,12)\nresult = p1 + p2\nprint(f\"Result: {result.x}, {result.y}\")",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "BankAccount",
        "kind": 6,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "class BankAccount():\n    def __init__(self, account_number, balance):\n        self._account_number = account_number # encapsulated attribute\n        self._balance = balance # encapsulated attribute\n    def deposit(self, amount):\n        self._balance += amount\n    def withdraw(self, amount):\n        if self._balance >= amount:\n            self._balance -= amount\n        else:",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "make_sound",
        "kind": 2,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "def make_sound(animal):\n    return animal.brain()\ncow = Cow()\ngoat = Goat()\nprint(make_sound(cow))\nprint(make_sound(goat))\n# polymorphism example 2\nclass Point:\n    def __init__(self, x, y):\n        self.x = x",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "cow",
        "kind": 5,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "cow = Cow()\ngoat = Goat()\nprint(make_sound(cow))\nprint(make_sound(goat))\n# polymorphism example 2\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __add__(self, other):",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "goat",
        "kind": 5,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "goat = Goat()\nprint(make_sound(cow))\nprint(make_sound(goat))\n# polymorphism example 2\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "p1 = Point(1,2)\np2 = Point(28,12)\nresult = p1 + p2\nprint(f\"Result: {result.x}, {result.y}\")\n# Encapsulation: Refers to the bundling of data(attributes) and methds(functions) that operate on the data into a single unit,typically a class\nclass BankAccount():\n    def __init__(self, account_number, balance):\n        self._account_number = account_number # encapsulated attribute\n        self._balance = balance # encapsulated attribute\n    def deposit(self, amount):",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "p2",
        "kind": 5,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "p2 = Point(28,12)\nresult = p1 + p2\nprint(f\"Result: {result.x}, {result.y}\")\n# Encapsulation: Refers to the bundling of data(attributes) and methds(functions) that operate on the data into a single unit,typically a class\nclass BankAccount():\n    def __init__(self, account_number, balance):\n        self._account_number = account_number # encapsulated attribute\n        self._balance = balance # encapsulated attribute\n    def deposit(self, amount):\n        self._balance += amount",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "result = p1 + p2\nprint(f\"Result: {result.x}, {result.y}\")\n# Encapsulation: Refers to the bundling of data(attributes) and methds(functions) that operate on the data into a single unit,typically a class\nclass BankAccount():\n    def __init__(self, account_number, balance):\n        self._account_number = account_number # encapsulated attribute\n        self._balance = balance # encapsulated attribute\n    def deposit(self, amount):\n        self._balance += amount\n    def withdraw(self, amount):",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "balance",
        "kind": 5,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "balance = int(input(\"Enter bank balance: \"))\naccount_num = int(input(\"Enter bank account number: \"))\naccount1 = BankAccount(account_num, balance)\ndepos = int(input(\"Enter money to deposit: \"))\nwid = int(input(\"Enter money to withdraw: \"))\naccount1.deposit(depos)\naccount1.withdraw(wid)\nprint(\"-----------------------------\")",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "account_num",
        "kind": 5,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "account_num = int(input(\"Enter bank account number: \"))\naccount1 = BankAccount(account_num, balance)\ndepos = int(input(\"Enter money to deposit: \"))\nwid = int(input(\"Enter money to withdraw: \"))\naccount1.deposit(depos)\naccount1.withdraw(wid)\nprint(\"-----------------------------\")",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "account1",
        "kind": 5,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "account1 = BankAccount(account_num, balance)\ndepos = int(input(\"Enter money to deposit: \"))\nwid = int(input(\"Enter money to withdraw: \"))\naccount1.deposit(depos)\naccount1.withdraw(wid)\nprint(\"-----------------------------\")",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "depos",
        "kind": 5,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "depos = int(input(\"Enter money to deposit: \"))\nwid = int(input(\"Enter money to withdraw: \"))\naccount1.deposit(depos)\naccount1.withdraw(wid)\nprint(\"-----------------------------\")",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "wid",
        "kind": 5,
        "importPath": "Aksam.assignments.asigment_11.class_1",
        "description": "Aksam.assignments.asigment_11.class_1",
        "peekOfCode": "wid = int(input(\"Enter money to withdraw: \"))\naccount1.deposit(depos)\naccount1.withdraw(wid)\nprint(\"-----------------------------\")",
        "detail": "Aksam.assignments.asigment_11.class_1",
        "documentation": {}
    },
    {
        "label": "month",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_1.hello_world",
        "description": "Aksam.assignments.asignment_1.hello_world",
        "peekOfCode": "month = \"January\"\nage=30\nis_teacher = True\nprint(month)\nprint(age)\nprint(is_teacher)",
        "detail": "Aksam.assignments.asignment_1.hello_world",
        "documentation": {}
    },
    {
        "label": "is_teacher",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_1.hello_world",
        "description": "Aksam.assignments.asignment_1.hello_world",
        "peekOfCode": "is_teacher = True\nprint(month)\nprint(age)\nprint(is_teacher)",
        "detail": "Aksam.assignments.asignment_1.hello_world",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "Aksam.assignments.asignment_10.class",
        "description": "Aksam.assignments.asignment_10.class",
        "peekOfCode": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def greet(self):\n        return f\"Hello, my name is {self.name} and i am {self.age} yrs old. \"\n    @property\n    def is_adult(self):\n        return self.age >= 18\n    def celebrate(self):",
        "detail": "Aksam.assignments.asignment_10.class",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "Aksam.assignments.asignment_10.class",
        "description": "Aksam.assignments.asignment_10.class",
        "peekOfCode": "class Car(Person): # inheritance\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.is_running = False\n    def start_engine(self):\n        self.is_running = True\n        print(\"The car engine has started\")\n        print(self.is_running)",
        "detail": "Aksam.assignments.asignment_10.class",
        "documentation": {}
    },
    {
        "label": "my_self",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_10.class",
        "description": "Aksam.assignments.asignment_10.class",
        "peekOfCode": "my_self = Person(\"Aksam\",25) # object\n# accessing properties\nprint(my_self.name)\nprint(my_self.age)\n# calling methods\nprint(my_self.greet())\nprint(my_self.is_adult)\nmy_self.celebrate()\nprint(my_self.age)\nprint(my_self.is_adult)",
        "detail": "Aksam.assignments.asignment_10.class",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_10.class",
        "description": "Aksam.assignments.asignment_10.class",
        "peekOfCode": "make = str(input(\"Please enter car make: \"))\nmodel = str(input(\"Please enter car model: \"))\nyear = int(input(\"Please enter car year: \"))\nmy_car = Car(make, model, year)\nprint(my_car.start_engine())\nprint(my_car.stop_engine())",
        "detail": "Aksam.assignments.asignment_10.class",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_10.class",
        "description": "Aksam.assignments.asignment_10.class",
        "peekOfCode": "model = str(input(\"Please enter car model: \"))\nyear = int(input(\"Please enter car year: \"))\nmy_car = Car(make, model, year)\nprint(my_car.start_engine())\nprint(my_car.stop_engine())",
        "detail": "Aksam.assignments.asignment_10.class",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_10.class",
        "description": "Aksam.assignments.asignment_10.class",
        "peekOfCode": "year = int(input(\"Please enter car year: \"))\nmy_car = Car(make, model, year)\nprint(my_car.start_engine())\nprint(my_car.stop_engine())",
        "detail": "Aksam.assignments.asignment_10.class",
        "documentation": {}
    },
    {
        "label": "my_car",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_10.class",
        "description": "Aksam.assignments.asignment_10.class",
        "peekOfCode": "my_car = Car(make, model, year)\nprint(my_car.start_engine())\nprint(my_car.stop_engine())",
        "detail": "Aksam.assignments.asignment_10.class",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "Aksam.assignments.asignment_12.asignment",
        "description": "Aksam.assignments.asignment_12.asignment",
        "peekOfCode": "class Shape(ABC):\n    def area(self):\n        pass\nclass Rectangle(Shape):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def area(self):\n        return self.length * self.width\nclass Circle(Shape):",
        "detail": "Aksam.assignments.asignment_12.asignment",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "Aksam.assignments.asignment_12.asignment",
        "description": "Aksam.assignments.asignment_12.asignment",
        "peekOfCode": "class Rectangle(Shape):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def area(self):\n        return self.length * self.width\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):",
        "detail": "Aksam.assignments.asignment_12.asignment",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "Aksam.assignments.asignment_12.asignment",
        "description": "Aksam.assignments.asignment_12.asignment",
        "peekOfCode": "class Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return 3.14 * self.radius * self.radius\nrectangle = Rectangle(5,4)\ncircle = Circle(3)\nprint(\"Area of a rectangle\", rectangle.area())\nprint(\"Area of a circle\", circle.area())",
        "detail": "Aksam.assignments.asignment_12.asignment",
        "documentation": {}
    },
    {
        "label": "rectangle",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_12.asignment",
        "description": "Aksam.assignments.asignment_12.asignment",
        "peekOfCode": "rectangle = Rectangle(5,4)\ncircle = Circle(3)\nprint(\"Area of a rectangle\", rectangle.area())\nprint(\"Area of a circle\", circle.area())",
        "detail": "Aksam.assignments.asignment_12.asignment",
        "documentation": {}
    },
    {
        "label": "circle",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_12.asignment",
        "description": "Aksam.assignments.asignment_12.asignment",
        "peekOfCode": "circle = Circle(3)\nprint(\"Area of a rectangle\", rectangle.area())\nprint(\"Area of a circle\", circle.area())",
        "detail": "Aksam.assignments.asignment_12.asignment",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "Aksam.assignments.asignment_13.assignment",
        "description": "Aksam.assignments.asignment_13.assignment",
        "peekOfCode": "class Shape(ABC):\n    @abstractmethod\n    def shape_area(self):\n        pass\n    @abstractmethod\n    def shape_perimeter(self):\n        pass\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width",
        "detail": "Aksam.assignments.asignment_13.assignment",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "Aksam.assignments.asignment_13.assignment",
        "description": "Aksam.assignments.asignment_13.assignment",
        "peekOfCode": "class Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def shape_area(self):\n        return self.width * self.height\n    def shape_perimeter(self):\n        return 2 * (self.width + self.height)\nclass Circle(Shape):\n    def __init__(self, radius):",
        "detail": "Aksam.assignments.asignment_13.assignment",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "Aksam.assignments.asignment_13.assignment",
        "description": "Aksam.assignments.asignment_13.assignment",
        "peekOfCode": "class Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def shape_area(self):\n        return 3.14 * self.radius\n    def shape_perimeter(self):\n        return 2 * 3.14 * self.radius\nmy_rectangle = Rectangle(10, 4)\nmy_circle = Circle(3)\nprint(f\"Area of a rectangle is: {my_rectangle.shape_area()}cm\")",
        "detail": "Aksam.assignments.asignment_13.assignment",
        "documentation": {}
    },
    {
        "label": "my_rectangle",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_13.assignment",
        "description": "Aksam.assignments.asignment_13.assignment",
        "peekOfCode": "my_rectangle = Rectangle(10, 4)\nmy_circle = Circle(3)\nprint(f\"Area of a rectangle is: {my_rectangle.shape_area()}cm\")\nprint(f\"Perimeter of a rectangle is: {my_rectangle.shape_perimeter()}cm\")\nprint(f\"Area of a circle is: {my_circle.shape_area()}cm\")\nprint(f\"Perimeter of a circle is: {my_circle.shape_perimeter()}cm\")",
        "detail": "Aksam.assignments.asignment_13.assignment",
        "documentation": {}
    },
    {
        "label": "my_circle",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_13.assignment",
        "description": "Aksam.assignments.asignment_13.assignment",
        "peekOfCode": "my_circle = Circle(3)\nprint(f\"Area of a rectangle is: {my_rectangle.shape_area()}cm\")\nprint(f\"Perimeter of a rectangle is: {my_rectangle.shape_perimeter()}cm\")\nprint(f\"Area of a circle is: {my_circle.shape_area()}cm\")\nprint(f\"Perimeter of a circle is: {my_circle.shape_perimeter()}cm\")",
        "detail": "Aksam.assignments.asignment_13.assignment",
        "documentation": {}
    },
    {
        "label": "reverse_str",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_14.main",
        "description": "Aksam.assignments.asignment_14.main",
        "peekOfCode": "def reverse_str(string):\n    return string[::-1]\ndef lower_str(string):\n    return string.lower()\ndef upper_str(string):\n    return string.upper()\ndef strip_str(string):\n    return string.strip()\ndef count_str(string):\n    return len(string)",
        "detail": "Aksam.assignments.asignment_14.main",
        "documentation": {}
    },
    {
        "label": "lower_str",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_14.main",
        "description": "Aksam.assignments.asignment_14.main",
        "peekOfCode": "def lower_str(string):\n    return string.lower()\ndef upper_str(string):\n    return string.upper()\ndef strip_str(string):\n    return string.strip()\ndef count_str(string):\n    return len(string)\ndef main():\n    input_str = input(\"Enter a string: \")",
        "detail": "Aksam.assignments.asignment_14.main",
        "documentation": {}
    },
    {
        "label": "upper_str",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_14.main",
        "description": "Aksam.assignments.asignment_14.main",
        "peekOfCode": "def upper_str(string):\n    return string.upper()\ndef strip_str(string):\n    return string.strip()\ndef count_str(string):\n    return len(string)\ndef main():\n    input_str = input(\"Enter a string: \")\n    reverse_string = reverse_str(input_str)\n    print(f\"Reversed string: {reverse_string }\")",
        "detail": "Aksam.assignments.asignment_14.main",
        "documentation": {}
    },
    {
        "label": "strip_str",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_14.main",
        "description": "Aksam.assignments.asignment_14.main",
        "peekOfCode": "def strip_str(string):\n    return string.strip()\ndef count_str(string):\n    return len(string)\ndef main():\n    input_str = input(\"Enter a string: \")\n    reverse_string = reverse_str(input_str)\n    print(f\"Reversed string: {reverse_string }\")\n    lowercase = lower_str(input_str)\n    print(f\"Lowercase string: {lowercase }\")",
        "detail": "Aksam.assignments.asignment_14.main",
        "documentation": {}
    },
    {
        "label": "count_str",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_14.main",
        "description": "Aksam.assignments.asignment_14.main",
        "peekOfCode": "def count_str(string):\n    return len(string)\ndef main():\n    input_str = input(\"Enter a string: \")\n    reverse_string = reverse_str(input_str)\n    print(f\"Reversed string: {reverse_string }\")\n    lowercase = lower_str(input_str)\n    print(f\"Lowercase string: {lowercase }\")\n    uppercase = upper_str(input_str)\n    print(f\"Uppercase string: {uppercase }\")",
        "detail": "Aksam.assignments.asignment_14.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_14.main",
        "description": "Aksam.assignments.asignment_14.main",
        "peekOfCode": "def main():\n    input_str = input(\"Enter a string: \")\n    reverse_string = reverse_str(input_str)\n    print(f\"Reversed string: {reverse_string }\")\n    lowercase = lower_str(input_str)\n    print(f\"Lowercase string: {lowercase }\")\n    uppercase = upper_str(input_str)\n    print(f\"Uppercase string: {uppercase }\")\n    strip_string = strip_str(input_str)\n    print(f\"Stripped string: {strip_string }\")",
        "detail": "Aksam.assignments.asignment_14.main",
        "documentation": {}
    },
    {
        "label": "custom_range",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_15.app",
        "description": "Aksam.assignments.asignment_15.app",
        "peekOfCode": "def custom_range(start, end, step=1):\n    result = []\n    while start < end:\n        result.append(start)\n        start += step\n    return result\ndef main():\n    start = int(input(\"Enter the start value: \")).re\n    end = int(input(\"Enter the end value: \"))\n    step = int(input(\"Enter the step value: \"))",
        "detail": "Aksam.assignments.asignment_15.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_15.app",
        "description": "Aksam.assignments.asignment_15.app",
        "peekOfCode": "def main():\n    start = int(input(\"Enter the start value: \")).re\n    end = int(input(\"Enter the end value: \"))\n    step = int(input(\"Enter the step value: \"))\n    if step:\n        values = custom_range(start, end, step)\n    else:\n        values = custom_range(start, end)\n    print(\"Resulting range:\", values)\nif __name__ ==  \"__main__\":",
        "detail": "Aksam.assignments.asignment_15.app",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "Aksam.assignments.asignment_16.app",
        "description": "Aksam.assignments.asignment_16.app",
        "peekOfCode": "class Shape:\n    def __init__(self, name):\n        self.name = name\n    def area(self):\n        pass\n    def perimeter(self):\n        pass\n# Circle has inherited methods from class Shape\n# Sub classes below inherite from shape and provide thier implementations for these methods\nclass Circle(Shape):",
        "detail": "Aksam.assignments.asignment_16.app",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "Aksam.assignments.asignment_16.app",
        "description": "Aksam.assignments.asignment_16.app",
        "peekOfCode": "class Circle(Shape):\n    def __init__(self, name, radius):\n        super().__init__(name)\n        self.radius = radius\n    def area(self):\n        # to show that the area is multiplied by two\n        return math.pi * self.radius ** 2\n    def perimeter(self):\n        # to show that the perimeter of a cicle\n        return 2 * math.pi * self.radius",
        "detail": "Aksam.assignments.asignment_16.app",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "Aksam.assignments.asignment_16.app",
        "description": "Aksam.assignments.asignment_16.app",
        "peekOfCode": "class Rectangle(Shape):\n    def __init__(self, name, width, height):\n        super().__init__(name)\n        self.width = width\n        self.height = height\n    def area(self):\n        return self.width * self.height\n    def perimeter(self):\n        return 2 * (self.width + self.height)\n# polymorphism is demonstrated by calling the `area()` and `perimeter()`",
        "detail": "Aksam.assignments.asignment_16.app",
        "documentation": {}
    },
    {
        "label": "Triangle",
        "kind": 6,
        "importPath": "Aksam.assignments.asignment_16.app",
        "description": "Aksam.assignments.asignment_16.app",
        "peekOfCode": "class Triangle(Shape):\n    def __init__(self, name, side1, side2, side3):\n        super().__init__(name)\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n    def area(self):\n        s = (self.side1 + self.side2 + self.side3) / 2\n        return math.sqrt(s * (s - self.side1) * (s - self.side2) * (s - self.side3))\n    def perimeter(self):",
        "detail": "Aksam.assignments.asignment_16.app",
        "documentation": {}
    },
    {
        "label": "write_to_file",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_17.app",
        "description": "Aksam.assignments.asignment_17.app",
        "peekOfCode": "def write_to_file(file_name, content):\n    with open(file_name, \"w\") as file:\n        file.write(content)\n    print(\"Content written to \", file_name)\ndef read_from_file(file_name):\n    with open(file_name, \"r\") as file:\n        content = file.read()\n    print(\"Content read from \", file_name)\n    print(content)\ndef append_to_file(file_name, content):",
        "detail": "Aksam.assignments.asignment_17.app",
        "documentation": {}
    },
    {
        "label": "read_from_file",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_17.app",
        "description": "Aksam.assignments.asignment_17.app",
        "peekOfCode": "def read_from_file(file_name):\n    with open(file_name, \"r\") as file:\n        content = file.read()\n    print(\"Content read from \", file_name)\n    print(content)\ndef append_to_file(file_name, content):\n    with open(file_name, \"a\") as file:\n        file.write(content)\n    print(\"Content appended to \", file_name)\ndef main():",
        "detail": "Aksam.assignments.asignment_17.app",
        "documentation": {}
    },
    {
        "label": "append_to_file",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_17.app",
        "description": "Aksam.assignments.asignment_17.app",
        "peekOfCode": "def append_to_file(file_name, content):\n    with open(file_name, \"a\") as file:\n        file.write(content)\n    print(\"Content appended to \", file_name)\ndef main():\n    file_name = input(\"Enter a file name with extension (.): \")\n    print(\"\\n\")\n    print(\"------SELECT ONE OPTION PLEASE--------\")\n    print(\"\\n\")\n    print(\"A. Write to file.\")",
        "detail": "Aksam.assignments.asignment_17.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_17.app",
        "description": "Aksam.assignments.asignment_17.app",
        "peekOfCode": "def main():\n    file_name = input(\"Enter a file name with extension (.): \")\n    print(\"\\n\")\n    print(\"------SELECT ONE OPTION PLEASE--------\")\n    print(\"\\n\")\n    print(\"A. Write to file.\")\n    print(\"B. Read from file.\")\n    print(\"C. Append to a file.\")\n    print(\"\\n\")\n    choice = input(\"Please enter your choice: \")",
        "detail": "Aksam.assignments.asignment_17.app",
        "documentation": {}
    },
    {
        "label": "copy_file",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_19.copy_file",
        "description": "Aksam.assignments.asignment_19.copy_file",
        "peekOfCode": "def copy_file(source_file, new_file):\n    try:\n        with open(source_file, \"rb\") as src_file:\n            with open(new_file, \"wb\") as dest_file:\n                dest_file.write(src_file.read())\n        print(f\"File {source_file} copied to {new_file} successfuly\")\n    except IOError as e:\n        print(f\"Error: {e}\")\nsource_file = input(\"Enter the file to copy from: \")\nnew_file = input(\"Enter the file to copy to: \")     ",
        "detail": "Aksam.assignments.asignment_19.copy_file",
        "documentation": {}
    },
    {
        "label": "source_file",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_19.copy_file",
        "description": "Aksam.assignments.asignment_19.copy_file",
        "peekOfCode": "source_file = input(\"Enter the file to copy from: \")\nnew_file = input(\"Enter the file to copy to: \")     \ncopy_file(source_file, new_file)",
        "detail": "Aksam.assignments.asignment_19.copy_file",
        "documentation": {}
    },
    {
        "label": "new_file",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_19.copy_file",
        "description": "Aksam.assignments.asignment_19.copy_file",
        "peekOfCode": "new_file = input(\"Enter the file to copy to: \")     \ncopy_file(source_file, new_file)",
        "detail": "Aksam.assignments.asignment_19.copy_file",
        "documentation": {}
    },
    {
        "label": "rename_function",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_19.rename",
        "description": "Aksam.assignments.asignment_19.rename",
        "peekOfCode": "def rename_function(old_name, new_name):\n    try:\n        os.rename(old_name, new_name)\n        print(f\"Directory `{old_name}` has been renamed to `{new_name}` successfuly. \")\n    except OSError as e:\n        print(f\"Error: {e}\")\nold_directory = input(\"Enter the directory you want to rename: \")\nnew_directory = input(\"Enter the new name for the directory: \")       \nrename_function(old_directory, new_directory)",
        "detail": "Aksam.assignments.asignment_19.rename",
        "documentation": {}
    },
    {
        "label": "old_directory",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_19.rename",
        "description": "Aksam.assignments.asignment_19.rename",
        "peekOfCode": "old_directory = input(\"Enter the directory you want to rename: \")\nnew_directory = input(\"Enter the new name for the directory: \")       \nrename_function(old_directory, new_directory)",
        "detail": "Aksam.assignments.asignment_19.rename",
        "documentation": {}
    },
    {
        "label": "new_directory",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_19.rename",
        "description": "Aksam.assignments.asignment_19.rename",
        "peekOfCode": "new_directory = input(\"Enter the new name for the directory: \")       \nrename_function(old_directory, new_directory)",
        "detail": "Aksam.assignments.asignment_19.rename",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_2.assignment2",
        "description": "Aksam.assignments.asignment_2.assignment2",
        "peekOfCode": "area = 76\nprint(area)\narea = 45\nprint(area)",
        "detail": "Aksam.assignments.asignment_2.assignment2",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_2.assignment2",
        "description": "Aksam.assignments.asignment_2.assignment2",
        "peekOfCode": "area = 45\nprint(area)",
        "detail": "Aksam.assignments.asignment_2.assignment2",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.case",
        "description": "Aksam.assignments.asignment_3.case",
        "peekOfCode": "name = \"Aksam\"\nName = \"Cyrus\"\nprint(\"Example 1:\")\nprint(name)\nprint(Name)\n# example 2\nuserAge = 12\nprint(\"Example 2:\")\nprint(userAge)\n# example 3",
        "detail": "Aksam.assignments.asignment_3.case",
        "documentation": {}
    },
    {
        "label": "Name",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.case",
        "description": "Aksam.assignments.asignment_3.case",
        "peekOfCode": "Name = \"Cyrus\"\nprint(\"Example 1:\")\nprint(name)\nprint(Name)\n# example 2\nuserAge = 12\nprint(\"Example 2:\")\nprint(userAge)\n# example 3\nPhone_Number = \"0709667917\"",
        "detail": "Aksam.assignments.asignment_3.case",
        "documentation": {}
    },
    {
        "label": "userAge",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.case",
        "description": "Aksam.assignments.asignment_3.case",
        "peekOfCode": "userAge = 12\nprint(\"Example 2:\")\nprint(userAge)\n# example 3\nPhone_Number = \"0709667917\"\nprint(\"Example 3:\")\nprint(Phone_Number)",
        "detail": "Aksam.assignments.asignment_3.case",
        "documentation": {}
    },
    {
        "label": "Phone_Number",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.case",
        "description": "Aksam.assignments.asignment_3.case",
        "peekOfCode": "Phone_Number = \"0709667917\"\nprint(\"Example 3:\")\nprint(Phone_Number)",
        "detail": "Aksam.assignments.asignment_3.case",
        "documentation": {}
    },
    {
        "label": "int_val",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.casting",
        "description": "Aksam.assignments.asignment_3.casting",
        "peekOfCode": "int_val = 42\nstr_val = str(int_val)\nprint(\"Original integer: \", int_val)\nprint(\"converted integer\", str_val)\n# string to float\nfloat_string = \"3.14\"\nfloat_value = float(float_string)\nprint(\"Original string\", float_string)\nprint(\"converted Float\", float_value)\n# concatenating strings",
        "detail": "Aksam.assignments.asignment_3.casting",
        "documentation": {}
    },
    {
        "label": "str_val",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.casting",
        "description": "Aksam.assignments.asignment_3.casting",
        "peekOfCode": "str_val = str(int_val)\nprint(\"Original integer: \", int_val)\nprint(\"converted integer\", str_val)\n# string to float\nfloat_string = \"3.14\"\nfloat_value = float(float_string)\nprint(\"Original string\", float_string)\nprint(\"converted Float\", float_value)\n# concatenating strings\nfirst_name = \"Aksam\"",
        "detail": "Aksam.assignments.asignment_3.casting",
        "documentation": {}
    },
    {
        "label": "float_string",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.casting",
        "description": "Aksam.assignments.asignment_3.casting",
        "peekOfCode": "float_string = \"3.14\"\nfloat_value = float(float_string)\nprint(\"Original string\", float_string)\nprint(\"converted Float\", float_value)\n# concatenating strings\nfirst_name = \"Aksam\"\nlast_name = \"Cyrus\"\nfull_name = first_name + \" \" + last_name \nprint(\"first name:\", first_name)\nprint(\"last name:\", last_name)",
        "detail": "Aksam.assignments.asignment_3.casting",
        "documentation": {}
    },
    {
        "label": "float_value",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.casting",
        "description": "Aksam.assignments.asignment_3.casting",
        "peekOfCode": "float_value = float(float_string)\nprint(\"Original string\", float_string)\nprint(\"converted Float\", float_value)\n# concatenating strings\nfirst_name = \"Aksam\"\nlast_name = \"Cyrus\"\nfull_name = first_name + \" \" + last_name \nprint(\"first name:\", first_name)\nprint(\"last name:\", last_name)\nprint(\"full name:\", full_name)",
        "detail": "Aksam.assignments.asignment_3.casting",
        "documentation": {}
    },
    {
        "label": "first_name",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.casting",
        "description": "Aksam.assignments.asignment_3.casting",
        "peekOfCode": "first_name = \"Aksam\"\nlast_name = \"Cyrus\"\nfull_name = first_name + \" \" + last_name \nprint(\"first name:\", first_name)\nprint(\"last name:\", last_name)\nprint(\"full name:\", full_name)",
        "detail": "Aksam.assignments.asignment_3.casting",
        "documentation": {}
    },
    {
        "label": "last_name",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.casting",
        "description": "Aksam.assignments.asignment_3.casting",
        "peekOfCode": "last_name = \"Cyrus\"\nfull_name = first_name + \" \" + last_name \nprint(\"first name:\", first_name)\nprint(\"last name:\", last_name)\nprint(\"full name:\", full_name)",
        "detail": "Aksam.assignments.asignment_3.casting",
        "documentation": {}
    },
    {
        "label": "full_name",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.casting",
        "description": "Aksam.assignments.asignment_3.casting",
        "peekOfCode": "full_name = first_name + \" \" + last_name \nprint(\"first name:\", first_name)\nprint(\"last name:\", last_name)\nprint(\"full name:\", full_name)",
        "detail": "Aksam.assignments.asignment_3.casting",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.delete",
        "description": "Aksam.assignments.asignment_3.delete",
        "peekOfCode": "name = \"Aksam\"\n# printing students before del\ndel name\nprint(name)\n# example 2\nstudents = [\"Anwar\",\"Akram\",\"Aklass\"]\n# printing students before del\nprint(students)\ndel students\n#example 3",
        "detail": "Aksam.assignments.asignment_3.delete",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.delete",
        "description": "Aksam.assignments.asignment_3.delete",
        "peekOfCode": "students = [\"Anwar\",\"Akram\",\"Aklass\"]\n# printing students before del\nprint(students)\ndel students\n#example 3\n# dictionary\nuser_info = {\n    \"username\": \"Aksam\",\n    \"email\": \"aksamcyrus@gmail.com\",\n    \"password\": \"1234\",",
        "detail": "Aksam.assignments.asignment_3.delete",
        "documentation": {}
    },
    {
        "label": "user_info",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.delete",
        "description": "Aksam.assignments.asignment_3.delete",
        "peekOfCode": "user_info = {\n    \"username\": \"Aksam\",\n    \"email\": \"aksamcyrus@gmail.com\",\n    \"password\": \"1234\",\n    \"age\": 20\n}\n# printing user_info before del\nprint(user_info)\ndel user_info",
        "detail": "Aksam.assignments.asignment_3.delete",
        "documentation": {}
    },
    {
        "label": "a=b=c",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.multiple",
        "description": "Aksam.assignments.asignment_3.multiple",
        "peekOfCode": "a=b=c = 10\nprint(a, b, c)\n# example 2\nx, y, z = 10, 40, 70\nprint(\"x:\", x)\nprint(\"y:\", y)\nprint(\"z:\", z)\nprint()\n# example 3\nboy, girl = 5, 8",
        "detail": "Aksam.assignments.asignment_3.multiple",
        "documentation": {}
    },
    {
        "label": "constant",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.naming",
        "description": "Aksam.assignments.asignment_3.naming",
        "peekOfCode": "constant = 50 # normal variable naming\nhello = \"Hello world\"\nprint(constant)\nprint(hello)\n# Example 2\nname1 = \"Cyrus\" # Alpha Numeric variable naming\nage2 = 200\nprint(name1)\nprint(age2)\n# Example 3",
        "detail": "Aksam.assignments.asignment_3.naming",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.naming",
        "description": "Aksam.assignments.asignment_3.naming",
        "peekOfCode": "hello = \"Hello world\"\nprint(constant)\nprint(hello)\n# Example 2\nname1 = \"Cyrus\" # Alpha Numeric variable naming\nage2 = 200\nprint(name1)\nprint(age2)\n# Example 3\nfirst_name = \"Aksam\" # snake Case variable naming",
        "detail": "Aksam.assignments.asignment_3.naming",
        "documentation": {}
    },
    {
        "label": "name1",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.naming",
        "description": "Aksam.assignments.asignment_3.naming",
        "peekOfCode": "name1 = \"Cyrus\" # Alpha Numeric variable naming\nage2 = 200\nprint(name1)\nprint(age2)\n# Example 3\nfirst_name = \"Aksam\" # snake Case variable naming\nlast_name = \"Cyrus\"\nprint(first_name)\nprint(last_name)\n# Example 4",
        "detail": "Aksam.assignments.asignment_3.naming",
        "documentation": {}
    },
    {
        "label": "age2",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.naming",
        "description": "Aksam.assignments.asignment_3.naming",
        "peekOfCode": "age2 = 200\nprint(name1)\nprint(age2)\n# Example 3\nfirst_name = \"Aksam\" # snake Case variable naming\nlast_name = \"Cyrus\"\nprint(first_name)\nprint(last_name)\n# Example 4\nlastName = \"Naruto\" # camal case variable naming",
        "detail": "Aksam.assignments.asignment_3.naming",
        "documentation": {}
    },
    {
        "label": "first_name",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.naming",
        "description": "Aksam.assignments.asignment_3.naming",
        "peekOfCode": "first_name = \"Aksam\" # snake Case variable naming\nlast_name = \"Cyrus\"\nprint(first_name)\nprint(last_name)\n# Example 4\nlastName = \"Naruto\" # camal case variable naming\nfirstName = \"Uzumaki\"\nprint(lastName)\nprint(firstName)\nFirstName = \"Uzumaki\" # Pascal case variable naming",
        "detail": "Aksam.assignments.asignment_3.naming",
        "documentation": {}
    },
    {
        "label": "last_name",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.naming",
        "description": "Aksam.assignments.asignment_3.naming",
        "peekOfCode": "last_name = \"Cyrus\"\nprint(first_name)\nprint(last_name)\n# Example 4\nlastName = \"Naruto\" # camal case variable naming\nfirstName = \"Uzumaki\"\nprint(lastName)\nprint(firstName)\nFirstName = \"Uzumaki\" # Pascal case variable naming\nHelloWorld = \"My output\"",
        "detail": "Aksam.assignments.asignment_3.naming",
        "documentation": {}
    },
    {
        "label": "lastName",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.naming",
        "description": "Aksam.assignments.asignment_3.naming",
        "peekOfCode": "lastName = \"Naruto\" # camal case variable naming\nfirstName = \"Uzumaki\"\nprint(lastName)\nprint(firstName)\nFirstName = \"Uzumaki\" # Pascal case variable naming\nHelloWorld = \"My output\"",
        "detail": "Aksam.assignments.asignment_3.naming",
        "documentation": {}
    },
    {
        "label": "firstName",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.naming",
        "description": "Aksam.assignments.asignment_3.naming",
        "peekOfCode": "firstName = \"Uzumaki\"\nprint(lastName)\nprint(firstName)\nFirstName = \"Uzumaki\" # Pascal case variable naming\nHelloWorld = \"My output\"",
        "detail": "Aksam.assignments.asignment_3.naming",
        "documentation": {}
    },
    {
        "label": "FirstName",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.naming",
        "description": "Aksam.assignments.asignment_3.naming",
        "peekOfCode": "FirstName = \"Uzumaki\" # Pascal case variable naming\nHelloWorld = \"My output\"",
        "detail": "Aksam.assignments.asignment_3.naming",
        "documentation": {}
    },
    {
        "label": "HelloWorld",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.naming",
        "description": "Aksam.assignments.asignment_3.naming",
        "peekOfCode": "HelloWorld = \"My output\"",
        "detail": "Aksam.assignments.asignment_3.naming",
        "documentation": {}
    },
    {
        "label": "interger_var",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.type",
        "description": "Aksam.assignments.asignment_3.type",
        "peekOfCode": "interger_var = 43\nprint(\"Variable: \", interger_var)\nprint(\"Data type: \", type(interger_var))\n# Example 2\nstring_var = \"Hello, World\"\nprint(\"Variable: \", string_var)\nprint(\"Data type: \", type(string_var))\n# Example 3\nfloat_var = 1230.89\nprint(\"Variable: \", float_var)",
        "detail": "Aksam.assignments.asignment_3.type",
        "documentation": {}
    },
    {
        "label": "string_var",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.type",
        "description": "Aksam.assignments.asignment_3.type",
        "peekOfCode": "string_var = \"Hello, World\"\nprint(\"Variable: \", string_var)\nprint(\"Data type: \", type(string_var))\n# Example 3\nfloat_var = 1230.89\nprint(\"Variable: \", float_var)\nprint(\"Data type: \", type(float_var))\n# example 4\nis_valid = True\nprint(type(is_valid))",
        "detail": "Aksam.assignments.asignment_3.type",
        "documentation": {}
    },
    {
        "label": "float_var",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.type",
        "description": "Aksam.assignments.asignment_3.type",
        "peekOfCode": "float_var = 1230.89\nprint(\"Variable: \", float_var)\nprint(\"Data type: \", type(float_var))\n# example 4\nis_valid = True\nprint(type(is_valid))",
        "detail": "Aksam.assignments.asignment_3.type",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_3.type",
        "description": "Aksam.assignments.asignment_3.type",
        "peekOfCode": "is_valid = True\nprint(type(is_valid))",
        "detail": "Aksam.assignments.asignment_3.type",
        "documentation": {}
    },
    {
        "label": "emp_list",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.add_to_list",
        "description": "Aksam.assignments.asignment_4.add_to_list",
        "peekOfCode": "emp_list = []\nnewElement = \"Student\"\nemp_list.append(newElement)\nprint(\"Empty list after adding\", newElement + \":\", emp_list)\nprint()\n# EXAMPLE 2\ncontra = [\"a\",\"b\",\"c\"]\ncontra.append(\"d\")\nprint(\"Contra after appending\", contra)\nprint()",
        "detail": "Aksam.assignments.asignment_4.add_to_list",
        "documentation": {}
    },
    {
        "label": "newElement",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.add_to_list",
        "description": "Aksam.assignments.asignment_4.add_to_list",
        "peekOfCode": "newElement = \"Student\"\nemp_list.append(newElement)\nprint(\"Empty list after adding\", newElement + \":\", emp_list)\nprint()\n# EXAMPLE 2\ncontra = [\"a\",\"b\",\"c\"]\ncontra.append(\"d\")\nprint(\"Contra after appending\", contra)\nprint()\n# INSERTING EXAMPLES IN PYTHN",
        "detail": "Aksam.assignments.asignment_4.add_to_list",
        "documentation": {}
    },
    {
        "label": "contra",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.add_to_list",
        "description": "Aksam.assignments.asignment_4.add_to_list",
        "peekOfCode": "contra = [\"a\",\"b\",\"c\"]\ncontra.append(\"d\")\nprint(\"Contra after appending\", contra)\nprint()\n# INSERTING EXAMPLES IN PYTHN\n# EXAMPLE 3\nfruits = [\"Mango\", \"Apple\", \"Orange\", \"Banana\"]\nNew_Fruits = \"Berries\"\nindexInsert = 1\nfruits.insert(indexInsert, New_Fruits)",
        "detail": "Aksam.assignments.asignment_4.add_to_list",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.add_to_list",
        "description": "Aksam.assignments.asignment_4.add_to_list",
        "peekOfCode": "fruits = [\"Mango\", \"Apple\", \"Orange\", \"Banana\"]\nNew_Fruits = \"Berries\"\nindexInsert = 1\nfruits.insert(indexInsert, New_Fruits)\nprint(\"Fruits list after inserting\", New_Fruits, \"at index\", indexInsert, \":\", fruits)\nprint()\n# EXAMPLE 4\nveg = [\"carrot\", \"Broccoli\"]\nnewElement2 = \"Spinach\"\nveg = veg + [newElement2]",
        "detail": "Aksam.assignments.asignment_4.add_to_list",
        "documentation": {}
    },
    {
        "label": "New_Fruits",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.add_to_list",
        "description": "Aksam.assignments.asignment_4.add_to_list",
        "peekOfCode": "New_Fruits = \"Berries\"\nindexInsert = 1\nfruits.insert(indexInsert, New_Fruits)\nprint(\"Fruits list after inserting\", New_Fruits, \"at index\", indexInsert, \":\", fruits)\nprint()\n# EXAMPLE 4\nveg = [\"carrot\", \"Broccoli\"]\nnewElement2 = \"Spinach\"\nveg = veg + [newElement2]\nprint(\"Veg list after adding\", newElement2, \":\", veg)",
        "detail": "Aksam.assignments.asignment_4.add_to_list",
        "documentation": {}
    },
    {
        "label": "indexInsert",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.add_to_list",
        "description": "Aksam.assignments.asignment_4.add_to_list",
        "peekOfCode": "indexInsert = 1\nfruits.insert(indexInsert, New_Fruits)\nprint(\"Fruits list after inserting\", New_Fruits, \"at index\", indexInsert, \":\", fruits)\nprint()\n# EXAMPLE 4\nveg = [\"carrot\", \"Broccoli\"]\nnewElement2 = \"Spinach\"\nveg = veg + [newElement2]\nprint(\"Veg list after adding\", newElement2, \":\", veg)\nprint()",
        "detail": "Aksam.assignments.asignment_4.add_to_list",
        "documentation": {}
    },
    {
        "label": "veg",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.add_to_list",
        "description": "Aksam.assignments.asignment_4.add_to_list",
        "peekOfCode": "veg = [\"carrot\", \"Broccoli\"]\nnewElement2 = \"Spinach\"\nveg = veg + [newElement2]\nprint(\"Veg list after adding\", newElement2, \":\", veg)\nprint()\n# EXAMPLE 5\nstudy = [\"Roger\", \"3.14\", True, 20, 17.27]\nprint(\"Original study \", study)\nstudy.insert(1, \"Markson\")\nprint(\"Study after appending: \", study)",
        "detail": "Aksam.assignments.asignment_4.add_to_list",
        "documentation": {}
    },
    {
        "label": "newElement2",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.add_to_list",
        "description": "Aksam.assignments.asignment_4.add_to_list",
        "peekOfCode": "newElement2 = \"Spinach\"\nveg = veg + [newElement2]\nprint(\"Veg list after adding\", newElement2, \":\", veg)\nprint()\n# EXAMPLE 5\nstudy = [\"Roger\", \"3.14\", True, 20, 17.27]\nprint(\"Original study \", study)\nstudy.insert(1, \"Markson\")\nprint(\"Study after appending: \", study)\nstudy.insert(-1, \"Pass\")",
        "detail": "Aksam.assignments.asignment_4.add_to_list",
        "documentation": {}
    },
    {
        "label": "veg",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.add_to_list",
        "description": "Aksam.assignments.asignment_4.add_to_list",
        "peekOfCode": "veg = veg + [newElement2]\nprint(\"Veg list after adding\", newElement2, \":\", veg)\nprint()\n# EXAMPLE 5\nstudy = [\"Roger\", \"3.14\", True, 20, 17.27]\nprint(\"Original study \", study)\nstudy.insert(1, \"Markson\")\nprint(\"Study after appending: \", study)\nstudy.insert(-1, \"Pass\")\nprint(\"List after appending: \", study)",
        "detail": "Aksam.assignments.asignment_4.add_to_list",
        "documentation": {}
    },
    {
        "label": "study",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.add_to_list",
        "description": "Aksam.assignments.asignment_4.add_to_list",
        "peekOfCode": "study = [\"Roger\", \"3.14\", True, 20, 17.27]\nprint(\"Original study \", study)\nstudy.insert(1, \"Markson\")\nprint(\"Study after appending: \", study)\nstudy.insert(-1, \"Pass\")\nprint(\"List after appending: \", study)\nprint()",
        "detail": "Aksam.assignments.asignment_4.add_to_list",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.remove_list",
        "description": "Aksam.assignments.asignment_4.remove_list",
        "peekOfCode": "fruits = [\"Mango\", \"Apple\", \"Orange\", \"Banana\"]\nel_to_remove = \"Banana\"\nprint(\"original list:\", fruits)\nfruits.remove(el_to_remove)\nprint(\"list after removing\", el_to_remove + \":\", fruits)\nprint()\n# EXAMPLE 2\nnumbers = [1,2,3,4,5,6]\nindex_to_remove = 3\nprint(\"original list:\", numbers)",
        "detail": "Aksam.assignments.asignment_4.remove_list",
        "documentation": {}
    },
    {
        "label": "el_to_remove",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.remove_list",
        "description": "Aksam.assignments.asignment_4.remove_list",
        "peekOfCode": "el_to_remove = \"Banana\"\nprint(\"original list:\", fruits)\nfruits.remove(el_to_remove)\nprint(\"list after removing\", el_to_remove + \":\", fruits)\nprint()\n# EXAMPLE 2\nnumbers = [1,2,3,4,5,6]\nindex_to_remove = 3\nprint(\"original list:\", numbers)\ndel numbers[index_to_remove]",
        "detail": "Aksam.assignments.asignment_4.remove_list",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.remove_list",
        "description": "Aksam.assignments.asignment_4.remove_list",
        "peekOfCode": "numbers = [1,2,3,4,5,6]\nindex_to_remove = 3\nprint(\"original list:\", numbers)\ndel numbers[index_to_remove]\nprint(\"list after removing element at index\", index_to_remove, \":\", numbers)",
        "detail": "Aksam.assignments.asignment_4.remove_list",
        "documentation": {}
    },
    {
        "label": "index_to_remove",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_4.remove_list",
        "description": "Aksam.assignments.asignment_4.remove_list",
        "peekOfCode": "index_to_remove = 3\nprint(\"original list:\", numbers)\ndel numbers[index_to_remove]\nprint(\"list after removing element at index\", index_to_remove, \":\", numbers)",
        "detail": "Aksam.assignments.asignment_4.remove_list",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_5.function",
        "description": "Aksam.assignments.asignment_5.function",
        "peekOfCode": "def time():\n    current_time = datetime.now().strftime('%H:%M:%S')\n    print('Current time:', current_time)\ntime()\n# EXAMPLE 1\ndef helloWorld():\n    print(\"Hello World\")\nhelloWorld()\n# EXAMPLE 3\ndef add(item1, item2):",
        "detail": "Aksam.assignments.asignment_5.function",
        "documentation": {}
    },
    {
        "label": "helloWorld",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_5.function",
        "description": "Aksam.assignments.asignment_5.function",
        "peekOfCode": "def helloWorld():\n    print(\"Hello World\")\nhelloWorld()\n# EXAMPLE 3\ndef add(item1, item2):\n    result = item1 + item2\n    print(result)\nadd(17, 10)\nadd('Hello ', 'World')",
        "detail": "Aksam.assignments.asignment_5.function",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_5.function",
        "description": "Aksam.assignments.asignment_5.function",
        "peekOfCode": "def add(item1, item2):\n    result = item1 + item2\n    print(result)\nadd(17, 10)\nadd('Hello ', 'World')",
        "detail": "Aksam.assignments.asignment_5.function",
        "documentation": {}
    },
    {
        "label": "assign1",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "description": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "peekOfCode": "def assign1():\n    x = 10\n    return x\nprint(\"Returned value:\", assign1())\ndef assign2(y):\n    y += 3\n    return y\nprint(\"Returned value:\", assign2(4))\ndef assign3(z):\n    z *= 2",
        "detail": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "documentation": {}
    },
    {
        "label": "assign2",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "description": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "peekOfCode": "def assign2(y):\n    y += 3\n    return y\nprint(\"Returned value:\", assign2(4))\ndef assign3(z):\n    z *= 2\n    return z\nprint(\"Returned value:\", assign3(7))\na = 21\nb = 10 ",
        "detail": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "documentation": {}
    },
    {
        "label": "assign3",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "description": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "peekOfCode": "def assign3(z):\n    z *= 2\n    return z\nprint(\"Returned value:\", assign3(7))\na = 21\nb = 10 \nc =0\nc = a + b\nprint(c)\nc += a",
        "detail": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "description": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "peekOfCode": "a = 21\nb = 10 \nc =0\nc = a + b\nprint(c)\nc += a\nprint(c)\nc *= a\nprint(c)\nc /= a",
        "detail": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "description": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "peekOfCode": "b = 10 \nc =0\nc = a + b\nprint(c)\nc += a\nprint(c)\nc *= a\nprint(c)\nc /= a\nprint(c)",
        "detail": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "description": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "peekOfCode": "c = a + b\nprint(c)\nc += a\nprint(c)\nc *= a\nprint(c)\nc /= a\nprint(c)\nc = 2\nprint(c)",
        "detail": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "description": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "peekOfCode": "c = 2\nprint(c)\nc **= a\nprint(c)\nc %= a\nprint(c)\nc //= a\nprint(c)",
        "detail": "Aksam.assignments.asignment_7.operators.assignment_operators",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "description": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "peekOfCode": "num1 = 10\nnum2 = 5\nresult_and = num1 & num2\nprint(\"bitwise and\", result_and)\nresult_or = num1 | num2\nprint(\"bitwise or\", result_or)\nresult_xor = num1 ^ num2\nprint(\"bitwise and\", result_xor)",
        "detail": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "description": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "peekOfCode": "num2 = 5\nresult_and = num1 & num2\nprint(\"bitwise and\", result_and)\nresult_or = num1 | num2\nprint(\"bitwise or\", result_or)\nresult_xor = num1 ^ num2\nprint(\"bitwise and\", result_xor)",
        "detail": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "documentation": {}
    },
    {
        "label": "result_and",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "description": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "peekOfCode": "result_and = num1 & num2\nprint(\"bitwise and\", result_and)\nresult_or = num1 | num2\nprint(\"bitwise or\", result_or)\nresult_xor = num1 ^ num2\nprint(\"bitwise and\", result_xor)",
        "detail": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "documentation": {}
    },
    {
        "label": "result_or",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "description": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "peekOfCode": "result_or = num1 | num2\nprint(\"bitwise or\", result_or)\nresult_xor = num1 ^ num2\nprint(\"bitwise and\", result_xor)",
        "detail": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "documentation": {}
    },
    {
        "label": "result_xor",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "description": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "peekOfCode": "result_xor = num1 ^ num2\nprint(\"bitwise and\", result_xor)",
        "detail": "Aksam.assignments.asignment_7.operators.bitwise_operators",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.logical_operators",
        "description": "Aksam.assignments.asignment_7.operators.logical_operators",
        "peekOfCode": "num1 = [1,2,3,4,5]\nnum2 = [4,5,6,7,8]\nlog_op_num = [n1 for n1 in num1 for n2 in num2 if n1 == n2]\nprint(\"\\nExample 1: Selecting elements from two lists using AND operators\")\nprint(\"List 1:\", num1)\nprint(\"List 2:\", num2)\nprint(\"Logical operation numbers\", log_op_num)\nbox = 20\nbrush = 70\nlist1 = [1,2,3,5]",
        "detail": "Aksam.assignments.asignment_7.operators.logical_operators",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.logical_operators",
        "description": "Aksam.assignments.asignment_7.operators.logical_operators",
        "peekOfCode": "num2 = [4,5,6,7,8]\nlog_op_num = [n1 for n1 in num1 for n2 in num2 if n1 == n2]\nprint(\"\\nExample 1: Selecting elements from two lists using AND operators\")\nprint(\"List 1:\", num1)\nprint(\"List 2:\", num2)\nprint(\"Logical operation numbers\", log_op_num)\nbox = 20\nbrush = 70\nlist1 = [1,2,3,5]\nif(box in list1):",
        "detail": "Aksam.assignments.asignment_7.operators.logical_operators",
        "documentation": {}
    },
    {
        "label": "log_op_num",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.logical_operators",
        "description": "Aksam.assignments.asignment_7.operators.logical_operators",
        "peekOfCode": "log_op_num = [n1 for n1 in num1 for n2 in num2 if n1 == n2]\nprint(\"\\nExample 1: Selecting elements from two lists using AND operators\")\nprint(\"List 1:\", num1)\nprint(\"List 2:\", num2)\nprint(\"Logical operation numbers\", log_op_num)\nbox = 20\nbrush = 70\nlist1 = [1,2,3,5]\nif(box in list1):\n    print(\"line 1 - box is available in the given list\")",
        "detail": "Aksam.assignments.asignment_7.operators.logical_operators",
        "documentation": {}
    },
    {
        "label": "box",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.logical_operators",
        "description": "Aksam.assignments.asignment_7.operators.logical_operators",
        "peekOfCode": "box = 20\nbrush = 70\nlist1 = [1,2,3,5]\nif(box in list1):\n    print(\"line 1 - box is available in the given list\")\nelse:\n    print(\"line 1 - box is not available in the given list\")",
        "detail": "Aksam.assignments.asignment_7.operators.logical_operators",
        "documentation": {}
    },
    {
        "label": "brush",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.logical_operators",
        "description": "Aksam.assignments.asignment_7.operators.logical_operators",
        "peekOfCode": "brush = 70\nlist1 = [1,2,3,5]\nif(box in list1):\n    print(\"line 1 - box is available in the given list\")\nelse:\n    print(\"line 1 - box is not available in the given list\")",
        "detail": "Aksam.assignments.asignment_7.operators.logical_operators",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.logical_operators",
        "description": "Aksam.assignments.asignment_7.operators.logical_operators",
        "peekOfCode": "list1 = [1,2,3,5]\nif(box in list1):\n    print(\"line 1 - box is available in the given list\")\nelse:\n    print(\"line 1 - box is not available in the given list\")",
        "detail": "Aksam.assignments.asignment_7.operators.logical_operators",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.order",
        "description": "Aksam.assignments.asignment_7.operators.order",
        "peekOfCode": "result = (10 + 5) *2 \nprint(result)\nresult1 = 2 ** 3 * 4\nprint(result1)\nresult2 = -3 * 4\nprint(result2)\nresult3 = 10 + 5 *2 \nprint(result3)\nresult4 = 2 + 3 < 5 * 2\nprint(result4)",
        "detail": "Aksam.assignments.asignment_7.operators.order",
        "documentation": {}
    },
    {
        "label": "result1",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.order",
        "description": "Aksam.assignments.asignment_7.operators.order",
        "peekOfCode": "result1 = 2 ** 3 * 4\nprint(result1)\nresult2 = -3 * 4\nprint(result2)\nresult3 = 10 + 5 *2 \nprint(result3)\nresult4 = 2 + 3 < 5 * 2\nprint(result4)",
        "detail": "Aksam.assignments.asignment_7.operators.order",
        "documentation": {}
    },
    {
        "label": "result2",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.order",
        "description": "Aksam.assignments.asignment_7.operators.order",
        "peekOfCode": "result2 = -3 * 4\nprint(result2)\nresult3 = 10 + 5 *2 \nprint(result3)\nresult4 = 2 + 3 < 5 * 2\nprint(result4)",
        "detail": "Aksam.assignments.asignment_7.operators.order",
        "documentation": {}
    },
    {
        "label": "result3",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.order",
        "description": "Aksam.assignments.asignment_7.operators.order",
        "peekOfCode": "result3 = 10 + 5 *2 \nprint(result3)\nresult4 = 2 + 3 < 5 * 2\nprint(result4)",
        "detail": "Aksam.assignments.asignment_7.operators.order",
        "documentation": {}
    },
    {
        "label": "result4",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_7.operators.order",
        "description": "Aksam.assignments.asignment_7.operators.order",
        "peekOfCode": "result4 = 2 + 3 < 5 * 2\nprint(result4)",
        "detail": "Aksam.assignments.asignment_7.operators.order",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.add",
        "description": "Aksam.assignments.asignment_7.add",
        "peekOfCode": "def add(num1,num2):\n    return (num1 + num2)\ndef get_input():\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number '))\n    print(\"The summed values = \", add(number_1, number_2))\nget_input()\nprint()\n# EXAMPLE 2\nprint('EXAMPLE 2')",
        "detail": "Aksam.assignments.asignment_7.add",
        "documentation": {}
    },
    {
        "label": "get_input",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.add",
        "description": "Aksam.assignments.asignment_7.add",
        "peekOfCode": "def get_input():\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number '))\n    print(\"The summed values = \", add(number_1, number_2))\nget_input()\nprint()\n# EXAMPLE 2\nprint('EXAMPLE 2')\ndef add2(n1, n2):\n    n1 = input('Enter value 1 ')",
        "detail": "Aksam.assignments.asignment_7.add",
        "documentation": {}
    },
    {
        "label": "add2",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.add",
        "description": "Aksam.assignments.asignment_7.add",
        "peekOfCode": "def add2(n1, n2):\n    n1 = input('Enter value 1 ')\n    n2 = input('Enter Value 2 ')\n    result1 = int(n1) + int(n2)\n    print('The summed value is:', result1)\nadd2(10,20)",
        "detail": "Aksam.assignments.asignment_7.add",
        "documentation": {}
    },
    {
        "label": "divided",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.divide",
        "description": "Aksam.assignments.asignment_7.divide",
        "peekOfCode": "def divided(num1,num2):\n    return (num1 / num2)\ndef get_input():\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number '))\n    print(\"The divided values = \", divided(number_1, number_2))\nget_input()\nprint()\n# EXAMPLE 2\ndef divide(number_1, number_2):",
        "detail": "Aksam.assignments.asignment_7.divide",
        "documentation": {}
    },
    {
        "label": "get_input",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.divide",
        "description": "Aksam.assignments.asignment_7.divide",
        "peekOfCode": "def get_input():\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number '))\n    print(\"The divided values = \", divided(number_1, number_2))\nget_input()\nprint()\n# EXAMPLE 2\ndef divide(number_1, number_2):\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number ')   )",
        "detail": "Aksam.assignments.asignment_7.divide",
        "documentation": {}
    },
    {
        "label": "divide",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.divide",
        "description": "Aksam.assignments.asignment_7.divide",
        "peekOfCode": "def divide(number_1, number_2):\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number ')   )\n    result = number_1 / number_2\n    return (result)\nprint()\ndef outPut():\n    print(\"The divided values = \", divide(10,20))\noutPut()",
        "detail": "Aksam.assignments.asignment_7.divide",
        "documentation": {}
    },
    {
        "label": "outPut",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.divide",
        "description": "Aksam.assignments.asignment_7.divide",
        "peekOfCode": "def outPut():\n    print(\"The divided values = \", divide(10,20))\noutPut()",
        "detail": "Aksam.assignments.asignment_7.divide",
        "documentation": {}
    },
    {
        "label": "multiplyed",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.multipy",
        "description": "Aksam.assignments.asignment_7.multipy",
        "peekOfCode": "def multiplyed(num1,num2):\n    return (num1 * num2)\ndef get_input():\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number '))\n    print(\"The multiplied values = \", multiplyed(number_1, number_2))\nget_input()\nprint()\n# EXAMPLE 2\ndef multiply(number_1, number_2):",
        "detail": "Aksam.assignments.asignment_7.multipy",
        "documentation": {}
    },
    {
        "label": "get_input",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.multipy",
        "description": "Aksam.assignments.asignment_7.multipy",
        "peekOfCode": "def get_input():\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number '))\n    print(\"The multiplied values = \", multiplyed(number_1, number_2))\nget_input()\nprint()\n# EXAMPLE 2\ndef multiply(number_1, number_2):\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number ')   )",
        "detail": "Aksam.assignments.asignment_7.multipy",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.multipy",
        "description": "Aksam.assignments.asignment_7.multipy",
        "peekOfCode": "def multiply(number_1, number_2):\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number ')   )\n    result = int(number_1) * int(number_2)\n    return (result)\nprint()\ndef outPut():\n    print(\"The multiplied values = \", multiply(10,20))\noutPut()",
        "detail": "Aksam.assignments.asignment_7.multipy",
        "documentation": {}
    },
    {
        "label": "outPut",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.multipy",
        "description": "Aksam.assignments.asignment_7.multipy",
        "peekOfCode": "def outPut():\n    print(\"The multiplied values = \", multiply(10,20))\noutPut()",
        "detail": "Aksam.assignments.asignment_7.multipy",
        "documentation": {}
    },
    {
        "label": "subract",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.subtract",
        "description": "Aksam.assignments.asignment_7.subtract",
        "peekOfCode": "def subract(number_1, number_2):\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number '))\n    result = float(number_1) - float(number_2)\n    return (result)\nprint()\ndef outPut():\n    print(\"The subtracted values = \", subract(10,20))\noutPut()\nprint()",
        "detail": "Aksam.assignments.asignment_7.subtract",
        "documentation": {}
    },
    {
        "label": "outPut",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.subtract",
        "description": "Aksam.assignments.asignment_7.subtract",
        "peekOfCode": "def outPut():\n    print(\"The subtracted values = \", subract(10,20))\noutPut()\nprint()\n# EXAMPLE 2\nprint('EXAMPLE 2')\ndef subracted(num1,num2):\n    return (num1 - num2)\ndef get_input():\n    number_1 = float(input('Enter Your First Number '))",
        "detail": "Aksam.assignments.asignment_7.subtract",
        "documentation": {}
    },
    {
        "label": "subracted",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.subtract",
        "description": "Aksam.assignments.asignment_7.subtract",
        "peekOfCode": "def subracted(num1,num2):\n    return (num1 - num2)\ndef get_input():\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number '))\n    print(\"The subtracted values = \", subracted(number_1, number_2))\nget_input()",
        "detail": "Aksam.assignments.asignment_7.subtract",
        "documentation": {}
    },
    {
        "label": "get_input",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_7.subtract",
        "description": "Aksam.assignments.asignment_7.subtract",
        "peekOfCode": "def get_input():\n    number_1 = float(input('Enter Your First Number '))\n    number_2 = float(input('Enter Your Second Number '))\n    print(\"The subtracted values = \", subracted(number_1, number_2))\nget_input()",
        "detail": "Aksam.assignments.asignment_7.subtract",
        "documentation": {}
    },
    {
        "label": "pychos",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_8.list_compresion",
        "description": "Aksam.assignments.asignment_8.list_compresion",
        "peekOfCode": "pychos = [1,2,3,4,5,6,7]\nsquared_pychos = [] # empty list to get values\nfor pycho in pychos:\n    squared_pychos.append(pycho ** 2)\nprint(\"Squared pychos without list comprehension\", squared_pychos)\nsquared_pychos_lc = [pycho ** 2 for pycho in pychos ]\nprint(\"Squared pychos with list comprehension\", squared_pychos_lc)",
        "detail": "Aksam.assignments.asignment_8.list_compresion",
        "documentation": {}
    },
    {
        "label": "squared_pychos",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_8.list_compresion",
        "description": "Aksam.assignments.asignment_8.list_compresion",
        "peekOfCode": "squared_pychos = [] # empty list to get values\nfor pycho in pychos:\n    squared_pychos.append(pycho ** 2)\nprint(\"Squared pychos without list comprehension\", squared_pychos)\nsquared_pychos_lc = [pycho ** 2 for pycho in pychos ]\nprint(\"Squared pychos with list comprehension\", squared_pychos_lc)",
        "detail": "Aksam.assignments.asignment_8.list_compresion",
        "documentation": {}
    },
    {
        "label": "squared_pychos_lc",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_8.list_compresion",
        "description": "Aksam.assignments.asignment_8.list_compresion",
        "peekOfCode": "squared_pychos_lc = [pycho ** 2 for pycho in pychos ]\nprint(\"Squared pychos with list comprehension\", squared_pychos_lc)",
        "detail": "Aksam.assignments.asignment_8.list_compresion",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_8.list_pop",
        "description": "Aksam.assignments.asignment_8.list_pop",
        "peekOfCode": "list1 = [1, 'Cyrus', 20.9, 190, True]\nprint(list1) # printed before poping\nlist1.pop()\nprint(list1) # removes one item from the end\n# Example 2\nlist2 = [1, 'Cyrus', 20.9, 190, 'John']\nprint('Original List:', list2)\nremoved_element = list2.pop()\nprint(\"Modified list after pop(): \",list2)\nprint(\"Removed Element:\", removed_element)",
        "detail": "Aksam.assignments.asignment_8.list_pop",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_8.list_pop",
        "description": "Aksam.assignments.asignment_8.list_pop",
        "peekOfCode": "list2 = [1, 'Cyrus', 20.9, 190, 'John']\nprint('Original List:', list2)\nremoved_element = list2.pop()\nprint(\"Modified list after pop(): \",list2)\nprint(\"Removed Element:\", removed_element)",
        "detail": "Aksam.assignments.asignment_8.list_pop",
        "documentation": {}
    },
    {
        "label": "removed_element",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_8.list_pop",
        "description": "Aksam.assignments.asignment_8.list_pop",
        "peekOfCode": "removed_element = list2.pop()\nprint(\"Modified list after pop(): \",list2)\nprint(\"Removed Element:\", removed_element)",
        "detail": "Aksam.assignments.asignment_8.list_pop",
        "documentation": {}
    },
    {
        "label": "deposit",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_9.bank_info",
        "description": "Aksam.assignments.asignment_9.bank_info",
        "peekOfCode": "def deposit(balance, amount):\n    \"Function to deposit money\"\n    balance += amount\n    return balance\ndef withdraw(balance,amount):\n    \"Function to withdraw money\"\n    if amount <= balance: # checks if a user is eligable to withdraw\n        balance -= amount\n        return balance, True # if their is money in the bank it will be successful\n    else:",
        "detail": "Aksam.assignments.asignment_9.bank_info",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_9.bank_info",
        "description": "Aksam.assignments.asignment_9.bank_info",
        "peekOfCode": "def withdraw(balance,amount):\n    \"Function to withdraw money\"\n    if amount <= balance: # checks if a user is eligable to withdraw\n        balance -= amount\n        return balance, True # if their is money in the bank it will be successful\n    else:\n        return balance, False # if their is no money in the bank it will be unsuccessful\ndef bank_info():\n    \"Function for user interaction\"\n    balance = 0",
        "detail": "Aksam.assignments.asignment_9.bank_info",
        "documentation": {}
    },
    {
        "label": "bank_info",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_9.bank_info",
        "description": "Aksam.assignments.asignment_9.bank_info",
        "peekOfCode": "def bank_info():\n    \"Function for user interaction\"\n    balance = 0\n    print(\"Welcome to Cyberspace Maze Bank!\")\n    while True:\n        print(\"\\nWhat would you like to do:\")\n        print(\"A: Deposit money\")\n        print(\"B: Withdraw money\")\n        print(\"C: Exit\")\n        choice = input(\"Enter your choice: \")",
        "detail": "Aksam.assignments.asignment_9.bank_info",
        "documentation": {}
    },
    {
        "label": "user_option",
        "kind": 5,
        "importPath": "Aksam.assignments.asignment_9.bank_info",
        "description": "Aksam.assignments.asignment_9.bank_info",
        "peekOfCode": "user_option = input(\"Enter your option: \")\nprint(\"-----------------------------\")\nif (user_option == \"a\" or user_option == \"A\"):\n    withdraw = float(input(\"Enter amount to be withdrawn: \"))\n    account_balance = float(input(\"Enter the current amount in your bank account: \"))\n    def subtract_amount(withdraw, account_balance):\n        result = account_balance - withdraw \n        print(\"Your new account balance is: \", result)\n        print(str(account_balance) + \" - \" + str(withdraw) + \" = \" + str(result) + \"Shs. \" )\n        print(\"------------------\")",
        "detail": "Aksam.assignments.asignment_9.bank_info",
        "documentation": {}
    },
    {
        "label": "input_day",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_9.day",
        "description": "Aksam.assignments.asignment_9.day",
        "peekOfCode": "def input_day():\n    print(\"EXAMPLE 1\")\n    my_day = int(input(\"Enter the current day of the week (1-7): \"))\n    if my_day == 1:\n        print(\"Monday: Organizing for the week ahead\")\n    elif my_day == 2:\n        print(\"Tuesday: Planing my time table to code for the week\")\n    elif my_day == 3:\n        print(\"Wednesday: Taking my clothes to the washing machine\")\n    elif my_day == 4:",
        "detail": "Aksam.assignments.asignment_9.day",
        "documentation": {}
    },
    {
        "label": "current_daytime",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_9.day",
        "description": "Aksam.assignments.asignment_9.day",
        "peekOfCode": "def current_daytime():\n    current_day = datetime.now().weekday() + 1\n    if current_day == 1:\n        return \"Monday: Planing and Organizing for the week ahead\"\n    elif current_day == 2:\n        return \"Tuesday: Team meeting and collaboration\"\n    elif current_day == 3:\n        return \"Wednesday: Mid-week assessments and assignments from  the teacher\"\n    elif current_day == 4:\n        return \"Thursday: Playing games on my PS4 consle and coming to the institute\"",
        "detail": "Aksam.assignments.asignment_9.day",
        "documentation": {}
    },
    {
        "label": "Checking_num",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_9.whileloop",
        "description": "Aksam.assignments.asignment_9.whileloop",
        "peekOfCode": "def Checking_num():\n    numbers = [1,2,3,4,5,6]\n    counter = 0 # responsible for counting the even or odd nums\n    while counter < len(numbers):\n        # using an if statement to check if the current is even\n        if numbers[counter] % 2 == 0: # this is the even if statement which checks if there are numbers that can be divisable by 2 \n            print(f\"{numbers[counter]} is even\")\n        else:\n            print(f\"{numbers[counter]} is odd\") # this else automatically \n        counter += 1",
        "detail": "Aksam.assignments.asignment_9.whileloop",
        "documentation": {}
    },
    {
        "label": "vowels",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_9.whileloop",
        "description": "Aksam.assignments.asignment_9.whileloop",
        "peekOfCode": "def vowels():\n    students = [\"Panchal\", \"Joel\", \"Rajvir\", \"Emma\", \"Afford\", \"Mumbere\", \"Aksam\"]\n    index = 0\n    while index  < len(students):\n        # using an if statement to check if the current element starts with a vowel\n        if students[index][0].lower() in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n            print(f\"{students[index]} starts with a vowel\")\n        else:\n            print(f\"{students[index]} does not starts with a vowel\")\n        index += 1",
        "detail": "Aksam.assignments.asignment_9.whileloop",
        "documentation": {}
    },
    {
        "label": "fruit_leng",
        "kind": 2,
        "importPath": "Aksam.assignments.asignment_9.whileloop",
        "description": "Aksam.assignments.asignment_9.whileloop",
        "peekOfCode": "def fruit_leng():\n    fruits = [\"apple\",\"banana\",\"orange\",\"mango\",\"Kiwi\"]\n    count = 0\n    print(\"----------------------------------\")\n    print(\"using a while loop:\")\n    while count < len(fruits):\n        if len(fruits[count]) % 2 == 0:\n            print(f\"The Length of {fruits[count]} is a even number\")\n        elif len(fruits[count]) % 2 != 0:\n            print(f\"The Length of {fruits[count]} is a odd number\")",
        "detail": "Aksam.assignments.asignment_9.whileloop",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Aksam.Calculator.main",
        "description": "Aksam.Calculator.main",
        "peekOfCode": "def add(a,b):\n    answer=a+b\n    print(str(a) + \"+\" + str(b) + \"=\" + str(answer))     #only strings can be concatenated\ndef sub(a,b):\n    answer=a+b\n    print(str(a) + \"-\" + str(b)  + \"=\" + str(answer))\ndef mul(a,b):\n    answer=a+b\n    print(str(a) + \"*\" + str(b) + \"=\" + str(answer))\ndef div(a,b):",
        "detail": "Aksam.Calculator.main",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "Aksam.Calculator.main",
        "description": "Aksam.Calculator.main",
        "peekOfCode": "def sub(a,b):\n    answer=a+b\n    print(str(a) + \"-\" + str(b)  + \"=\" + str(answer))\ndef mul(a,b):\n    answer=a+b\n    print(str(a) + \"*\" + str(b) + \"=\" + str(answer))\ndef div(a,b):\n    answer=a+b\n    print(str(a) + \"/\" + str(b) + \"=\" + str(answer))\nprint(\"Select an option: \")",
        "detail": "Aksam.Calculator.main",
        "documentation": {}
    },
    {
        "label": "mul",
        "kind": 2,
        "importPath": "Aksam.Calculator.main",
        "description": "Aksam.Calculator.main",
        "peekOfCode": "def mul(a,b):\n    answer=a+b\n    print(str(a) + \"*\" + str(b) + \"=\" + str(answer))\ndef div(a,b):\n    answer=a+b\n    print(str(a) + \"/\" + str(b) + \"=\" + str(answer))\nprint(\"Select an option: \")\nprint('A: Addtion')\nprint('B: Subtraction')\nprint('C: Multipication')",
        "detail": "Aksam.Calculator.main",
        "documentation": {}
    },
    {
        "label": "div",
        "kind": 2,
        "importPath": "Aksam.Calculator.main",
        "description": "Aksam.Calculator.main",
        "peekOfCode": "def div(a,b):\n    answer=a+b\n    print(str(a) + \"/\" + str(b) + \"=\" + str(answer))\nprint(\"Select an option: \")\nprint('A: Addtion')\nprint('B: Subtraction')\nprint('C: Multipication')\nprint('D: Division')\nchoice=input(\"Enter your option:\")\nprint(\"*\"*20)",
        "detail": "Aksam.Calculator.main",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Aksam.dictionary.dics",
        "description": "Aksam.dictionary.dics",
        "peekOfCode": "students = {\n    \"Aksam\": 95,\n    \"John\": 78,\n    \"Micheal\": 97,\n}\nprint(students)\n# EXAMPLE 2\nfruits = {\n    \"Mango\": 12,\n    \"Lemon\": 90,",
        "detail": "Aksam.dictionary.dics",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "Aksam.dictionary.dics",
        "description": "Aksam.dictionary.dics",
        "peekOfCode": "fruits = {\n    \"Mango\": 12,\n    \"Lemon\": 90,\n    \"Orange\": 2,\n}\nprint(fruits)\ncapitals = {\"Uganda\":\"Kampala\", \"Kenya\":\"Nairobi\"} \nprint(capitals.get[\"Uganda\"])\nprint(capitals[\"Uganda\"])",
        "detail": "Aksam.dictionary.dics",
        "documentation": {}
    },
    {
        "label": "capitals",
        "kind": 5,
        "importPath": "Aksam.dictionary.dics",
        "description": "Aksam.dictionary.dics",
        "peekOfCode": "capitals = {\"Uganda\":\"Kampala\", \"Kenya\":\"Nairobi\"} \nprint(capitals.get[\"Uganda\"])\nprint(capitals[\"Uganda\"])",
        "detail": "Aksam.dictionary.dics",
        "documentation": {}
    },
    {
        "label": "append_read_file",
        "kind": 2,
        "importPath": "Aksam.file_handling.append",
        "description": "Aksam.file_handling.append",
        "peekOfCode": "def append_read_file():\n    file_path = \"data.txt\"\n    if os.path.exists(file_path):\n        content_to_append = input(\"Enter content to append\")\n        with open(file_path, \"a+\") as file:\n            file.write(content_to_append + \"\\n\")\n            file.seek(0)\n            file_content = file.read()\n        return file_content\nfile_contents = append_read_file()",
        "detail": "Aksam.file_handling.append",
        "documentation": {}
    },
    {
        "label": "file_contents",
        "kind": 5,
        "importPath": "Aksam.file_handling.append",
        "description": "Aksam.file_handling.append",
        "peekOfCode": "file_contents = append_read_file()\nprint(f\"The contents after appending: {file_contents}\")",
        "detail": "Aksam.file_handling.append",
        "documentation": {}
    },
    {
        "label": "file_path",
        "kind": 5,
        "importPath": "Aksam.file_handling.exists",
        "description": "Aksam.file_handling.exists",
        "peekOfCode": "file_path = \"data.txt\"\nif os.path.exists(file_path):\n    # print(\"File exists\")\n    new_content = input(\"Please enter new content to append: \")\n    with open(file_path, \"r\") as file:\n        content_2 = file.read()\n        print(content_2)\nelse:\n    print(\"file doesnot exist\")",
        "detail": "Aksam.file_handling.exists",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "Aksam.file_handling.read",
        "description": "Aksam.file_handling.read",
        "peekOfCode": "file = open(\"data.txt\", \"r\")\nprint(file)",
        "detail": "Aksam.file_handling.read",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "Aksam.file_handling.reading",
        "description": "Aksam.file_handling.reading",
        "peekOfCode": "file = open(\"data.txt\", \"a\")\ncontent = file.write(\"Welcome to Python\\n\")\nprint(content)\nfile.close()",
        "detail": "Aksam.file_handling.reading",
        "documentation": {}
    },
    {
        "label": "content",
        "kind": 5,
        "importPath": "Aksam.file_handling.reading",
        "description": "Aksam.file_handling.reading",
        "peekOfCode": "content = file.write(\"Welcome to Python\\n\")\nprint(content)\nfile.close()",
        "detail": "Aksam.file_handling.reading",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "Aksam.file_handling.write",
        "description": "Aksam.file_handling.write",
        "peekOfCode": "file = open(\"data.txt\", \"w\")\nprint(file)",
        "detail": "Aksam.file_handling.write",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "Aksam.functions.enumerator_list",
        "description": "Aksam.functions.enumerator_list",
        "peekOfCode": "names = ['Aksam', 'Cyrus', 'John', 'Doe', 'Kratos']\nnames_dict = {index:name for index, name in enumerate(names)}\nfor index,key in enumerate(names_dict):\n    print(index,key, names_dict[key])",
        "detail": "Aksam.functions.enumerator_list",
        "documentation": {}
    },
    {
        "label": "names_dict",
        "kind": 5,
        "importPath": "Aksam.functions.enumerator_list",
        "description": "Aksam.functions.enumerator_list",
        "peekOfCode": "names_dict = {index:name for index, name in enumerate(names)}\nfor index,key in enumerate(names_dict):\n    print(index,key, names_dict[key])",
        "detail": "Aksam.functions.enumerator_list",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Aksam.functions.function",
        "description": "Aksam.functions.function",
        "peekOfCode": "def add(num1, num2):\n    result = num1 + num2\n    return result\nadd(10,20)\ndef inputs(n1, n2):\n    n1 = input('Enter value 2 ')\n    n2 = input('Enter Value 1 ')\n    result1 = int(n1) + int(n2)\n    print('The summed value is:', result1)\ninputs(10,20)",
        "detail": "Aksam.functions.function",
        "documentation": {}
    },
    {
        "label": "inputs",
        "kind": 2,
        "importPath": "Aksam.functions.function",
        "description": "Aksam.functions.function",
        "peekOfCode": "def inputs(n1, n2):\n    n1 = input('Enter value 2 ')\n    n2 = input('Enter Value 1 ')\n    result1 = int(n1) + int(n2)\n    print('The summed value is:', result1)\ninputs(10,20)\ndef Name(): \n    name = input('Enter your Name?: ') \n    return name  \ndef Age(): ",
        "detail": "Aksam.functions.function",
        "documentation": {}
    },
    {
        "label": "Name",
        "kind": 2,
        "importPath": "Aksam.functions.function",
        "description": "Aksam.functions.function",
        "peekOfCode": "def Name(): \n    name = input('Enter your Name?: ') \n    return name  \ndef Age(): \n    age = input('Enter your age?: ') \n    print(Name(), age)\nAge()\ndef function(one, two):\n    pass",
        "detail": "Aksam.functions.function",
        "documentation": {}
    },
    {
        "label": "Age",
        "kind": 2,
        "importPath": "Aksam.functions.function",
        "description": "Aksam.functions.function",
        "peekOfCode": "def Age(): \n    age = input('Enter your age?: ') \n    print(Name(), age)\nAge()\ndef function(one, two):\n    pass",
        "detail": "Aksam.functions.function",
        "documentation": {}
    },
    {
        "label": "function",
        "kind": 2,
        "importPath": "Aksam.functions.function",
        "description": "Aksam.functions.function",
        "peekOfCode": "def function(one, two):\n    pass",
        "detail": "Aksam.functions.function",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Aksam.functions.measure_time",
        "description": "Aksam.functions.measure_time",
        "peekOfCode": "def main():\n    task = Task()\n    return task\nstart_time = time.time()\nend_time = time.time()\nmain()    \nelapsed_time = end_time - start_time\nprint(f\"Elapsed time: {elapsed_time}s\")",
        "detail": "Aksam.functions.measure_time",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "Aksam.functions.measure_time",
        "description": "Aksam.functions.measure_time",
        "peekOfCode": "start_time = time.time()\nend_time = time.time()\nmain()    \nelapsed_time = end_time - start_time\nprint(f\"Elapsed time: {elapsed_time}s\")",
        "detail": "Aksam.functions.measure_time",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "Aksam.functions.measure_time",
        "description": "Aksam.functions.measure_time",
        "peekOfCode": "end_time = time.time()\nmain()    \nelapsed_time = end_time - start_time\nprint(f\"Elapsed time: {elapsed_time}s\")",
        "detail": "Aksam.functions.measure_time",
        "documentation": {}
    },
    {
        "label": "elapsed_time",
        "kind": 5,
        "importPath": "Aksam.functions.measure_time",
        "description": "Aksam.functions.measure_time",
        "peekOfCode": "elapsed_time = end_time - start_time\nprint(f\"Elapsed time: {elapsed_time}s\")",
        "detail": "Aksam.functions.measure_time",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 2,
        "importPath": "Aksam.functions.sleeping_func",
        "description": "Aksam.functions.sleeping_func",
        "peekOfCode": "def Task():\n        print(\"Task complete\")\nif __name__ == \"__main__\":\n    time.sleep(3)\n    Task()",
        "detail": "Aksam.functions.sleeping_func",
        "documentation": {}
    },
    {
        "label": "seconds",
        "kind": 5,
        "importPath": "Aksam.functions.sleeping_func",
        "description": "Aksam.functions.sleeping_func",
        "peekOfCode": "seconds = int(input(\"Please the starting time or seconds: \"))\nfor sec in range(seconds, 0 ,-1):\n    print(sec)\n    time.sleep(3)\nprint(\"Time up\")\n# def task():\n#     seconds = int(input(\"Please the starting time or seconds: \"))\n#     for i in range(seconds):\n#         print(\"Task\", i+1 )\n#         time.sleep(3)",
        "detail": "Aksam.functions.sleeping_func",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Aksam.if_statements.if_statement",
        "description": "Aksam.if_statements.if_statement",
        "peekOfCode": "def add(a,b):\n    answer = a + b\n    print(str(a) + \"+\" + str(b) + \"=\" + str(answer))\ndef subtract(a,b):\n    answer = a - b\n    print(str(a) + \"-\" + str(b) + \"=\" + str(answer))\ndef divide(a,b):\n    answer = a / b\n    print(str(a) + \"/\" + str(b) + \"=\" + str(answer))\ndef multipy(a,b):",
        "detail": "Aksam.if_statements.if_statement",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "Aksam.if_statements.if_statement",
        "description": "Aksam.if_statements.if_statement",
        "peekOfCode": "def subtract(a,b):\n    answer = a - b\n    print(str(a) + \"-\" + str(b) + \"=\" + str(answer))\ndef divide(a,b):\n    answer = a / b\n    print(str(a) + \"/\" + str(b) + \"=\" + str(answer))\ndef multipy(a,b):\n    answer = a * b\n    print(str(a) + \"*\" + str(b) + \"=\" + str(answer))\nchoice = input(\"Enter your choice: \")",
        "detail": "Aksam.if_statements.if_statement",
        "documentation": {}
    },
    {
        "label": "divide",
        "kind": 2,
        "importPath": "Aksam.if_statements.if_statement",
        "description": "Aksam.if_statements.if_statement",
        "peekOfCode": "def divide(a,b):\n    answer = a / b\n    print(str(a) + \"/\" + str(b) + \"=\" + str(answer))\ndef multipy(a,b):\n    answer = a * b\n    print(str(a) + \"*\" + str(b) + \"=\" + str(answer))\nchoice = input(\"Enter your choice: \")\nprint(\"A, Addition\")\nprint(\"B, Subtraction\")\nprint(\"C, Multiplication\")",
        "detail": "Aksam.if_statements.if_statement",
        "documentation": {}
    },
    {
        "label": "multipy",
        "kind": 2,
        "importPath": "Aksam.if_statements.if_statement",
        "description": "Aksam.if_statements.if_statement",
        "peekOfCode": "def multipy(a,b):\n    answer = a * b\n    print(str(a) + \"*\" + str(b) + \"=\" + str(answer))\nchoice = input(\"Enter your choice: \")\nprint(\"A, Addition\")\nprint(\"B, Subtraction\")\nprint(\"C, Multiplication\")\nprint(\"D, Divition\")\nif choice == \"a\" and choice == \"A\":\n    print(\"Addition\")",
        "detail": "Aksam.if_statements.if_statement",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Aksam.if_statements.if_statement",
        "description": "Aksam.if_statements.if_statement",
        "peekOfCode": "a = int(input(\"Enter first value: \"))\nb = int(input(\"Enter first value: \"))\nprint(\"-------------------------\")\ndef add(a,b):\n    answer = a + b\n    print(str(a) + \"+\" + str(b) + \"=\" + str(answer))\ndef subtract(a,b):\n    answer = a - b\n    print(str(a) + \"-\" + str(b) + \"=\" + str(answer))\ndef divide(a,b):",
        "detail": "Aksam.if_statements.if_statement",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Aksam.if_statements.if_statement",
        "description": "Aksam.if_statements.if_statement",
        "peekOfCode": "b = int(input(\"Enter first value: \"))\nprint(\"-------------------------\")\ndef add(a,b):\n    answer = a + b\n    print(str(a) + \"+\" + str(b) + \"=\" + str(answer))\ndef subtract(a,b):\n    answer = a - b\n    print(str(a) + \"-\" + str(b) + \"=\" + str(answer))\ndef divide(a,b):\n    answer = a / b",
        "detail": "Aksam.if_statements.if_statement",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": "Aksam.if_statements.if_statement",
        "description": "Aksam.if_statements.if_statement",
        "peekOfCode": "choice = input(\"Enter your choice: \")\nprint(\"A, Addition\")\nprint(\"B, Subtraction\")\nprint(\"C, Multiplication\")\nprint(\"D, Divition\")\nif choice == \"a\" and choice == \"A\":\n    print(\"Addition\")\n    add(a,b)\nelif choice == \"b\" or choice == \"B\":\n    print(\"Subtraction\")",
        "detail": "Aksam.if_statements.if_statement",
        "documentation": {}
    },
    {
        "label": "MutableList",
        "kind": 6,
        "importPath": "Aksam.immutability.main",
        "description": "Aksam.immutability.main",
        "peekOfCode": "class MutableList:\n    def __init__(self, values):\n        self.values = values\nlst  = MutableList([1,2,3,4])\n# mutable class dicts\nclass MutableDict:\n    def __init__(self, values):\n        self.values = values\ndct  = MutableList({\"a\":1,\"b\":2})\nclass MutableData:",
        "detail": "Aksam.immutability.main",
        "documentation": {}
    },
    {
        "label": "MutableDict",
        "kind": 6,
        "importPath": "Aksam.immutability.main",
        "description": "Aksam.immutability.main",
        "peekOfCode": "class MutableDict:\n    def __init__(self, values):\n        self.values = values\ndct  = MutableList({\"a\":1,\"b\":2})\nclass MutableData:\n    def __init__(self, data):\n        self.data = list(data)\nmutable_data = MutableData([1,3,4])\n# immutable int class\nclass ImmutableInt:",
        "detail": "Aksam.immutability.main",
        "documentation": {}
    },
    {
        "label": "MutableData",
        "kind": 6,
        "importPath": "Aksam.immutability.main",
        "description": "Aksam.immutability.main",
        "peekOfCode": "class MutableData:\n    def __init__(self, data):\n        self.data = list(data)\nmutable_data = MutableData([1,3,4])\n# immutable int class\nclass ImmutableInt:\n    def __init__(self, values):\n        self.values = values\nnum = ImmutableInt(5)\n# immutable tuples class",
        "detail": "Aksam.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImmutableInt",
        "kind": 6,
        "importPath": "Aksam.immutability.main",
        "description": "Aksam.immutability.main",
        "peekOfCode": "class ImmutableInt:\n    def __init__(self, values):\n        self.values = values\nnum = ImmutableInt(5)\n# immutable tuples class\nclass ImmutableTuple:\n    def __init__(self, values):\n        self.values = tuple(values)\n        print(self.values)\nimmut_tuple = ImmutableTuple((1,2,4,5))",
        "detail": "Aksam.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImmutableTuple",
        "kind": 6,
        "importPath": "Aksam.immutability.main",
        "description": "Aksam.immutability.main",
        "peekOfCode": "class ImmutableTuple:\n    def __init__(self, values):\n        self.values = tuple(values)\n        print(self.values)\nimmut_tuple = ImmutableTuple((1,2,4,5))\n# ========================== \n# CLASS ASSIGNMENT\n# ==========================\n# immutable boolean class\nclass ImutableBoolean:",
        "detail": "Aksam.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImutableBoolean",
        "kind": 6,
        "importPath": "Aksam.immutability.main",
        "description": "Aksam.immutability.main",
        "peekOfCode": "class ImutableBoolean:\n    def __init__(self, data) -> None:\n        self.data = bool(data)\n        print(self.data)\nimmut_bool = ImutableBoolean(5 > 6)\n# immutable string class\nclass ImmutableString:\n    def __init__(self, data):\n        self.data = str(data)\n        print(f\"{self.data}, world\")",
        "detail": "Aksam.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImmutableString",
        "kind": 6,
        "importPath": "Aksam.immutability.main",
        "description": "Aksam.immutability.main",
        "peekOfCode": "class ImmutableString:\n    def __init__(self, data):\n        self.data = str(data)\n        print(f\"{self.data}, world\")\nimmut_str = ImmutableString(\"Hello\")",
        "detail": "Aksam.immutability.main",
        "documentation": {}
    },
    {
        "label": "mutable_data",
        "kind": 5,
        "importPath": "Aksam.immutability.main",
        "description": "Aksam.immutability.main",
        "peekOfCode": "mutable_data = MutableData([1,3,4])\n# immutable int class\nclass ImmutableInt:\n    def __init__(self, values):\n        self.values = values\nnum = ImmutableInt(5)\n# immutable tuples class\nclass ImmutableTuple:\n    def __init__(self, values):\n        self.values = tuple(values)",
        "detail": "Aksam.immutability.main",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "Aksam.immutability.main",
        "description": "Aksam.immutability.main",
        "peekOfCode": "num = ImmutableInt(5)\n# immutable tuples class\nclass ImmutableTuple:\n    def __init__(self, values):\n        self.values = tuple(values)\n        print(self.values)\nimmut_tuple = ImmutableTuple((1,2,4,5))\n# ========================== \n# CLASS ASSIGNMENT\n# ==========================",
        "detail": "Aksam.immutability.main",
        "documentation": {}
    },
    {
        "label": "immut_tuple",
        "kind": 5,
        "importPath": "Aksam.immutability.main",
        "description": "Aksam.immutability.main",
        "peekOfCode": "immut_tuple = ImmutableTuple((1,2,4,5))\n# ========================== \n# CLASS ASSIGNMENT\n# ==========================\n# immutable boolean class\nclass ImutableBoolean:\n    def __init__(self, data) -> None:\n        self.data = bool(data)\n        print(self.data)\nimmut_bool = ImutableBoolean(5 > 6)",
        "detail": "Aksam.immutability.main",
        "documentation": {}
    },
    {
        "label": "immut_bool",
        "kind": 5,
        "importPath": "Aksam.immutability.main",
        "description": "Aksam.immutability.main",
        "peekOfCode": "immut_bool = ImutableBoolean(5 > 6)\n# immutable string class\nclass ImmutableString:\n    def __init__(self, data):\n        self.data = str(data)\n        print(f\"{self.data}, world\")\nimmut_str = ImmutableString(\"Hello\")",
        "detail": "Aksam.immutability.main",
        "documentation": {}
    },
    {
        "label": "immut_str",
        "kind": 5,
        "importPath": "Aksam.immutability.main",
        "description": "Aksam.immutability.main",
        "peekOfCode": "immut_str = ImmutableString(\"Hello\")",
        "detail": "Aksam.immutability.main",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 5,
        "importPath": "Aksam.lambda.main",
        "description": "Aksam.lambda.main",
        "peekOfCode": "add = lambda x,y: x+y\nprint(add(3,2))\nsquare = lambda x: x**2\nprint(square(3))\nis_even = lambda x: x%2==0\nprint(is_even(7))\nrvs = lambda s:s[::-1] \nprint(rvs(20))",
        "detail": "Aksam.lambda.main",
        "documentation": {}
    },
    {
        "label": "square",
        "kind": 5,
        "importPath": "Aksam.lambda.main",
        "description": "Aksam.lambda.main",
        "peekOfCode": "square = lambda x: x**2\nprint(square(3))\nis_even = lambda x: x%2==0\nprint(is_even(7))\nrvs = lambda s:s[::-1] \nprint(rvs(20))",
        "detail": "Aksam.lambda.main",
        "documentation": {}
    },
    {
        "label": "is_even",
        "kind": 5,
        "importPath": "Aksam.lambda.main",
        "description": "Aksam.lambda.main",
        "peekOfCode": "is_even = lambda x: x%2==0\nprint(is_even(7))\nrvs = lambda s:s[::-1] \nprint(rvs(20))",
        "detail": "Aksam.lambda.main",
        "documentation": {}
    },
    {
        "label": "rvs",
        "kind": 5,
        "importPath": "Aksam.lambda.main",
        "description": "Aksam.lambda.main",
        "peekOfCode": "rvs = lambda s:s[::-1] \nprint(rvs(20))",
        "detail": "Aksam.lambda.main",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Aksam.lists.forloop",
        "description": "Aksam.lists.forloop",
        "peekOfCode": "students = ['Aksam', 'Mary', 'Harry']\nfor student in students:\n    print(student, end='')",
        "detail": "Aksam.lists.forloop",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Aksam.lists.list_operations",
        "description": "Aksam.lists.list_operations",
        "peekOfCode": "list1 = [\"a\", True, 3, 4.5, 3]\nlist2 = [100, False, \"John\", 0.0, True]\nprint(list1)\n# Add items to a list\nprint(\"original list 1: \", list2)\nprint(\"Before updating index 2:\", list2[2])\nnewvalues = \"Mary\"\n# updating list2[2]\nlist2[1] = \"Doe\"\nprint(\"After updating index 2:\", list2[1])",
        "detail": "Aksam.lists.list_operations",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "Aksam.lists.list_operations",
        "description": "Aksam.lists.list_operations",
        "peekOfCode": "list2 = [100, False, \"John\", 0.0, True]\nprint(list1)\n# Add items to a list\nprint(\"original list 1: \", list2)\nprint(\"Before updating index 2:\", list2[2])\nnewvalues = \"Mary\"\n# updating list2[2]\nlist2[1] = \"Doe\"\nprint(\"After updating index 2:\", list2[1])\nprint(list2)",
        "detail": "Aksam.lists.list_operations",
        "documentation": {}
    },
    {
        "label": "newvalues",
        "kind": 5,
        "importPath": "Aksam.lists.list_operations",
        "description": "Aksam.lists.list_operations",
        "peekOfCode": "newvalues = \"Mary\"\n# updating list2[2]\nlist2[1] = \"Doe\"\nprint(\"After updating index 2:\", list2[1])\nprint(list2)\nlist3 = [1,2,3,4]\nprint(list3[0])",
        "detail": "Aksam.lists.list_operations",
        "documentation": {}
    },
    {
        "label": "list2[1]",
        "kind": 5,
        "importPath": "Aksam.lists.list_operations",
        "description": "Aksam.lists.list_operations",
        "peekOfCode": "list2[1] = \"Doe\"\nprint(\"After updating index 2:\", list2[1])\nprint(list2)\nlist3 = [1,2,3,4]\nprint(list3[0])",
        "detail": "Aksam.lists.list_operations",
        "documentation": {}
    },
    {
        "label": "list3",
        "kind": 5,
        "importPath": "Aksam.lists.list_operations",
        "description": "Aksam.lists.list_operations",
        "peekOfCode": "list3 = [1,2,3,4]\nprint(list3[0])",
        "detail": "Aksam.lists.list_operations",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Aksam.loops.enumerator",
        "description": "Aksam.loops.enumerator",
        "peekOfCode": "my_list = ['apples', 'bananas', 'cherry','Dates']\nfor index, value in enumerate(my_list):\n    print(f\"Index: {index}, value: {value}\")\n    print(f\"[{index}, {value}]\")",
        "detail": "Aksam.loops.enumerator",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Aksam.loops.forloop",
        "description": "Aksam.loops.forloop",
        "peekOfCode": "students = [\"Panchal\", \"Joel\", \"Rajvir\", \"Emma\", \"Afford\", \"Mumbere\", \"Aksam\"]\nfor student in students:\n    print(student)\nprint(\"Loop ended\")",
        "detail": "Aksam.loops.forloop",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "Aksam.OOP.iheritance.class_obj",
        "description": "Aksam.OOP.iheritance.class_obj",
        "peekOfCode": "class Person():\n    def __init__(self, fname, lname):\n        self.fname = fname\n        self.lname = lname\n    def display_info(self):\n        print(f\"First name: {self.fname}, Last name: {self.lname}\")\nclass Students(Person):\n    def __init__(self, fname, lname, student_id):\n        super().__init__(fname, lname)\n        self.student_id = student_id",
        "detail": "Aksam.OOP.iheritance.class_obj",
        "documentation": {}
    },
    {
        "label": "Students",
        "kind": 6,
        "importPath": "Aksam.OOP.iheritance.class_obj",
        "description": "Aksam.OOP.iheritance.class_obj",
        "peekOfCode": "class Students(Person):\n    def __init__(self, fname, lname, student_id):\n        super().__init__(fname, lname)\n        self.student_id = student_id\n    def display_info(self):\n        super().display_info()\n        print(f\"Student ID: {self.student_id}\")\nperson1 = Person(\"Aksam\", \"Cyrus\", \"7\")\nperson1.display_info()\nstudent1 = Students(\"Bob\", \"Marley\", \"4\")",
        "detail": "Aksam.OOP.iheritance.class_obj",
        "documentation": {}
    },
    {
        "label": "person1",
        "kind": 5,
        "importPath": "Aksam.OOP.iheritance.class_obj",
        "description": "Aksam.OOP.iheritance.class_obj",
        "peekOfCode": "person1 = Person(\"Aksam\", \"Cyrus\", \"7\")\nperson1.display_info()\nstudent1 = Students(\"Bob\", \"Marley\", \"4\")\nstudent1.display_info()",
        "detail": "Aksam.OOP.iheritance.class_obj",
        "documentation": {}
    },
    {
        "label": "student1",
        "kind": 5,
        "importPath": "Aksam.OOP.iheritance.class_obj",
        "description": "Aksam.OOP.iheritance.class_obj",
        "peekOfCode": "student1 = Students(\"Bob\", \"Marley\", \"4\")\nstudent1.display_info()",
        "detail": "Aksam.OOP.iheritance.class_obj",
        "documentation": {}
    },
    {
        "label": "dict1",
        "kind": 5,
        "importPath": "Aksam.operations.dict_operations",
        "description": "Aksam.operations.dict_operations",
        "peekOfCode": "dict1 = {\"a\":1, \"b\":2 }\ndict2 = {\"a\":3, \"b\":4 }\ndict2.update(dict1)\nprint(dict2)\n# comparing a dictionary\ndict1 = {\"a\":1, \"b\":2 }\ndict2 = {\"a\":3, \"b\":4 }\nprint( dict1 == dict2)\n#length of a dict\nprint(len(dict1))",
        "detail": "Aksam.operations.dict_operations",
        "documentation": {}
    },
    {
        "label": "dict2",
        "kind": 5,
        "importPath": "Aksam.operations.dict_operations",
        "description": "Aksam.operations.dict_operations",
        "peekOfCode": "dict2 = {\"a\":3, \"b\":4 }\ndict2.update(dict1)\nprint(dict2)\n# comparing a dictionary\ndict1 = {\"a\":1, \"b\":2 }\ndict2 = {\"a\":3, \"b\":4 }\nprint( dict1 == dict2)\n#length of a dict\nprint(len(dict1))\n# sorting items in dict",
        "detail": "Aksam.operations.dict_operations",
        "documentation": {}
    },
    {
        "label": "dict1",
        "kind": 5,
        "importPath": "Aksam.operations.dict_operations",
        "description": "Aksam.operations.dict_operations",
        "peekOfCode": "dict1 = {\"a\":1, \"b\":2 }\ndict2 = {\"a\":3, \"b\":4 }\nprint( dict1 == dict2)\n#length of a dict\nprint(len(dict1))\n# sorting items in dict\ndict3 = {\"a\":1, \"b\":2, \"c\":3, }\nsort_dict = dict(sorted(dict3.items()))\nprint(sort_dict)",
        "detail": "Aksam.operations.dict_operations",
        "documentation": {}
    },
    {
        "label": "dict2",
        "kind": 5,
        "importPath": "Aksam.operations.dict_operations",
        "description": "Aksam.operations.dict_operations",
        "peekOfCode": "dict2 = {\"a\":3, \"b\":4 }\nprint( dict1 == dict2)\n#length of a dict\nprint(len(dict1))\n# sorting items in dict\ndict3 = {\"a\":1, \"b\":2, \"c\":3, }\nsort_dict = dict(sorted(dict3.items()))\nprint(sort_dict)",
        "detail": "Aksam.operations.dict_operations",
        "documentation": {}
    },
    {
        "label": "dict3",
        "kind": 5,
        "importPath": "Aksam.operations.dict_operations",
        "description": "Aksam.operations.dict_operations",
        "peekOfCode": "dict3 = {\"a\":1, \"b\":2, \"c\":3, }\nsort_dict = dict(sorted(dict3.items()))\nprint(sort_dict)",
        "detail": "Aksam.operations.dict_operations",
        "documentation": {}
    },
    {
        "label": "sort_dict",
        "kind": 5,
        "importPath": "Aksam.operations.dict_operations",
        "description": "Aksam.operations.dict_operations",
        "peekOfCode": "sort_dict = dict(sorted(dict3.items()))\nprint(sort_dict)",
        "detail": "Aksam.operations.dict_operations",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Aksam.operations.list_operations",
        "description": "Aksam.operations.list_operations",
        "peekOfCode": "list1 = [\"John\", False, 20, 0.7, 9]\nprint(len(list1))# checking the length of a list\nlist1.remove(9) # removing a value from a list\nprint(len(list1))\n# Concatenating lists\nlist2 = [\"John\", 20, 30]\nnew_list = list1 + list2\nprint(new_list)\n# clear() removes everything from a list\nlist2.clear()",
        "detail": "Aksam.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "Aksam.operations.list_operations",
        "description": "Aksam.operations.list_operations",
        "peekOfCode": "list2 = [\"John\", 20, 30]\nnew_list = list1 + list2\nprint(new_list)\n# clear() removes everything from a list\nlist2.clear()\nprint(list2)\n# count\ncount_items = new_list.count(20)\nprint(count_items)\n# sort(only sort number)",
        "detail": "Aksam.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "new_list",
        "kind": 5,
        "importPath": "Aksam.operations.list_operations",
        "description": "Aksam.operations.list_operations",
        "peekOfCode": "new_list = list1 + list2\nprint(new_list)\n# clear() removes everything from a list\nlist2.clear()\nprint(list2)\n# count\ncount_items = new_list.count(20)\nprint(count_items)\n# sort(only sort number)\nunsort_items = [29,10,23,1,5,67]",
        "detail": "Aksam.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "count_items",
        "kind": 5,
        "importPath": "Aksam.operations.list_operations",
        "description": "Aksam.operations.list_operations",
        "peekOfCode": "count_items = new_list.count(20)\nprint(count_items)\n# sort(only sort number)\nunsort_items = [29,10,23,1,5,67]\nunsort_items.sort()\nprint(\"These are the sorted items: \",unsort_items)\n# reverse items\nunsort_items.reverse()\nprint(unsort_items)\n# copying",
        "detail": "Aksam.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "unsort_items",
        "kind": 5,
        "importPath": "Aksam.operations.list_operations",
        "description": "Aksam.operations.list_operations",
        "peekOfCode": "unsort_items = [29,10,23,1,5,67]\nunsort_items.sort()\nprint(\"These are the sorted items: \",unsort_items)\n# reverse items\nunsort_items.reverse()\nprint(unsort_items)\n# copying\ncopy_item = unsort_items.copy()\nprint(copy_item)",
        "detail": "Aksam.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "copy_item",
        "kind": 5,
        "importPath": "Aksam.operations.list_operations",
        "description": "Aksam.operations.list_operations",
        "peekOfCode": "copy_item = unsort_items.copy()\nprint(copy_item)",
        "detail": "Aksam.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "tuple1",
        "kind": 5,
        "importPath": "Aksam.operations.tuple_operations",
        "description": "Aksam.operations.tuple_operations",
        "peekOfCode": "tuple1 = (1, False, \"10\")\nprint(tuple1)\n# unpacking a tuple\na,b,c = tuple1\nprint(\"The assignrd to a :\", a)\n# tuple comparison\ntuple2 = (1,2,4)\ntuple3 = (1,2,3)\nprint(tuple2 == tuple3) # outputs a false\n# deleting a tuple",
        "detail": "Aksam.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "a,b,c",
        "kind": 5,
        "importPath": "Aksam.operations.tuple_operations",
        "description": "Aksam.operations.tuple_operations",
        "peekOfCode": "a,b,c = tuple1\nprint(\"The assignrd to a :\", a)\n# tuple comparison\ntuple2 = (1,2,4)\ntuple3 = (1,2,3)\nprint(tuple2 == tuple3) # outputs a false\n# deleting a tuple\ntuple4 = (1,2,3,4,5)\ndel tuple4\ntuple5 = (\"John\", False, 20, 0.7)",
        "detail": "Aksam.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "tuple2",
        "kind": 5,
        "importPath": "Aksam.operations.tuple_operations",
        "description": "Aksam.operations.tuple_operations",
        "peekOfCode": "tuple2 = (1,2,4)\ntuple3 = (1,2,3)\nprint(tuple2 == tuple3) # outputs a false\n# deleting a tuple\ntuple4 = (1,2,3,4,5)\ndel tuple4\ntuple5 = (\"John\", False, 20, 0.7)\nslice_tuple = tuple5[1:1:3]\nprint(slice_tuple)",
        "detail": "Aksam.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "tuple3",
        "kind": 5,
        "importPath": "Aksam.operations.tuple_operations",
        "description": "Aksam.operations.tuple_operations",
        "peekOfCode": "tuple3 = (1,2,3)\nprint(tuple2 == tuple3) # outputs a false\n# deleting a tuple\ntuple4 = (1,2,3,4,5)\ndel tuple4\ntuple5 = (\"John\", False, 20, 0.7)\nslice_tuple = tuple5[1:1:3]\nprint(slice_tuple)",
        "detail": "Aksam.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "tuple4",
        "kind": 5,
        "importPath": "Aksam.operations.tuple_operations",
        "description": "Aksam.operations.tuple_operations",
        "peekOfCode": "tuple4 = (1,2,3,4,5)\ndel tuple4\ntuple5 = (\"John\", False, 20, 0.7)\nslice_tuple = tuple5[1:1:3]\nprint(slice_tuple)",
        "detail": "Aksam.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "tuple5",
        "kind": 5,
        "importPath": "Aksam.operations.tuple_operations",
        "description": "Aksam.operations.tuple_operations",
        "peekOfCode": "tuple5 = (\"John\", False, 20, 0.7)\nslice_tuple = tuple5[1:1:3]\nprint(slice_tuple)",
        "detail": "Aksam.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "slice_tuple",
        "kind": 5,
        "importPath": "Aksam.operations.tuple_operations",
        "description": "Aksam.operations.tuple_operations",
        "peekOfCode": "slice_tuple = tuple5[1:1:3]\nprint(slice_tuple)",
        "detail": "Aksam.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Aksam.string_function.app",
        "description": "Aksam.string_function.app",
        "peekOfCode": "def main():\n    input_str = str(input(\"Enter a string: \"))\n    sub_str_to_replace = str(input(\"Enter substring to replace: \"))\n    replacement_sub_str = str(input(\"Enter the replacement: \"))\n    # perform replacement operation\n    replaced_str = input_str.replace(sub_str_to_replace, replacement_sub_str)\n    # spliting the replaced str into a list of words\n    words_list = replaced_str.split()\n    # join the splitted words with a hyphen\n    hypenated_str = \"-\".join(words_list)",
        "detail": "Aksam.string_function.app",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "Aksam.string_function.join_func",
        "description": "Aksam.string_function.join_func",
        "peekOfCode": "string = \"Hello\"\njoined_str = \"*\".join(string)\nprint(joined_str)\nstring2 = [\"apple\", \"banana\", \"orangle\"]\njoined_str2 = \",\".join(string2)\nprint(string2)\nwords = [\"Python\", \"is\", \"cool\"]\n# joined_str3 = str(words < 3).join(words)\njoined_str3 = \"< 3\".join(words)\nprint(joined_str3)",
        "detail": "Aksam.string_function.join_func",
        "documentation": {}
    },
    {
        "label": "joined_str",
        "kind": 5,
        "importPath": "Aksam.string_function.join_func",
        "description": "Aksam.string_function.join_func",
        "peekOfCode": "joined_str = \"*\".join(string)\nprint(joined_str)\nstring2 = [\"apple\", \"banana\", \"orangle\"]\njoined_str2 = \",\".join(string2)\nprint(string2)\nwords = [\"Python\", \"is\", \"cool\"]\n# joined_str3 = str(words < 3).join(words)\njoined_str3 = \"< 3\".join(words)\nprint(joined_str3)",
        "detail": "Aksam.string_function.join_func",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "Aksam.string_function.join_func",
        "description": "Aksam.string_function.join_func",
        "peekOfCode": "string2 = [\"apple\", \"banana\", \"orangle\"]\njoined_str2 = \",\".join(string2)\nprint(string2)\nwords = [\"Python\", \"is\", \"cool\"]\n# joined_str3 = str(words < 3).join(words)\njoined_str3 = \"< 3\".join(words)\nprint(joined_str3)",
        "detail": "Aksam.string_function.join_func",
        "documentation": {}
    },
    {
        "label": "joined_str2",
        "kind": 5,
        "importPath": "Aksam.string_function.join_func",
        "description": "Aksam.string_function.join_func",
        "peekOfCode": "joined_str2 = \",\".join(string2)\nprint(string2)\nwords = [\"Python\", \"is\", \"cool\"]\n# joined_str3 = str(words < 3).join(words)\njoined_str3 = \"< 3\".join(words)\nprint(joined_str3)",
        "detail": "Aksam.string_function.join_func",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "Aksam.string_function.join_func",
        "description": "Aksam.string_function.join_func",
        "peekOfCode": "words = [\"Python\", \"is\", \"cool\"]\n# joined_str3 = str(words < 3).join(words)\njoined_str3 = \"< 3\".join(words)\nprint(joined_str3)",
        "detail": "Aksam.string_function.join_func",
        "documentation": {}
    },
    {
        "label": "joined_str3",
        "kind": 5,
        "importPath": "Aksam.string_function.join_func",
        "description": "Aksam.string_function.join_func",
        "peekOfCode": "joined_str3 = \"< 3\".join(words)\nprint(joined_str3)",
        "detail": "Aksam.string_function.join_func",
        "documentation": {}
    },
    {
        "label": "game",
        "kind": 5,
        "importPath": "Aksam.string_function.main",
        "description": "Aksam.string_function.main",
        "peekOfCode": "game = \"Slash\"\nfor word in game:\n    print(word[0])\nstring1 = \"Hello world\"\nreplace_str = string1.replace(\"o\", \"a\")\nprint(replace_str)\nstring2 = \"I love python programming\"\nstring3 = string2.replace(\"python\", \"Django\")\nprint(string3)\nstring4 = \"abbbshhdhhcc\"",
        "detail": "Aksam.string_function.main",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "Aksam.string_function.main",
        "description": "Aksam.string_function.main",
        "peekOfCode": "string1 = \"Hello world\"\nreplace_str = string1.replace(\"o\", \"a\")\nprint(replace_str)\nstring2 = \"I love python programming\"\nstring3 = string2.replace(\"python\", \"Django\")\nprint(string3)\nstring4 = \"abbbshhdhhcc\"\nstring5 = string4.replace(\"h\", \"x\")\nprint(string5)",
        "detail": "Aksam.string_function.main",
        "documentation": {}
    },
    {
        "label": "replace_str",
        "kind": 5,
        "importPath": "Aksam.string_function.main",
        "description": "Aksam.string_function.main",
        "peekOfCode": "replace_str = string1.replace(\"o\", \"a\")\nprint(replace_str)\nstring2 = \"I love python programming\"\nstring3 = string2.replace(\"python\", \"Django\")\nprint(string3)\nstring4 = \"abbbshhdhhcc\"\nstring5 = string4.replace(\"h\", \"x\")\nprint(string5)",
        "detail": "Aksam.string_function.main",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "Aksam.string_function.main",
        "description": "Aksam.string_function.main",
        "peekOfCode": "string2 = \"I love python programming\"\nstring3 = string2.replace(\"python\", \"Django\")\nprint(string3)\nstring4 = \"abbbshhdhhcc\"\nstring5 = string4.replace(\"h\", \"x\")\nprint(string5)",
        "detail": "Aksam.string_function.main",
        "documentation": {}
    },
    {
        "label": "string3",
        "kind": 5,
        "importPath": "Aksam.string_function.main",
        "description": "Aksam.string_function.main",
        "peekOfCode": "string3 = string2.replace(\"python\", \"Django\")\nprint(string3)\nstring4 = \"abbbshhdhhcc\"\nstring5 = string4.replace(\"h\", \"x\")\nprint(string5)",
        "detail": "Aksam.string_function.main",
        "documentation": {}
    },
    {
        "label": "string4",
        "kind": 5,
        "importPath": "Aksam.string_function.main",
        "description": "Aksam.string_function.main",
        "peekOfCode": "string4 = \"abbbshhdhhcc\"\nstring5 = string4.replace(\"h\", \"x\")\nprint(string5)",
        "detail": "Aksam.string_function.main",
        "documentation": {}
    },
    {
        "label": "string5",
        "kind": 5,
        "importPath": "Aksam.string_function.main",
        "description": "Aksam.string_function.main",
        "peekOfCode": "string5 = string4.replace(\"h\", \"x\")\nprint(string5)",
        "detail": "Aksam.string_function.main",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "Aksam.string_function.split_func",
        "description": "Aksam.string_function.split_func",
        "peekOfCode": "string = \"This is a sentence\"\nsplit_str = string.split()\nprint(split_str)\nstring2 = \"apple, banana, orange\"\nsplit_str2 = string2.split(\",\")\nprint(split_str2)\nstring3 = \"apple, banana, orange, dates\"\nsplit_str3 = string3.split(\",;\")\nprint(split_str3)",
        "detail": "Aksam.string_function.split_func",
        "documentation": {}
    },
    {
        "label": "split_str",
        "kind": 5,
        "importPath": "Aksam.string_function.split_func",
        "description": "Aksam.string_function.split_func",
        "peekOfCode": "split_str = string.split()\nprint(split_str)\nstring2 = \"apple, banana, orange\"\nsplit_str2 = string2.split(\",\")\nprint(split_str2)\nstring3 = \"apple, banana, orange, dates\"\nsplit_str3 = string3.split(\",;\")\nprint(split_str3)",
        "detail": "Aksam.string_function.split_func",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "Aksam.string_function.split_func",
        "description": "Aksam.string_function.split_func",
        "peekOfCode": "string2 = \"apple, banana, orange\"\nsplit_str2 = string2.split(\",\")\nprint(split_str2)\nstring3 = \"apple, banana, orange, dates\"\nsplit_str3 = string3.split(\",;\")\nprint(split_str3)",
        "detail": "Aksam.string_function.split_func",
        "documentation": {}
    },
    {
        "label": "split_str2",
        "kind": 5,
        "importPath": "Aksam.string_function.split_func",
        "description": "Aksam.string_function.split_func",
        "peekOfCode": "split_str2 = string2.split(\",\")\nprint(split_str2)\nstring3 = \"apple, banana, orange, dates\"\nsplit_str3 = string3.split(\",;\")\nprint(split_str3)",
        "detail": "Aksam.string_function.split_func",
        "documentation": {}
    },
    {
        "label": "string3",
        "kind": 5,
        "importPath": "Aksam.string_function.split_func",
        "description": "Aksam.string_function.split_func",
        "peekOfCode": "string3 = \"apple, banana, orange, dates\"\nsplit_str3 = string3.split(\",;\")\nprint(split_str3)",
        "detail": "Aksam.string_function.split_func",
        "documentation": {}
    },
    {
        "label": "split_str3",
        "kind": 5,
        "importPath": "Aksam.string_function.split_func",
        "description": "Aksam.string_function.split_func",
        "peekOfCode": "split_str3 = string3.split(\",;\")\nprint(split_str3)",
        "detail": "Aksam.string_function.split_func",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "kind": 5,
        "importPath": "Aksam.tuples.tuple",
        "description": "Aksam.tuples.tuple",
        "peekOfCode": "Tuple = ('John', True, 2.5)\ntupl = Tuple[1]\nprint(tupl)\nTuple2 = Tuple[0:2]\nprint(Tuple2)\nTuple[0] = 'Mary'\nprint(Tuple)",
        "detail": "Aksam.tuples.tuple",
        "documentation": {}
    },
    {
        "label": "tupl",
        "kind": 5,
        "importPath": "Aksam.tuples.tuple",
        "description": "Aksam.tuples.tuple",
        "peekOfCode": "tupl = Tuple[1]\nprint(tupl)\nTuple2 = Tuple[0:2]\nprint(Tuple2)\nTuple[0] = 'Mary'\nprint(Tuple)",
        "detail": "Aksam.tuples.tuple",
        "documentation": {}
    },
    {
        "label": "Tuple2",
        "kind": 5,
        "importPath": "Aksam.tuples.tuple",
        "description": "Aksam.tuples.tuple",
        "peekOfCode": "Tuple2 = Tuple[0:2]\nprint(Tuple2)\nTuple[0] = 'Mary'\nprint(Tuple)",
        "detail": "Aksam.tuples.tuple",
        "documentation": {}
    },
    {
        "label": "Tuple[0]",
        "kind": 5,
        "importPath": "Aksam.tuples.tuple",
        "description": "Aksam.tuples.tuple",
        "peekOfCode": "Tuple[0] = 'Mary'\nprint(Tuple)",
        "detail": "Aksam.tuples.tuple",
        "documentation": {}
    },
    {
        "label": "looping",
        "kind": 2,
        "importPath": "Aksam.forloop",
        "description": "Aksam.forloop",
        "peekOfCode": "def looping():\n    numbers = [1,2,3,4,5,6]\n    for number in numbers:\n        print(number)\nlooping()",
        "detail": "Aksam.forloop",
        "documentation": {}
    },
    {
        "label": "month",
        "kind": 5,
        "importPath": "Aksam.hello_world",
        "description": "Aksam.hello_world",
        "peekOfCode": "month = \"January\"\nage=30\nis_teacher = True\nprint(month)\nprint(age)\nprint(is_teacher)",
        "detail": "Aksam.hello_world",
        "documentation": {}
    },
    {
        "label": "is_teacher",
        "kind": 5,
        "importPath": "Aksam.hello_world",
        "description": "Aksam.hello_world",
        "peekOfCode": "is_teacher = True\nprint(month)\nprint(age)\nprint(is_teacher)",
        "detail": "Aksam.hello_world",
        "documentation": {}
    },
    {
        "label": "string_1",
        "kind": 5,
        "importPath": "Aksam.split",
        "description": "Aksam.split",
        "peekOfCode": "string_1 = \"Hello World\"\nslipt_string = string_1.split(\",\")\nprint(slipt_string)",
        "detail": "Aksam.split",
        "documentation": {}
    },
    {
        "label": "slipt_string",
        "kind": 5,
        "importPath": "Aksam.split",
        "description": "Aksam.split",
        "peekOfCode": "slipt_string = string_1.split(\",\")\nprint(slipt_string)",
        "detail": "Aksam.split",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 2,
        "importPath": "charmi.advanced_functions.main",
        "description": "charmi.advanced_functions.main",
        "peekOfCode": "def first():\n    print(\"First code.\")\ndef main():\n    print(\"This script is being executed directly\")\nif __name__== \"__main__\":\n    main()\n    first()",
        "detail": "charmi.advanced_functions.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "charmi.advanced_functions.main",
        "description": "charmi.advanced_functions.main",
        "peekOfCode": "def main():\n    print(\"This script is being executed directly\")\nif __name__== \"__main__\":\n    main()\n    first()",
        "detail": "charmi.advanced_functions.main",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "charmi.Calculator.main",
        "description": "charmi.Calculator.main",
        "peekOfCode": "def add(a,b):\n    answer=a+b\n    print(str(a) + \"+\" + str(b) + \"=\" + str(answer))     #only strings can be concatenated\ndef sub(a,b):\n    answer=a+b\n    print(str(a) + \"-\" + str(b)  + \"=\" + str(answer))\ndef mul(a,b):\n    answer=a+b\n    print(str(a) + \"*\" + str(b) + \"=\" + str(answer))\ndef div(a,b):",
        "detail": "charmi.Calculator.main",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "charmi.Calculator.main",
        "description": "charmi.Calculator.main",
        "peekOfCode": "def sub(a,b):\n    answer=a+b\n    print(str(a) + \"-\" + str(b)  + \"=\" + str(answer))\ndef mul(a,b):\n    answer=a+b\n    print(str(a) + \"*\" + str(b) + \"=\" + str(answer))\ndef div(a,b):\n    answer=a+b\n    print(str(a) + \"/\" + str(b) + \"=\" + str(answer))\nprint(\"Select an option: \")",
        "detail": "charmi.Calculator.main",
        "documentation": {}
    },
    {
        "label": "mul",
        "kind": 2,
        "importPath": "charmi.Calculator.main",
        "description": "charmi.Calculator.main",
        "peekOfCode": "def mul(a,b):\n    answer=a+b\n    print(str(a) + \"*\" + str(b) + \"=\" + str(answer))\ndef div(a,b):\n    answer=a+b\n    print(str(a) + \"/\" + str(b) + \"=\" + str(answer))\nprint(\"Select an option: \")\nprint('A: Addtion')\nprint('B: Subtraction')\nprint('C: Multipication')",
        "detail": "charmi.Calculator.main",
        "documentation": {}
    },
    {
        "label": "div",
        "kind": 2,
        "importPath": "charmi.Calculator.main",
        "description": "charmi.Calculator.main",
        "peekOfCode": "def div(a,b):\n    answer=a+b\n    print(str(a) + \"/\" + str(b) + \"=\" + str(answer))\nprint(\"Select an option: \")\nprint('A: Addtion')\nprint('B: Subtraction')\nprint('C: Multipication')\nprint('D: Division')\nchoice=input(\"Enter your option:\")\nprint(\"*\"*20)",
        "detail": "charmi.Calculator.main",
        "documentation": {}
    },
    {
        "label": "switch_cases",
        "kind": 2,
        "importPath": "charmi.conditions.switch_cases",
        "description": "charmi.conditions.switch_cases",
        "peekOfCode": "def switch_cases(argument):\n    if argument== \"a\":\n        print(\"You selected option: {argument}\")\n        return \"Apple\"      # return only returns a value but it does not print\n    elif argument== \"b\":\n        return \"Banana\"\n    elif argument== \"c\":\n        return \"Cherry\"\n    elif argument== \"d\":\n        return \"Dates\"",
        "detail": "charmi.conditions.switch_cases",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "charmi.functions.operations.list_operations",
        "description": "charmi.functions.operations.list_operations",
        "peekOfCode": "list1 = ['John', False, 20, 0.7, 9]\nlist1.remove(9) #this will remove 9 from the list. note:insert the exact value to remove not its index\nprint(list1)\nprint(len(list1)) # len is to determine length of a list\n#Checking for membership\nprint(False in list1)  #this will check if False is in the list therefore it will return a True\nprint(3 in list1)   # this will return a True\n#Concatenating lists\nlist2= ['John', 20]\nnew_list = list1 + list2  #concatenating will add the two lists",
        "detail": "charmi.functions.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "new_list",
        "kind": 5,
        "importPath": "charmi.functions.operations.list_operations",
        "description": "charmi.functions.operations.list_operations",
        "peekOfCode": "new_list = list1 + list2  #concatenating will add the two lists\nprint(new_list)\n#Clearing a list \nlist2.clear()   #clearing removes everyting from a list\nprint(list2)\n#Count\ncount_items= new_list.count('John')  # this will count how many times John enters\nprint(count_items)\ncount_items2 = new_list.count('20')  #This will return 0 because integars are not supposed to be in strings.\nprint(count_items2)",
        "detail": "charmi.functions.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "count_items2",
        "kind": 5,
        "importPath": "charmi.functions.operations.list_operations",
        "description": "charmi.functions.operations.list_operations",
        "peekOfCode": "count_items2 = new_list.count('20')  #This will return 0 because integars are not supposed to be in strings.\nprint(count_items2)\n#Sort\nunsorted_items= [29, 8, 6, 20, 100]\nunsorted_items.sort()\nprint(\"These are sorted items:\", unsorted_items)\n#reverse items\nunsorted_items.reverse()\nprint(\"These are reversed items:\", unsorted_items)\n#Copying",
        "detail": "charmi.functions.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "copied_list",
        "kind": 5,
        "importPath": "charmi.functions.operations.list_operations",
        "description": "charmi.functions.operations.list_operations",
        "peekOfCode": "copied_list = unsorted_items.copy()\nprint(copied_list)",
        "detail": "charmi.functions.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "a,*b,c",
        "kind": 5,
        "importPath": "charmi.functions.operations.tuple_operations",
        "description": "charmi.functions.operations.tuple_operations",
        "peekOfCode": "a,*b,c = tuple1   #the * on b will assign a first then to c and the rest will be assigned to b\nprint(\"item assigned to 'a':\", a)\nprint(\"item assigned to 'b':\", b)\nprint(\"item assigned to 'c':\", c)\n#tuple comparison\ntuple2=(1,2,3)\ntuple3=(1,2,4)\nprint(tuple3 == tuple2) #outputs a False\nprint(tuple3 < tuple2)  #outputs a False because there are equal number of indices hence none of them is greater than the other\n#deleting a tuple",
        "detail": "charmi.functions.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "tuple5",
        "kind": 5,
        "importPath": "charmi.functions.operations.tuple_operations",
        "description": "charmi.functions.operations.tuple_operations",
        "peekOfCode": "tuple5 = ('John', False, 20, 0.7)\nslicing_tuple= tuple5[1:3] #This will only return from index1 and index2 because index3 is not inclued\nslicing_tuple2= tuple5[1:2:3] #This will be looked at again \nprint(slicing_tuple)",
        "detail": "charmi.functions.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "namefunc",
        "kind": 2,
        "importPath": "charmi.functions.function2",
        "description": "charmi.functions.function2",
        "peekOfCode": "def namefunc():\n    name= \"Charmi\"\n    return name\ndef age():\n    age= 20\n    print(\"Name:\"+ namefunc() + (\"\\n\") + \"Age:\" + str(age))      # empty quotes add space between the name and the age\n                                                                 # since age is an integer, age must be made a string to add\nage()\ndef Name():\n    name1= input(\"Enter your name:\")",
        "detail": "charmi.functions.function2",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 2,
        "importPath": "charmi.functions.function2",
        "description": "charmi.functions.function2",
        "peekOfCode": "def age():\n    age= 20\n    print(\"Name:\"+ namefunc() + (\"\\n\") + \"Age:\" + str(age))      # empty quotes add space between the name and the age\n                                                                 # since age is an integer, age must be made a string to add\nage()\ndef Name():\n    name1= input(\"Enter your name:\")\n    return name1\ndef Age():\n    age1=input(\"Enter your age:\")",
        "detail": "charmi.functions.function2",
        "documentation": {}
    },
    {
        "label": "Name",
        "kind": 2,
        "importPath": "charmi.functions.function2",
        "description": "charmi.functions.function2",
        "peekOfCode": "def Name():\n    name1= input(\"Enter your name:\")\n    return name1\ndef Age():\n    age1=input(\"Enter your age:\")\n    print(Name(), age1)\nAge()",
        "detail": "charmi.functions.function2",
        "documentation": {}
    },
    {
        "label": "Age",
        "kind": 2,
        "importPath": "charmi.functions.function2",
        "description": "charmi.functions.function2",
        "peekOfCode": "def Age():\n    age1=input(\"Enter your age:\")\n    print(Name(), age1)\nAge()",
        "detail": "charmi.functions.function2",
        "documentation": {}
    },
    {
        "label": "function1",
        "kind": 2,
        "importPath": "charmi.functions.functions1",
        "description": "charmi.functions.functions1",
        "peekOfCode": "def function1():\n    return \"Hello\"\ndef function2():\n    x=function1()\n    print(x, \"world\")\nfunction2()\ndef add(a=5, b=10):     # arguments 5 and 10 are default values. if actual values are not given, a default answer is given\n    c=a+b\n    print(c)\nadd()",
        "detail": "charmi.functions.functions1",
        "documentation": {}
    },
    {
        "label": "function2",
        "kind": 2,
        "importPath": "charmi.functions.functions1",
        "description": "charmi.functions.functions1",
        "peekOfCode": "def function2():\n    x=function1()\n    print(x, \"world\")\nfunction2()\ndef add(a=5, b=10):     # arguments 5 and 10 are default values. if actual values are not given, a default answer is given\n    c=a+b\n    print(c)\nadd()\ndef add(a=5, b=10):\n    c=a+b",
        "detail": "charmi.functions.functions1",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "charmi.functions.functions1",
        "description": "charmi.functions.functions1",
        "peekOfCode": "def add(a=5, b=10):     # arguments 5 and 10 are default values. if actual values are not given, a default answer is given\n    c=a+b\n    print(c)\nadd()\ndef add(a=5, b=10):\n    c=a+b\n    print(c)\nadd(10,10)\ndef add(a=5, b=10):          # the second value for b is taken from the placeholder\n    c=a+b",
        "detail": "charmi.functions.functions1",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "charmi.functions.functions1",
        "description": "charmi.functions.functions1",
        "peekOfCode": "def add(a=5, b=10):\n    c=a+b\n    print(c)\nadd(10,10)\ndef add(a=5, b=10):          # the second value for b is taken from the placeholder\n    c=a+b\n    print(c)\nadd(10)\n#how to call a function inside a function\ndef func1():",
        "detail": "charmi.functions.functions1",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "charmi.functions.functions1",
        "description": "charmi.functions.functions1",
        "peekOfCode": "def add(a=5, b=10):          # the second value for b is taken from the placeholder\n    c=a+b\n    print(c)\nadd(10)\n#how to call a function inside a function\ndef func1():\n    average=(7/3)\n    return average\ndef func2():\n    print(func1())",
        "detail": "charmi.functions.functions1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "charmi.functions.functions1",
        "description": "charmi.functions.functions1",
        "peekOfCode": "def func1():\n    average=(7/3)\n    return average\ndef func2():\n    print(func1())\nfunc2()\ndef Name():\n    name1= input(\"Enter your name:\")\n    return name1\ndef Age():",
        "detail": "charmi.functions.functions1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "charmi.functions.functions1",
        "description": "charmi.functions.functions1",
        "peekOfCode": "def func2():\n    print(func1())\nfunc2()\ndef Name():\n    name1= input(\"Enter your name:\")\n    return name1\ndef Age():\n    age1=input(\"Enter your age:\")\n    print(Name(), age1)\nAge()",
        "detail": "charmi.functions.functions1",
        "documentation": {}
    },
    {
        "label": "Name",
        "kind": 2,
        "importPath": "charmi.functions.functions1",
        "description": "charmi.functions.functions1",
        "peekOfCode": "def Name():\n    name1= input(\"Enter your name:\")\n    return name1\ndef Age():\n    age1=input(\"Enter your age:\")\n    print(Name(), age1)\nAge()\n#pass key word\ndef function():\n    pass",
        "detail": "charmi.functions.functions1",
        "documentation": {}
    },
    {
        "label": "Age",
        "kind": 2,
        "importPath": "charmi.functions.functions1",
        "description": "charmi.functions.functions1",
        "peekOfCode": "def Age():\n    age1=input(\"Enter your age:\")\n    print(Name(), age1)\nAge()\n#pass key word\ndef function():\n    pass\ndef function():\n    print(\"Not an empty function\")",
        "detail": "charmi.functions.functions1",
        "documentation": {}
    },
    {
        "label": "function",
        "kind": 2,
        "importPath": "charmi.functions.functions1",
        "description": "charmi.functions.functions1",
        "peekOfCode": "def function():\n    pass\ndef function():\n    print(\"Not an empty function\")",
        "detail": "charmi.functions.functions1",
        "documentation": {}
    },
    {
        "label": "function",
        "kind": 2,
        "importPath": "charmi.functions.functions1",
        "description": "charmi.functions.functions1",
        "peekOfCode": "def function():\n    print(\"Not an empty function\")",
        "detail": "charmi.functions.functions1",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "charmi.functions.inputs",
        "description": "charmi.functions.inputs",
        "peekOfCode": "def add(num1, num2):\n    return (num1+num2)\nnumber1= input(\"Enter first value:\")\nnumber2= input(\"Enter second value:\")\nprint (\"The summed value is:\", add(int(number1),int(number2)))",
        "detail": "charmi.functions.inputs",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "charmi.functions.practice",
        "description": "charmi.functions.practice",
        "peekOfCode": "def draw():\n    h = 0\n    for i in range(100):\n        c=colorsys.hsv_to_rgb(h,1,1)\n        h +=0.55\n        up()\n        goto(0,0)\n        down()\n        color(\"black\")\n        fillcolor (c)",
        "detail": "charmi.functions.practice",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "charmi.functions.practice2",
        "description": "charmi.functions.practice2",
        "peekOfCode": "width = 600 \nheight = 600\ndisplay = pygame.display.set_mode(width, height)\nclock = pygame.time.clock()\npygame.display.set_caption(\"Fidget Spinner \")",
        "detail": "charmi.functions.practice2",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "charmi.functions.practice2",
        "description": "charmi.functions.practice2",
        "peekOfCode": "height = 600\ndisplay = pygame.display.set_mode(width, height)\nclock = pygame.time.clock()\npygame.display.set_caption(\"Fidget Spinner \")",
        "detail": "charmi.functions.practice2",
        "documentation": {}
    },
    {
        "label": "display",
        "kind": 5,
        "importPath": "charmi.functions.practice2",
        "description": "charmi.functions.practice2",
        "peekOfCode": "display = pygame.display.set_mode(width, height)\nclock = pygame.time.clock()\npygame.display.set_caption(\"Fidget Spinner \")",
        "detail": "charmi.functions.practice2",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "charmi.functions.practice2",
        "description": "charmi.functions.practice2",
        "peekOfCode": "clock = pygame.time.clock()\npygame.display.set_caption(\"Fidget Spinner \")",
        "detail": "charmi.functions.practice2",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "charmi.Loops.while_loop",
        "description": "charmi.Loops.while_loop",
        "peekOfCode": "index = 1\nwhile index <= len(string):\n    print(str(string))\n    index += 1\nprint('*'*20)\n# counting down from a specified number\nnum= int(input(\"Enter a number to count down from: \"))\nwhile num > 0:\n    print(num)\n    num -= 1",
        "detail": "charmi.Loops.while_loop",
        "documentation": {}
    },
    {
        "label": "MutableList",
        "kind": 6,
        "importPath": "charmi.OOP.immutability.main",
        "description": "charmi.OOP.immutability.main",
        "peekOfCode": "class MutableList:\n    def __init__(self,values):\n        self.values= values\nlst=MutableList([1,2,3,4,5,6])\n# immutable boolean class\nclass ImmutableBoolean:\n    def __init__(self, data):\n        self.data=data\n        print(self.data)\nboo= ImmutableBoolean(True)",
        "detail": "charmi.OOP.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImmutableBoolean",
        "kind": 6,
        "importPath": "charmi.OOP.immutability.main",
        "description": "charmi.OOP.immutability.main",
        "peekOfCode": "class ImmutableBoolean:\n    def __init__(self, data):\n        self.data=data\n        print(self.data)\nboo= ImmutableBoolean(True)\n# immutability string class\nclass ImmutableString:\n    def __init__(self, values):\n        self.values=values\n        print(self.values)",
        "detail": "charmi.OOP.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImmutableString",
        "kind": 6,
        "importPath": "charmi.OOP.immutability.main",
        "description": "charmi.OOP.immutability.main",
        "peekOfCode": "class ImmutableString:\n    def __init__(self, values):\n        self.values=values\n        print(self.values)\nstrn= ImmutableString(\"Charmi Panchal\")",
        "detail": "charmi.OOP.immutability.main",
        "documentation": {}
    },
    {
        "label": "Vehical",
        "kind": 6,
        "importPath": "charmi.OOP.abstraction",
        "description": "charmi.OOP.abstraction",
        "peekOfCode": "class Vehical(ABC):\n    @abstractmethod\n    def model(self):\n        print(\"This is an abstract class.\")\n        return\n    def method1(self):\n        print(\"This is a concrete method\")\nclass Car(Vehical):\n    def model(self):\n        super().model",
        "detail": "charmi.OOP.abstraction",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "charmi.OOP.abstraction",
        "description": "charmi.OOP.abstraction",
        "peekOfCode": "class Car(Vehical):\n    def model(self):\n        super().model\n        return\ncar1 = Car()\ncar1.model()\ncar1.method1()",
        "detail": "charmi.OOP.abstraction",
        "documentation": {}
    },
    {
        "label": "car1",
        "kind": 5,
        "importPath": "charmi.OOP.abstraction",
        "description": "charmi.OOP.abstraction",
        "peekOfCode": "car1 = Car()\ncar1.model()\ncar1.method1()",
        "detail": "charmi.OOP.abstraction",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "charmi.OOP.class_1",
        "description": "charmi.OOP.class_1",
        "peekOfCode": "class Human:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    def introduction(self):\n        print(f\"Hello, my name is {self.name}. I am {self.age} years old and I am a {self.gender} \")\nperson1= Human(\"Alice\", 20, \"Female\")\nperson1.introduction()\nperson2= Human(\"Ali\", 15, \"Male\")",
        "detail": "charmi.OOP.class_1",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "charmi.OOP.inherit",
        "description": "charmi.OOP.inherit",
        "peekOfCode": "class Person:\n    def __init__(self, fname, lname):\n        self.firstname= fname\n        self.lastname= lname\nclass Student(Person):\n    def __init__(self,fname,lname):\n        super().__init__(fname,lname)\n        self.firstname=fname\n        self.lastname=lname\n    def study(self):",
        "detail": "charmi.OOP.inherit",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "charmi.OOP.inherit",
        "description": "charmi.OOP.inherit",
        "peekOfCode": "class Student(Person):\n    def __init__(self,fname,lname):\n        super().__init__(fname,lname)\n        self.firstname=fname\n        self.lastname=lname\n    def study(self):\n        print(\"Studying\")\nstudent1= Student(\"Charmi\", \"Panchal\")\nprint(f\"The student name is {student1.firstname} {student1.lastname}\")\nstudent1.study()",
        "detail": "charmi.OOP.inherit",
        "documentation": {}
    },
    {
        "label": "count_down",
        "kind": 2,
        "importPath": "charmi.Practical_assignments.assignment15.app.main",
        "description": "charmi.Practical_assignments.assignment15.app.main",
        "peekOfCode": "def count_down():\n    number = int(input(\"Enter a number to count down from: \"))\n    for a in range(number, 0, -1):\n        print(a)\n    print(\"Happy new year!\")\n#this program gives a range of numbers with a power of the user's choice\ndef range_app():\n# inputing the necessary numbers\n    y= int(input(\"Enter the power of your choice: \"))\n    input_start_value= int(input(\"Enter the start value in the range: \"))",
        "detail": "charmi.Practical_assignments.assignment15.app.main",
        "documentation": {}
    },
    {
        "label": "range_app",
        "kind": 2,
        "importPath": "charmi.Practical_assignments.assignment15.app.main",
        "description": "charmi.Practical_assignments.assignment15.app.main",
        "peekOfCode": "def range_app():\n# inputing the necessary numbers\n    y= int(input(\"Enter the power of your choice: \"))\n    input_start_value= int(input(\"Enter the start value in the range: \"))\n    input_end_value= int(input(\"Enter the end value in the range: \"))\n    input_step_value= int(input(\"Enter the step value in the range: \"))\n#function that calculates and gives the range of values\n    power= [x**y for x in range(input_start_value, input_end_value, input_step_value)]\n#output of the list\n    print(f\"Your answer is: {power}\")",
        "detail": "charmi.Practical_assignments.assignment15.app.main",
        "documentation": {}
    },
    {
        "label": "my-name",
        "kind": 5,
        "importPath": "charmi.Practical_assignments.assignment3.naming",
        "description": "charmi.Practical_assignments.assignment3.naming",
        "peekOfCode": "my-name = \"Charmi\"\nprint(1my_name)\nprint(my name)\nprint(my-name)\n#example 2\n#accepted variable names\nmyname = \"Charmi\"\nmy_name = \"Charmi\"\nmyname1 = \"Charmi\"\nprint(myname)",
        "detail": "charmi.Practical_assignments.assignment3.naming",
        "documentation": {}
    },
    {
        "label": "myname",
        "kind": 5,
        "importPath": "charmi.Practical_assignments.assignment3.naming",
        "description": "charmi.Practical_assignments.assignment3.naming",
        "peekOfCode": "myname = \"Charmi\"\nmy_name = \"Charmi\"\nmyname1 = \"Charmi\"\nprint(myname)\nprint(my_name)\nprint(myname1)",
        "detail": "charmi.Practical_assignments.assignment3.naming",
        "documentation": {}
    },
    {
        "label": "my_name",
        "kind": 5,
        "importPath": "charmi.Practical_assignments.assignment3.naming",
        "description": "charmi.Practical_assignments.assignment3.naming",
        "peekOfCode": "my_name = \"Charmi\"\nmyname1 = \"Charmi\"\nprint(myname)\nprint(my_name)\nprint(myname1)",
        "detail": "charmi.Practical_assignments.assignment3.naming",
        "documentation": {}
    },
    {
        "label": "myname1",
        "kind": 5,
        "importPath": "charmi.Practical_assignments.assignment3.naming",
        "description": "charmi.Practical_assignments.assignment3.naming",
        "peekOfCode": "myname1 = \"Charmi\"\nprint(myname)\nprint(my_name)\nprint(myname1)",
        "detail": "charmi.Practical_assignments.assignment3.naming",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment10",
        "description": "charmi.Practical_assignments.assignment10",
        "peekOfCode": "class Car:\n    def __init__(self, make, model, year):\n        self.make=make\n        self.model=model\n        self.year=year\n        self.is_running= False\n    def start_engine(self):\n        self.is_running= True\n        print(\"The engine is running..\")\n    def stop_engine(self):",
        "detail": "charmi.Practical_assignments.assignment10",
        "documentation": {}
    },
    {
        "label": "Vehical",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment10",
        "description": "charmi.Practical_assignments.assignment10",
        "peekOfCode": "class Vehical(Car):\n    pass              #we pass because we dont want any methods under this new(inherited) class\nmy_car2= Vehical('Toyota', 'T20', 2020)\nprint(my_car2.make)\nprint(my_car2.model)\nprint(my_car2.year)",
        "detail": "charmi.Practical_assignments.assignment10",
        "documentation": {}
    },
    {
        "label": "Vehical",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment11",
        "description": "charmi.Practical_assignments.assignment11",
        "peekOfCode": "class Vehical:\n    def __init__(self, model, year):\n        self.model=model\n        self.year=year\n    def move(self):\n        print(\"The vehical is moving!\")\nclass Bus(Vehical):\n    def move(self):\n        print(\"Driving!\")\nclass Bike(Vehical):",
        "detail": "charmi.Practical_assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Bus",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment11",
        "description": "charmi.Practical_assignments.assignment11",
        "peekOfCode": "class Bus(Vehical):\n    def move(self):\n        print(\"Driving!\")\nclass Bike(Vehical):\n    def move(self):\n        print(\"Peddle!\")\nbus1=Bus(\"MiniBus\", 2019) \nbike1=Bike(\"E-bike\", 2020)\nprint(\"The bus model is: \", bus1.model)\nprint(\"The bike model is: \", bike1.model)",
        "detail": "charmi.Practical_assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Bike",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment11",
        "description": "charmi.Practical_assignments.assignment11",
        "peekOfCode": "class Bike(Vehical):\n    def move(self):\n        print(\"Peddle!\")\nbus1=Bus(\"MiniBus\", 2019) \nbike1=Bike(\"E-bike\", 2020)\nprint(\"The bus model is: \", bus1.model)\nprint(\"The bike model is: \", bike1.model)\nprint(\"*\"*20)\n#Example 2\nclass Exams:",
        "detail": "charmi.Practical_assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Exams",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment11",
        "description": "charmi.Practical_assignments.assignment11",
        "peekOfCode": "class Exams:\n    def __init__(self,subject,topic):\n        self.subject=subject\n        self.topic=topic\n    def study(self):\n        print(\"Revision is going on!\")\nclass Sem_1(Exams):\n    def study(self):\n        print(\"Semester one revision is going on.\")\nclass Sem_2(Exams):",
        "detail": "charmi.Practical_assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Sem_1",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment11",
        "description": "charmi.Practical_assignments.assignment11",
        "peekOfCode": "class Sem_1(Exams):\n    def study(self):\n        print(\"Semester one revision is going on.\")\nclass Sem_2(Exams):\n    def study(self):\n        print(\"Semester two revision is going on.\")\nexam1=Sem_1(\"Mathematics\", \"Calculus\")\nexam2=Sem_2(\"Physics\", \"Waves\")\nprint(exam1.subject)\nprint(exam1.topic)",
        "detail": "charmi.Practical_assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Sem_2",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment11",
        "description": "charmi.Practical_assignments.assignment11",
        "peekOfCode": "class Sem_2(Exams):\n    def study(self):\n        print(\"Semester two revision is going on.\")\nexam1=Sem_1(\"Mathematics\", \"Calculus\")\nexam2=Sem_2(\"Physics\", \"Waves\")\nprint(exam1.subject)\nprint(exam1.topic)\nprint(exam2.subject)\nprint(exam2.topic)",
        "detail": "charmi.Practical_assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Vehical",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment12",
        "description": "charmi.Practical_assignments.assignment12",
        "peekOfCode": "class Vehical(ABC):\n    @abstractmethod\n    def start(self):\n        pass\nclass Car(Vehical):\n    def start(self):\n        print(\"Start the engine.\")\nclass Bike(Vehical):\n    def start(self):\n        print(\"Start peddling\")",
        "detail": "charmi.Practical_assignments.assignment12",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment12",
        "description": "charmi.Practical_assignments.assignment12",
        "peekOfCode": "class Car(Vehical):\n    def start(self):\n        print(\"Start the engine.\")\nclass Bike(Vehical):\n    def start(self):\n        print(\"Start peddling\")\ncar1=Car()\ncar1.start()\ncar2=Bike()\ncar2.start()",
        "detail": "charmi.Practical_assignments.assignment12",
        "documentation": {}
    },
    {
        "label": "Bike",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment12",
        "description": "charmi.Practical_assignments.assignment12",
        "peekOfCode": "class Bike(Vehical):\n    def start(self):\n        print(\"Start peddling\")\ncar1=Car()\ncar1.start()\ncar2=Bike()\ncar2.start()\nprint(\"----------------------------------\")\n# Example 2\nclass Computer(ABC):",
        "detail": "charmi.Practical_assignments.assignment12",
        "documentation": {}
    },
    {
        "label": "Computer",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment12",
        "description": "charmi.Practical_assignments.assignment12",
        "peekOfCode": "class Computer(ABC):\n    def __init__(self, model_1,model_2):\n        self.model_1=model_1\n        self.model_2=model_2\n    @abstractmethod\n    def process(self):\n        pass\nclass Laptop(Computer):\n    def process(self):\n        print(\"It is running\")",
        "detail": "charmi.Practical_assignments.assignment12",
        "documentation": {}
    },
    {
        "label": "Laptop",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment12",
        "description": "charmi.Practical_assignments.assignment12",
        "peekOfCode": "class Laptop(Computer):\n    def process(self):\n        print(\"It is running\")\nclass Phone(Computer):\n    def process(self):\n        print(\"It is working\")\nmodel_1=input(\"Enter the laptop model name: \")\nmodel_2=input(\"Enter the phone model name: \")\ncomp1=Laptop(model_1,model_2)\nprint(f\"The laptop model is {comp1.model_1}\")",
        "detail": "charmi.Practical_assignments.assignment12",
        "documentation": {}
    },
    {
        "label": "Phone",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment12",
        "description": "charmi.Practical_assignments.assignment12",
        "peekOfCode": "class Phone(Computer):\n    def process(self):\n        print(\"It is working\")\nmodel_1=input(\"Enter the laptop model name: \")\nmodel_2=input(\"Enter the phone model name: \")\ncomp1=Laptop(model_1,model_2)\nprint(f\"The laptop model is {comp1.model_1}\")\ncomp1.process()\ncomp2=Phone(model_1,model_2)\nprint(f\"The phone model is {comp2.model_2}\")",
        "detail": "charmi.Practical_assignments.assignment12",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment12",
        "description": "charmi.Practical_assignments.assignment12",
        "peekOfCode": "class Student:\n    def __init__(self, name, marks):\n        self.__name=name            #this double underscore makes name a private variable\n        self.__marks=marks\n    def Student_data(self):\n        print(f\"The name of student is {self.__name} and the marks are {self.__marks}\")\nstudent1= Student(\"Paul\", 20)\nstudent1.Student_data()\nstudent2= Student(\"Maya\", 91)\nstudent2.Student_data()",
        "detail": "charmi.Practical_assignments.assignment12",
        "documentation": {}
    },
    {
        "label": "Vehical",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment13",
        "description": "charmi.Practical_assignments.assignment13",
        "peekOfCode": "class Vehical:\n    def __init__(self, model, year):\n        self.model=model\n        self.year=year\n    def move(self):\n        print(\"The vehical is moving!\")\nclass Bus(Vehical):\n    def move(self):\n        print(\"Driving!\")\nclass Bike(Vehical):",
        "detail": "charmi.Practical_assignments.assignment13",
        "documentation": {}
    },
    {
        "label": "Bus",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment13",
        "description": "charmi.Practical_assignments.assignment13",
        "peekOfCode": "class Bus(Vehical):\n    def move(self):\n        print(\"Driving!\")\nclass Bike(Vehical):\n    def move(self):\n        print(\"Peddle!\")\nbus1=Bus(\"MiniBus\", 2019) \nbike1=Bike(\"E-bike\", 2020)\nprint(\"The bus model is: \", bus1.model)\nprint(\"The bike model is: \", bike1.model)",
        "detail": "charmi.Practical_assignments.assignment13",
        "documentation": {}
    },
    {
        "label": "Bike",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment13",
        "description": "charmi.Practical_assignments.assignment13",
        "peekOfCode": "class Bike(Vehical):\n    def move(self):\n        print(\"Peddle!\")\nbus1=Bus(\"MiniBus\", 2019) \nbike1=Bike(\"E-bike\", 2020)\nprint(\"The bus model is: \", bus1.model)\nprint(\"The bike model is: \", bike1.model)\nprint(\"*\"*20)\n#Example 2\nclass Shape:",
        "detail": "charmi.Practical_assignments.assignment13",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment13",
        "description": "charmi.Practical_assignments.assignment13",
        "peekOfCode": "class Shape:\n    def __init__(self, type, size):\n        self.type= type\n        self.size= size\n    def draw(self):\n        print(\"Draw\")\nclass Circle(Shape):\n    def draw(self):\n        print(\"Draw the circle.\")\nclass Square(Shape):",
        "detail": "charmi.Practical_assignments.assignment13",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment13",
        "description": "charmi.Practical_assignments.assignment13",
        "peekOfCode": "class Circle(Shape):\n    def draw(self):\n        print(\"Draw the circle.\")\nclass Square(Shape):\n    def draw(self):\n        print(\"Draw the sqaure.\")\nshape1=Circle(\"Circle\", \"small\")\nshape2=Square(\"Square\", \"big\")\nprint(shape1.type)\nprint(shape2.type)",
        "detail": "charmi.Practical_assignments.assignment13",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment13",
        "description": "charmi.Practical_assignments.assignment13",
        "peekOfCode": "class Square(Shape):\n    def draw(self):\n        print(\"Draw the sqaure.\")\nshape1=Circle(\"Circle\", \"small\")\nshape2=Square(\"Square\", \"big\")\nprint(shape1.type)\nprint(shape2.type)\n#Encapsulation\n#Encapsulation helps impelement on private and public variables using either single underscore or double underscore\n#Example 1",
        "detail": "charmi.Practical_assignments.assignment13",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment13",
        "description": "charmi.Practical_assignments.assignment13",
        "peekOfCode": "class Student:\n    def __init__(self, name, marks):\n        self.__name=name            #this double underscore makes name a private variable\n        self.__marks=marks\nclass Student_profile(Student):\n    def Student_data(self):\n        print(f\"The student name is {self.__name} with {self.__marks} marks\")\nstudent1= Student(\"John\", 91)\n#Example 2 \nclass Employee:",
        "detail": "charmi.Practical_assignments.assignment13",
        "documentation": {}
    },
    {
        "label": "Student_profile",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment13",
        "description": "charmi.Practical_assignments.assignment13",
        "peekOfCode": "class Student_profile(Student):\n    def Student_data(self):\n        print(f\"The student name is {self.__name} with {self.__marks} marks\")\nstudent1= Student(\"John\", 91)\n#Example 2 \nclass Employee:\n    def __init__(self,name,age):\n        self.__name=name\n        self.__age=age\n    def employee_data(self):",
        "detail": "charmi.Practical_assignments.assignment13",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment13",
        "description": "charmi.Practical_assignments.assignment13",
        "peekOfCode": "class Employee:\n    def __init__(self,name,age):\n        self.__name=name\n        self.__age=age\n    def employee_data(self):\n        print(\"This is the Employee's private data\")\nclass Employee_info(Employee):\n    def employee_data(self):\n        print(\"This is the Employee's private data\")\nemployee1= Employee(\"David\", 30)",
        "detail": "charmi.Practical_assignments.assignment13",
        "documentation": {}
    },
    {
        "label": "Employee_info",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment13",
        "description": "charmi.Practical_assignments.assignment13",
        "peekOfCode": "class Employee_info(Employee):\n    def employee_data(self):\n        print(\"This is the Employee's private data\")\nemployee1= Employee(\"David\", 30)\nemployee2= Employee(\"Sarah\", 40)\n# print(employee1.name)            #this wont print because name and age is private in the employee parent class\n# print(employee2.age)",
        "detail": "charmi.Practical_assignments.assignment13",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "charmi.Practical_assignments.assignment14",
        "description": "charmi.Practical_assignments.assignment14",
        "peekOfCode": "def main():\n    input_name= input(\"Enter your name: \")\n    input_name_with_spaces= input(\"Enter your name with leading spaces: \")\n    # performing reverse function\n    reversed_name = list(reversed(input_name))   #this operation gives the reversed string in form of a list\n    #performing uppercase function\n    name_in_uppercase = input_name.upper()\n    #performing lowercase function\n    name_in_lowercase = input_name.lower()\n    #performing the strip function",
        "detail": "charmi.Practical_assignments.assignment14",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment16",
        "description": "charmi.Practical_assignments.assignment16",
        "peekOfCode": "class Shape(ABC):\n    def __init__(self, length, width, radius):\n        self.length=length\n        self.width=width\n        self.radius=radius\n    @abstractmethod\n    def area(self):\n        pass\n        # print(\"This is for calculating the area of the shape.\")\n    @abstractmethod",
        "detail": "charmi.Practical_assignments.assignment16",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment16",
        "description": "charmi.Practical_assignments.assignment16",
        "peekOfCode": "class Circle(Shape):\n    def __init__(self,length, width, radius):\n        super().__init__(length, width, radius)\n        self.length=length\n        self.width=width\n        self.radius=radius\n#this is to calculate the area and perimeter of the circle\n    def area(self):\n        return self.radius*self.radius*(4.314)\n    def perimeter(self):",
        "detail": "charmi.Practical_assignments.assignment16",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment16",
        "description": "charmi.Practical_assignments.assignment16",
        "peekOfCode": "class Square(Shape):\n    def __init__(self, length, width, radius):\n        super().__init__(length, width, radius)\n        self.length=length\n        self.width=width\n        self.radius=radius\n#this is to calculate the area and perimeter of the square\n    def area(self):\n        return self.length* self.length \n    def perimeter(self):",
        "detail": "charmi.Practical_assignments.assignment16",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "charmi.Practical_assignments.assignment16",
        "description": "charmi.Practical_assignments.assignment16",
        "peekOfCode": "class Rectangle(Shape):\n    def __init__(self, length, width, radius):\n        super().__init__(length, width, radius)\n        self.length=length\n        self.width=width\n        self.radius=radius\n#this is to calculate the area and perimeter of the rectangle\n    def area(self):\n        return self.length* self.width \n    def perimeter(self):",
        "detail": "charmi.Practical_assignments.assignment16",
        "documentation": {}
    },
    {
        "label": "interest",
        "kind": 2,
        "importPath": "charmi.Practical_assignments.assignment4",
        "description": "charmi.Practical_assignments.assignment4",
        "peekOfCode": "def interest():\n    p= input(\"Enter the priciple amount: \")\n    p= int(p)\n    r= input(\"Enter the rate: \")\n    r= int(r)\n    t= input(\"Enter the number of years:\")\n    t= int(t)\n    interest1= (p*r*t)/100\n    print(\"The total interest is: \",interest1)\n    if (interest1 >100000):",
        "detail": "charmi.Practical_assignments.assignment4",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "charmi.Practical_assignments.assignment_4",
        "description": "charmi.Practical_assignments.assignment_4",
        "peekOfCode": "def sub(num1, num2):\n    return (num1-num2)\nnumber1= input(\"Enter first value:\")\nnumber2= input(\"Enter second value:\")\nprint (\"The subtracted value is:\", sub(int(number1),int(number2)), \"\\n\")\n#Multiplication\ndef mult(num1, num2):\n    return (num1*num2)\nnumber1= input(\"Enter first value:\")\nnumber2= input(\"Enter second value:\")",
        "detail": "charmi.Practical_assignments.assignment_4",
        "documentation": {}
    },
    {
        "label": "mult",
        "kind": 2,
        "importPath": "charmi.Practical_assignments.assignment_4",
        "description": "charmi.Practical_assignments.assignment_4",
        "peekOfCode": "def mult(num1, num2):\n    return (num1*num2)\nnumber1= input(\"Enter first value:\")\nnumber2= input(\"Enter second value:\")\nprint (\"The product of the values is:\", mult(int(number1),int(number2)), \"\\n\")\n#Division\ndef div(num1, num2):\n    return (num1/num2)\nnumber1= input(\"Enter the any value to be divided:\")\nnumber2= input(\"Enter the divisor value:\")",
        "detail": "charmi.Practical_assignments.assignment_4",
        "documentation": {}
    },
    {
        "label": "div",
        "kind": 2,
        "importPath": "charmi.Practical_assignments.assignment_4",
        "description": "charmi.Practical_assignments.assignment_4",
        "peekOfCode": "def div(num1, num2):\n    return (num1/num2)\nnumber1= input(\"Enter the any value to be divided:\")\nnumber2= input(\"Enter the divisor value:\")\nprint (\"The answer is:\", div(int(number1),int(number2)), \"\\n\")\n#Power of a number\ndef pwr(num1, num2):\n    return (num1**num2)\nnumber1= input(\"Enter any value:\")\nnumber2= input(\"Enter the power:\")",
        "detail": "charmi.Practical_assignments.assignment_4",
        "documentation": {}
    },
    {
        "label": "pwr",
        "kind": 2,
        "importPath": "charmi.Practical_assignments.assignment_4",
        "description": "charmi.Practical_assignments.assignment_4",
        "peekOfCode": "def pwr(num1, num2):\n    return (num1**num2)\nnumber1= input(\"Enter any value:\")\nnumber2= input(\"Enter the power:\")\nprint (\"The answer is:\", pwr(int(number1),int(number2)), \"\\n\")",
        "detail": "charmi.Practical_assignments.assignment_4",
        "documentation": {}
    },
    {
        "label": "current_day",
        "kind": 2,
        "importPath": "charmi.Practical_assignments.assignment_8",
        "description": "charmi.Practical_assignments.assignment_8",
        "peekOfCode": "def current_day():\n    print(\"The day today is:\")\n    current_day= datetime.datetime.now()\n    if current_day.strftime('%a') == \"Mon\":\n        print(\"Monday: First da of the week. \")\n    elif current_day.strftime('%a') == \"Tue\":\n        print(\"Tuesday: Second day of the week.\")\n    elif current_day.strftime('%a') == \"Wed\":\n        print(\"Wednesday: Mid week.\")\n    elif current_day.strftime('%a') == \"Thur\":",
        "detail": "charmi.Practical_assignments.assignment_8",
        "documentation": {}
    },
    {
        "label": "vowels",
        "kind": 2,
        "importPath": "charmi.Practical_assignments.assignment_9",
        "description": "charmi.Practical_assignments.assignment_9",
        "peekOfCode": "def vowels():\n    students= ['Charmi', 'Rajvir', 'Joel', 'Emma', 'Aksam', 'Affod', 'Mumbere']\n    index= 0\n    while index < len(students):\n        #Using if to get names whose names start with a vowel\n        if students[index][0].lower() in ['a', 'e', 'i', 'o', 'u']:\n            print(f\"{students[index]} starts with a vowel.\")\n        else:\n            print(f\"{students[index]} does not start with a vowel.\")\n        index += 1",
        "detail": "charmi.Practical_assignments.assignment_9",
        "documentation": {}
    },
    {
        "label": "replacement",
        "kind": 2,
        "importPath": "charmi.string_functions.find_function",
        "description": "charmi.string_functions.find_function",
        "peekOfCode": "def replacement():\n    sentence= input(\"Enter any sentence of your choice: \")\n    word_to_find= input(\"Enter the word to find from your sentence above: \")\n    word_to_replace= input(\"Enter the word you would want to replace it with: \")\n    word_index= sentence.find(word_to_find)\n    if word_index != -1:\n        new_Sentence= sentence.replace(word_to_find, word_to_replace)\n        print(new_Sentence)\n    else:\n        print(f\"The word {word_to_find} does not exist in your sentence!!!\")",
        "detail": "charmi.string_functions.find_function",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "charmi.string_functions.join_function",
        "description": "charmi.string_functions.join_function",
        "peekOfCode": "string = \"Hello\"\nstring2= \"*\".join(string)\nprint(string)\nstring3= [\"apple\", \"banana\", \"berry\"]\nstring4= \",\".join(string3)\nprint(string4)\nwords= ['python', 'is', 'cool']\nword_2= \"<3\".join(words)\nprint(word_2)",
        "detail": "charmi.string_functions.join_function",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "charmi.string_functions.replace_function",
        "description": "charmi.string_functions.replace_function",
        "peekOfCode": "string1 = \"Hello WORLD\"\nstring2= string1.replace('WORLD', 'world')\nprint(string2)\nstring3= \"I Love Programming\"\nstring4= string3.replace(\" \", \"\")\nprint(string4)",
        "detail": "charmi.string_functions.replace_function",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "charmi.add",
        "description": "charmi.add",
        "peekOfCode": "def add(a,b):\n    return a+b\nprint(add(a,b))",
        "detail": "charmi.add",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "dihfahsih.2DArrays.afod.class",
        "description": "dihfahsih.2DArrays.afod.class",
        "peekOfCode": "students = [\"afod\",\"emma\",\"axam\",\"joel\",\"punchal\",\"mumbere\",\"maurice\"]\nfor student in students:\n    print(student)",
        "detail": "dihfahsih.2DArrays.afod.class",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dihfahsih.advanced_functions.first_module",
        "description": "dihfahsih.advanced_functions.first_module",
        "peekOfCode": "def main():\n    print(__name__, \"This script run directly \")\nif __name__ == \"__main__\": # it is so important to prevent automatic execution of our code in other modules\n    main()\nelse:\n    print('run from the import')",
        "detail": "dihfahsih.advanced_functions.first_module",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "dihfahsih.calculator.main",
        "description": "dihfahsih.calculator.main",
        "peekOfCode": "def add(a,b):\n    answer=a+b \n    print(str(a) + \"+\" + str(b) + \"=\" + str(answer))\ndef sub(a,b):\n    answer=a-b \n    print(str(a) + \"-\" + str(b) + \"=\" + str(answer))\ndef div(a,b):\n    answer=a/b \n    print(str(a) + \"/\" + str(b) + \"=\" + str(answer))\ndef mul(a,b):",
        "detail": "dihfahsih.calculator.main",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "dihfahsih.calculator.main",
        "description": "dihfahsih.calculator.main",
        "peekOfCode": "def sub(a,b):\n    answer=a-b \n    print(str(a) + \"-\" + str(b) + \"=\" + str(answer))\ndef div(a,b):\n    answer=a/b \n    print(str(a) + \"/\" + str(b) + \"=\" + str(answer))\ndef mul(a,b):\n    answer=a*b \n    print(str(a) + \"*\" + str(b) + \"=\" + str(answer))\nprint(\"Choose one of the following operations\")",
        "detail": "dihfahsih.calculator.main",
        "documentation": {}
    },
    {
        "label": "div",
        "kind": 2,
        "importPath": "dihfahsih.calculator.main",
        "description": "dihfahsih.calculator.main",
        "peekOfCode": "def div(a,b):\n    answer=a/b \n    print(str(a) + \"/\" + str(b) + \"=\" + str(answer))\ndef mul(a,b):\n    answer=a*b \n    print(str(a) + \"*\" + str(b) + \"=\" + str(answer))\nprint(\"Choose one of the following operations\")\nprint(\"A. Addition\") \nprint(\"B. Subtraction\") \nprint(\"C, Multiplication\") ",
        "detail": "dihfahsih.calculator.main",
        "documentation": {}
    },
    {
        "label": "mul",
        "kind": 2,
        "importPath": "dihfahsih.calculator.main",
        "description": "dihfahsih.calculator.main",
        "peekOfCode": "def mul(a,b):\n    answer=a*b \n    print(str(a) + \"*\" + str(b) + \"=\" + str(answer))\nprint(\"Choose one of the following operations\")\nprint(\"A. Addition\") \nprint(\"B. Subtraction\") \nprint(\"C, Multiplication\") \nprint(\"D, Division)\") \nchoice=input(\"input your choice: \")\nif choice == 'a' or choice==\"A\":",
        "detail": "dihfahsih.calculator.main",
        "documentation": {}
    },
    {
        "label": "switch_case",
        "kind": 2,
        "importPath": "dihfahsih.conditions.switch_cases",
        "description": "dihfahsih.conditions.switch_cases",
        "peekOfCode": "def switch_case(argument):\n    print(f\"You selected option: {argument}\")\n    if argument=='a':\n        return \"Apple\"\n    elif argument=='b':\n        return \"Bananas\"\n    elif argument=='c':\n        return \"Cherry\"\n    elif argument=='d':\n        return \"dates\"",
        "detail": "dihfahsih.conditions.switch_cases",
        "documentation": {}
    },
    {
        "label": "read_file",
        "kind": 2,
        "importPath": "dihfahsih.file_handling.file_app",
        "description": "dihfahsih.file_handling.file_app",
        "peekOfCode": "def read_file(filename):\n    try:\n        with open(filename, 'r') as file:\n            content = file.read()\n            print(\"File content:\")\n            print(content)\n    except FileNotFoundError:\n        print(\"File not found.\")\ndef write_to_file(filename, data):\n    try:",
        "detail": "dihfahsih.file_handling.file_app",
        "documentation": {}
    },
    {
        "label": "write_to_file",
        "kind": 2,
        "importPath": "dihfahsih.file_handling.file_app",
        "description": "dihfahsih.file_handling.file_app",
        "peekOfCode": "def write_to_file(filename, data):\n    try:\n        with open(filename, 'w') as file:\n            file.write(data)\n            print(\"Data written to the file successfully.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\ndef append_to_file(filename, data):\n    try:\n        with open(filename, 'a') as file:",
        "detail": "dihfahsih.file_handling.file_app",
        "documentation": {}
    },
    {
        "label": "append_to_file",
        "kind": 2,
        "importPath": "dihfahsih.file_handling.file_app",
        "description": "dihfahsih.file_handling.file_app",
        "peekOfCode": "def append_to_file(filename, data):\n    try:\n        with open(filename, 'a') as file:\n            file.write(data)\n            print(\"Data appended to the file successfully.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\ndef main():\n    filename = 'data.txt'\n    print(\"1. Read from file\")",
        "detail": "dihfahsih.file_handling.file_app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dihfahsih.file_handling.file_app",
        "description": "dihfahsih.file_handling.file_app",
        "peekOfCode": "def main():\n    filename = 'data.txt'\n    print(\"1. Read from file\")\n    print(\"2. Write to file\")\n    print(\"3. Append to file\")\n    choice = input(\"Enter your choice (1/2/3): \")\n    if choice == '1':\n        read_file(filename)\n    elif choice == '2':\n        data = input(\"Enter data to write to the file: \")",
        "detail": "dihfahsih.file_handling.file_app",
        "documentation": {}
    },
    {
        "label": "Name",
        "kind": 2,
        "importPath": "dihfahsih.functions.functions",
        "description": "dihfahsih.functions.functions",
        "peekOfCode": "def Name():\n    name=input(\"Enter Your Name: \")\n    return name \ndef Age():\n    age=input(\"Enter Your Age: \")\n    # print(\"Name: \" + Name() + ('\\n') + \"Age: \"+ str(age))\n    print(Name(), age)\nAge()\ndef function():\n    pass",
        "detail": "dihfahsih.functions.functions",
        "documentation": {}
    },
    {
        "label": "Age",
        "kind": 2,
        "importPath": "dihfahsih.functions.functions",
        "description": "dihfahsih.functions.functions",
        "peekOfCode": "def Age():\n    age=input(\"Enter Your Age: \")\n    # print(\"Name: \" + Name() + ('\\n') + \"Age: \"+ str(age))\n    print(Name(), age)\nAge()\ndef function():\n    pass\ndef function2():\n    print(\"not empty\")",
        "detail": "dihfahsih.functions.functions",
        "documentation": {}
    },
    {
        "label": "function",
        "kind": 2,
        "importPath": "dihfahsih.functions.functions",
        "description": "dihfahsih.functions.functions",
        "peekOfCode": "def function():\n    pass\ndef function2():\n    print(\"not empty\")",
        "detail": "dihfahsih.functions.functions",
        "documentation": {}
    },
    {
        "label": "function2",
        "kind": 2,
        "importPath": "dihfahsih.functions.functions",
        "description": "dihfahsih.functions.functions",
        "peekOfCode": "def function2():\n    print(\"not empty\")",
        "detail": "dihfahsih.functions.functions",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "dihfahsih.functions.inputs",
        "description": "dihfahsih.functions.inputs",
        "peekOfCode": "def add(num1,num2):\n    return (num1+num2)\ndef get_input():\n    number1=int(input(\"Enter first value: \"))\n    number2=int(input(\"Enter second value: \" ))\n    result=add(number1,number2)\n    print(\"The summed value is: \", result)\nget_input()",
        "detail": "dihfahsih.functions.inputs",
        "documentation": {}
    },
    {
        "label": "get_input",
        "kind": 2,
        "importPath": "dihfahsih.functions.inputs",
        "description": "dihfahsih.functions.inputs",
        "peekOfCode": "def get_input():\n    number1=int(input(\"Enter first value: \"))\n    number2=int(input(\"Enter second value: \" ))\n    result=add(number1,number2)\n    print(\"The summed value is: \", result)\nget_input()",
        "detail": "dihfahsih.functions.inputs",
        "documentation": {}
    },
    {
        "label": "MutableList",
        "kind": 6,
        "importPath": "dihfahsih.immutability.main",
        "description": "dihfahsih.immutability.main",
        "peekOfCode": "class MutableList:\n    def __init__(self, values):\n        self.values=values\nlst=MutableList([1,2,3,4])\n#mutable class dicts\nclass MutableDict:\n    def __init__(self, values):\n        self.values=values\ndct=MutableDict({'a':4,'b':2})\nclass MutableData:",
        "detail": "dihfahsih.immutability.main",
        "documentation": {}
    },
    {
        "label": "MutableDict",
        "kind": 6,
        "importPath": "dihfahsih.immutability.main",
        "description": "dihfahsih.immutability.main",
        "peekOfCode": "class MutableDict:\n    def __init__(self, values):\n        self.values=values\ndct=MutableDict({'a':4,'b':2})\nclass MutableData:\n    def __init__(self, data):\n        self.data=list(data)\nmutable_data=MutableData([1,3,4])\n#immutable int class\nclass ImmutableInt:",
        "detail": "dihfahsih.immutability.main",
        "documentation": {}
    },
    {
        "label": "MutableData",
        "kind": 6,
        "importPath": "dihfahsih.immutability.main",
        "description": "dihfahsih.immutability.main",
        "peekOfCode": "class MutableData:\n    def __init__(self, data):\n        self.data=list(data)\nmutable_data=MutableData([1,3,4])\n#immutable int class\nclass ImmutableInt:\n    def __init__(self, values):\n        self.values=values\nnum=ImmutableInt(5)\n#immutable tuples",
        "detail": "dihfahsih.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImmutableInt",
        "kind": 6,
        "importPath": "dihfahsih.immutability.main",
        "description": "dihfahsih.immutability.main",
        "peekOfCode": "class ImmutableInt:\n    def __init__(self, values):\n        self.values=values\nnum=ImmutableInt(5)\n#immutable tuples\nclass ImmutableTuple:\n    def __init__(self, data):\n        self.data=tuple(data)\n        self.data=(1,3,4,5,6)\n        self.data[0]=2",
        "detail": "dihfahsih.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImmutableTuple",
        "kind": 6,
        "importPath": "dihfahsih.immutability.main",
        "description": "dihfahsih.immutability.main",
        "peekOfCode": "class ImmutableTuple:\n    def __init__(self, data):\n        self.data=tuple(data)\n        self.data=(1,3,4,5,6)\n        self.data[0]=2\n        print(self.data)\nnum=ImmutableTuple([1,2,3,4])",
        "detail": "dihfahsih.immutability.main",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "dihfahsih.lists.first_code",
        "description": "dihfahsih.lists.first_code",
        "peekOfCode": "def hello():\n    print (\"hello world\")\nhello()",
        "detail": "dihfahsih.lists.first_code",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "dihfahsih.lists.first_code",
        "description": "dihfahsih.lists.first_code",
        "peekOfCode": "list1 = [\"John\", 2.5, True, 100]\nlist1[2] = 5\nlist1.append(\"Mary\")\nlist1.insert(3,False)\nprint(list1)\ndef hello():\n    print (\"hello world\")\nhello()",
        "detail": "dihfahsih.lists.first_code",
        "documentation": {}
    },
    {
        "label": "list1[2]",
        "kind": 5,
        "importPath": "dihfahsih.lists.first_code",
        "description": "dihfahsih.lists.first_code",
        "peekOfCode": "list1[2] = 5\nlist1.append(\"Mary\")\nlist1.insert(3,False)\nprint(list1)\ndef hello():\n    print (\"hello world\")\nhello()",
        "detail": "dihfahsih.lists.first_code",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "dihfahsih.loops.whileloops",
        "description": "dihfahsih.loops.whileloops",
        "peekOfCode": "sum = 0\ncount = 1\nwhile count <=10:\n    sum +=count\n    count += 1\n# print(\"Sum of the numbers from 1 to 10: \", sum)\n# print even numbers between 1 an 20\nnum=2\nwhile num <= 20:\n    # print(num)",
        "detail": "dihfahsih.loops.whileloops",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "dihfahsih.loops.whileloops",
        "description": "dihfahsih.loops.whileloops",
        "peekOfCode": "count = 1\nwhile count <=10:\n    sum +=count\n    count += 1\n# print(\"Sum of the numbers from 1 to 10: \", sum)\n# print even numbers between 1 an 20\nnum=2\nwhile num <= 20:\n    # print(num)\n    num +=2",
        "detail": "dihfahsih.loops.whileloops",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "dihfahsih.loops.whileloops",
        "description": "dihfahsih.loops.whileloops",
        "peekOfCode": "y = 6\nwhile y <=5:\n    print(\"Hello, World\")\n    y +=1\n# looping through strings\nstring = \"Python\"\nindex =1\nwhile index < len(string):\n    # print(string[index])\n    index +=1",
        "detail": "dihfahsih.loops.whileloops",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "dihfahsih.loops.whileloops",
        "description": "dihfahsih.loops.whileloops",
        "peekOfCode": "string = \"Python\"\nindex =1\nwhile index < len(string):\n    # print(string[index])\n    index +=1\n# counting down from a specified number\n# num = int(input(\"Enter a number to count: \"))\nwhile num > 0:\n    # print(num)\n    num -=10",
        "detail": "dihfahsih.loops.whileloops",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "dihfahsih.loops.whileloops",
        "description": "dihfahsih.loops.whileloops",
        "peekOfCode": "numbers = [1,2,3,4,5]\ntotal=1\nfor x in numbers:\n    total+=x\nprint(f\"Total: {total} of the list {numbers}\")",
        "detail": "dihfahsih.loops.whileloops",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "dihfahsih.OOP.Abstraction.main",
        "description": "dihfahsih.OOP.Abstraction.main",
        "peekOfCode": "class Solution(ABC):\n    def __init__(self):\n        print(\"Constructor\")\n    @abstractmethod\n    def method1(self):\n        print(\"This is an abstructed method\")\nclass ConcreteSolution(Solution):\n    def method1(self):\n        return super().method1()\nobj1=ConcreteSolution()",
        "detail": "dihfahsih.OOP.Abstraction.main",
        "documentation": {}
    },
    {
        "label": "ConcreteSolution",
        "kind": 6,
        "importPath": "dihfahsih.OOP.Abstraction.main",
        "description": "dihfahsih.OOP.Abstraction.main",
        "peekOfCode": "class ConcreteSolution(Solution):\n    def method1(self):\n        return super().method1()\nobj1=ConcreteSolution()\nobj1.method1()",
        "detail": "dihfahsih.OOP.Abstraction.main",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "dihfahsih.OOP.class_1",
        "description": "dihfahsih.OOP.class_1",
        "peekOfCode": "class Human:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    def introduce(self):\n        print(f\"Hello, my name is {self.name}, I'm {self.age} years old and my gender is {self.gender}.\")\n# Creating objects    \nperson1 = Human('Alice', 30, 'Female')\nperson2 = Human('Ali', 20, 'Male')",
        "detail": "dihfahsih.OOP.class_1",
        "documentation": {}
    },
    {
        "label": "Man",
        "kind": 6,
        "importPath": "dihfahsih.OOP.class_1",
        "description": "dihfahsih.OOP.class_1",
        "peekOfCode": "class Man(Human):\n    def __init__(self, name, age, gender, college, weight):\n        super().__init__(name, age, gender)\n        self.college = college\n        self.weight = weight\n# Creating a Man object\nman1 = Man('John', 25, 'Male', 'XYZ College', 75)\n# Accessing attributes of the Man object\nprint(f\"{man1.name} attends {man1.college} and weighs {man1.weight} kgs.\")",
        "detail": "dihfahsih.OOP.class_1",
        "documentation": {}
    },
    {
        "label": "person1",
        "kind": 5,
        "importPath": "dihfahsih.OOP.class_1",
        "description": "dihfahsih.OOP.class_1",
        "peekOfCode": "person1 = Human('Alice', 30, 'Female')\nperson2 = Human('Ali', 20, 'Male')\nperson1.introduce()\nperson2.introduce()\nclass Man(Human):\n    def __init__(self, name, age, gender, college, weight):\n        super().__init__(name, age, gender)\n        self.college = college\n        self.weight = weight\n# Creating a Man object",
        "detail": "dihfahsih.OOP.class_1",
        "documentation": {}
    },
    {
        "label": "person2",
        "kind": 5,
        "importPath": "dihfahsih.OOP.class_1",
        "description": "dihfahsih.OOP.class_1",
        "peekOfCode": "person2 = Human('Ali', 20, 'Male')\nperson1.introduce()\nperson2.introduce()\nclass Man(Human):\n    def __init__(self, name, age, gender, college, weight):\n        super().__init__(name, age, gender)\n        self.college = college\n        self.weight = weight\n# Creating a Man object\nman1 = Man('John', 25, 'Male', 'XYZ College', 75)",
        "detail": "dihfahsih.OOP.class_1",
        "documentation": {}
    },
    {
        "label": "man1",
        "kind": 5,
        "importPath": "dihfahsih.OOP.class_1",
        "description": "dihfahsih.OOP.class_1",
        "peekOfCode": "man1 = Man('John', 25, 'Male', 'XYZ College', 75)\n# Accessing attributes of the Man object\nprint(f\"{man1.name} attends {man1.college} and weighs {man1.weight} kgs.\")",
        "detail": "dihfahsih.OOP.class_1",
        "documentation": {}
    },
    {
        "label": "Vehicle",
        "kind": 6,
        "importPath": "dihfahsih.OOP.code_of_thought",
        "description": "dihfahsih.OOP.code_of_thought",
        "peekOfCode": "class Vehicle:\n    def printConsumption(self):\n        print('none')\nclass MotorVehicle(Vehicle):\n    def printConsumption(self):\n        print('medium')\nclass Car(MotorVehicle):\n    pass\ncar=Car()\ncar.printConsumption()",
        "detail": "dihfahsih.OOP.code_of_thought",
        "documentation": {}
    },
    {
        "label": "MotorVehicle",
        "kind": 6,
        "importPath": "dihfahsih.OOP.code_of_thought",
        "description": "dihfahsih.OOP.code_of_thought",
        "peekOfCode": "class MotorVehicle(Vehicle):\n    def printConsumption(self):\n        print('medium')\nclass Car(MotorVehicle):\n    pass\ncar=Car()\ncar.printConsumption()",
        "detail": "dihfahsih.OOP.code_of_thought",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "dihfahsih.OOP.code_of_thought",
        "description": "dihfahsih.OOP.code_of_thought",
        "peekOfCode": "class Car(MotorVehicle):\n    pass\ncar=Car()\ncar.printConsumption()",
        "detail": "dihfahsih.OOP.code_of_thought",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "dihfahsih.OOP.oop_app",
        "description": "dihfahsih.OOP.oop_app",
        "peekOfCode": "class Shape:\n    def area(self):\n        pass\n    def perimeter(self):\n        pass\n# Encapsulation: We'll encapsulate the properties and methods of each shape within its respective class.\n# Inheritance: Different shapes will inherit from the Shape class and implement their specific functionalities.\n# Polymorphism: We will use polymorphism to calculate the area and perimeter of different shapes using the same method names.\n# Define a Rectangle class inheriting from Shape\nclass Rectangle(Shape):",
        "detail": "dihfahsih.OOP.oop_app",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "dihfahsih.OOP.oop_app",
        "description": "dihfahsih.OOP.oop_app",
        "peekOfCode": "class Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):\n        return self.width * self.height\n    def perimeter(self):\n        return 2 * (self.width + self.height)\n# Define a Circle class inheriting from Shape\nclass Circle(Shape):",
        "detail": "dihfahsih.OOP.oop_app",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "dihfahsih.OOP.oop_app",
        "description": "dihfahsih.OOP.oop_app",
        "peekOfCode": "class Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return math.pi * self.radius ** 2\n    def perimeter(self):\n        return 2 * math.pi * self.radius\n# Define a Square class inheriting from Rectangle\nclass Square(Rectangle):\n    def __init__(self, side):",
        "detail": "dihfahsih.OOP.oop_app",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "dihfahsih.OOP.oop_app",
        "description": "dihfahsih.OOP.oop_app",
        "peekOfCode": "class Square(Rectangle):\n    def __init__(self, side):\n        super().__init__(side, side)\n# Example usage:\nif __name__ == \"__main__\":\n    rectangle = Rectangle(5, 4)\n    print(\"Rectangle Area:\", rectangle.area())\n    print(\"Rectangle Perimeter:\", rectangle.perimeter())\n    circle = Circle(7)\n    print(\"Circle Area:\", circle.area())",
        "detail": "dihfahsih.OOP.oop_app",
        "documentation": {}
    },
    {
        "label": "new_list",
        "kind": 5,
        "importPath": "dihfahsih.operations.list_operations",
        "description": "dihfahsih.operations.list_operations",
        "peekOfCode": "new_list = list1 + list2 \nprint(new_list)\n#clear() removes everything from a list\nlist2.clear()\nprint(list2)\n#count\ncount_items=new_list.count(20)\nprint(count_items)\n#sort(only sort numbers)\nunsorted_items=[29,3,0,1,5,80]",
        "detail": "dihfahsih.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "copied_list",
        "kind": 5,
        "importPath": "dihfahsih.operations.list_operations",
        "description": "dihfahsih.operations.list_operations",
        "peekOfCode": "copied_list = unsorted_items.copy()\nprint(copied_list)",
        "detail": "dihfahsih.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "slice_tuple",
        "kind": 5,
        "importPath": "dihfahsih.operations.tuple_operations",
        "description": "dihfahsih.operations.tuple_operations",
        "peekOfCode": "slice_tuple = tuple5[1:2:3]\nprint(slice_tuple)",
        "detail": "dihfahsih.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dihfahsih.string_functions.app",
        "description": "dihfahsih.string_functions.app",
        "peekOfCode": "def main():\n    input_string=input(\"Enter the string: \")\n    substring_to_replace=input(\"Enter sub string to replace: \")\n    replacement_sub_string=input(\"Enter the replacement: \")\n    #perform replacement operation\n    replaced_string = input_string.replace(substring_to_replace,replacement_sub_string)\n    #spliting the replaced string into a list of words\n    words_list = replaced_string.split()\n    #join the splitted words with a hyphen\n    hyphenated_string = \"-\".join(words_list)",
        "detail": "dihfahsih.string_functions.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "dihfahsih.string_functions.find_function",
        "description": "dihfahsih.string_functions.find_function",
        "peekOfCode": "index = sentence.find(word_to_find)\nif index != -1:\n    new_sentence=sentence.replace(word_to_find,replacement_word)\n    print(new_sentence)\nelse:\n    print(f\"{word_to_find} does not exist in the string\")",
        "detail": "dihfahsih.string_functions.find_function",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "dihfahsih.string_functions.join_function",
        "description": "dihfahsih.string_functions.join_function",
        "peekOfCode": "string2 = ['apple','banana','orange']\nwords=['Python','is','cool']",
        "detail": "dihfahsih.string_functions.join_function",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "dihfahsih.string_functions.replace_function",
        "description": "dihfahsih.string_functions.replace_function",
        "peekOfCode": "string1 = \"Hello World\"\nreplaced_string = string1.replace('o','O')\n# print(replaced_string)\nstring2 = \"I love python programming\"\nstring3=string2.replace(' ', '')\nprint(string3)\nstring4=\"abbbbshhdhhccc\"\nstring6=string4.replace('h','x')\nprint(string6)",
        "detail": "dihfahsih.string_functions.replace_function",
        "documentation": {}
    },
    {
        "label": "replaced_string",
        "kind": 5,
        "importPath": "dihfahsih.string_functions.replace_function",
        "description": "dihfahsih.string_functions.replace_function",
        "peekOfCode": "replaced_string = string1.replace('o','O')\n# print(replaced_string)\nstring2 = \"I love python programming\"\nstring3=string2.replace(' ', '')\nprint(string3)\nstring4=\"abbbbshhdhhccc\"\nstring6=string4.replace('h','x')\nprint(string6)",
        "detail": "dihfahsih.string_functions.replace_function",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "dihfahsih.string_functions.replace_function",
        "description": "dihfahsih.string_functions.replace_function",
        "peekOfCode": "string2 = \"I love python programming\"\nstring3=string2.replace(' ', '')\nprint(string3)\nstring4=\"abbbbshhdhhccc\"\nstring6=string4.replace('h','x')\nprint(string6)",
        "detail": "dihfahsih.string_functions.replace_function",
        "documentation": {}
    },
    {
        "label": "is_teacher",
        "kind": 5,
        "importPath": "dihfahsih.hello_world",
        "description": "dihfahsih.hello_world",
        "peekOfCode": "is_teacher = True\nprint(month)\nprint(age)\nprint(is_teacher)",
        "detail": "dihfahsih.hello_world",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "dihfahsih.quiz",
        "description": "dihfahsih.quiz",
        "peekOfCode": "class A:\n    def __init__(self,new):\n        self.new = new.new\n    def a(self):\n        pass\ng = A(\"G\")\ng.a()",
        "detail": "dihfahsih.quiz",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "dihfahsih.quiz",
        "description": "dihfahsih.quiz",
        "peekOfCode": "g = A(\"G\")\ng.a()",
        "detail": "dihfahsih.quiz",
        "documentation": {}
    },
    {
        "label": "string_input",
        "kind": 5,
        "importPath": "Emma.Assignment 14.application",
        "description": "Emma.Assignment 14.application",
        "peekOfCode": "string_input = input(\"Enter your string : \")\nstring_to_be_counted= str(input(\"put in the value to be counted : \"))\nstring_Up=string_input.upper()\nstring_low=string_input.lower()\nstring_reversed = ''.join(reversed(string_low))\nstring_strip=string_input.strip()\nstring_count=string_input.count(string_to_be_counted)\n# printed out\nprint(f\"This is the input string : {string_input}\")\nprint(f\"This is the string to be counted : {string_to_be_counted}\")",
        "detail": "Emma.Assignment 14.application",
        "documentation": {}
    },
    {
        "label": "string_reversed",
        "kind": 5,
        "importPath": "Emma.Assignment 14.application",
        "description": "Emma.Assignment 14.application",
        "peekOfCode": "string_reversed = ''.join(reversed(string_low))\nstring_strip=string_input.strip()\nstring_count=string_input.count(string_to_be_counted)\n# printed out\nprint(f\"This is the input string : {string_input}\")\nprint(f\"This is the string to be counted : {string_to_be_counted}\")\nprint(f\"This is the string in uppercase : {string_Up}\")\nprint(f\"This is the string in lowercase : {string_low}\")\nprint(f\"This is the reversed version of the inputed string : {string_reversed}\")\nprint(f\"This is the string when stripped of spaces : {string_strip}\")",
        "detail": "Emma.Assignment 14.application",
        "documentation": {}
    },
    {
        "label": "Abstractclass",
        "kind": 6,
        "importPath": "Emma.assignment_12.Abstraction",
        "description": "Emma.assignment_12.Abstraction",
        "peekOfCode": "class Abstractclass(ABC):\n    def print(self):\n        print(\"Abstract class - Normal method\")\n    @abstractmethod\n    def printabstract(self):\n        print(\"Abstract class - Abstract method\")\nclass Childclass(Abstractclass):\n    def print(self):\n        print(\"this is the child class\")\nchild=Childclass()",
        "detail": "Emma.assignment_12.Abstraction",
        "documentation": {}
    },
    {
        "label": "Childclass",
        "kind": 6,
        "importPath": "Emma.assignment_12.Abstraction",
        "description": "Emma.assignment_12.Abstraction",
        "peekOfCode": "class Childclass(Abstractclass):\n    def print(self):\n        print(\"this is the child class\")\nchild=Childclass()\nchild.print()\n#example 2\nclass Join(ABC):\n    def __init__(self,name,age):\n        self.name=name\n        self.age=age",
        "detail": "Emma.assignment_12.Abstraction",
        "documentation": {}
    },
    {
        "label": "Join",
        "kind": 6,
        "importPath": "Emma.assignment_12.Abstraction",
        "description": "Emma.assignment_12.Abstraction",
        "peekOfCode": "class Join(ABC):\n    def __init__(self,name,age):\n        self.name=name\n        self.age=age\n    def Naming(self):\n        print(f\"my name is  {self.name}\")\n    @abstractmethod\n    def Aging(self):\n        print(f\"i am {self.age} years old\")\nP1=Join(\"Chris\",61)",
        "detail": "Emma.assignment_12.Abstraction",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "Emma.assignment_12.Encapsulation",
        "description": "Emma.assignment_12.Encapsulation",
        "peekOfCode": "class Person:\n    name=\"Code as it is \"\n    def __init__(self):\n        self.age=35\n        self.__salary=1000\nclass employee(Person):\n    def __init__(self):\n        super().__init__()\n        print(self.age)\n        print(self.__salary)",
        "detail": "Emma.assignment_12.Encapsulation",
        "documentation": {}
    },
    {
        "label": "employee",
        "kind": 6,
        "importPath": "Emma.assignment_12.Encapsulation",
        "description": "Emma.assignment_12.Encapsulation",
        "peekOfCode": "class employee(Person):\n    def __init__(self):\n        super().__init__()\n        print(self.age)\n        print(self.__salary)\nemployee()\n#example 2\nclass Fruits():\n    def __init__(self,name,type):\n        self.name=\"Greg\"",
        "detail": "Emma.assignment_12.Encapsulation",
        "documentation": {}
    },
    {
        "label": "Fruits",
        "kind": 6,
        "importPath": "Emma.assignment_12.Encapsulation",
        "description": "Emma.assignment_12.Encapsulation",
        "peekOfCode": "class Fruits():\n    def __init__(self,name,type):\n        self.name=\"Greg\"\n        self.__type=7\n    def namig(self):\n        print(self.name)\n    def type(self):\n        print(self.__type)\nclass mango(Fruits):\n    def __init__():",
        "detail": "Emma.assignment_12.Encapsulation",
        "documentation": {}
    },
    {
        "label": "mango",
        "kind": 6,
        "importPath": "Emma.assignment_12.Encapsulation",
        "description": "Emma.assignment_12.Encapsulation",
        "peekOfCode": "class mango(Fruits):\n    def __init__():\n        super().__init__()",
        "detail": "Emma.assignment_12.Encapsulation",
        "documentation": {}
    },
    {
        "label": "Trousers",
        "kind": 6,
        "importPath": "Emma.Assignment_13.Abstraction",
        "description": "Emma.Assignment_13.Abstraction",
        "peekOfCode": "class Trousers(ABC):\n    def __init__(self,name,size):\n        self.name = name\n        self.size = size\n    @abstractmethod\n    def Name(self):\n        print(f\"This trouser is called a {self.name}\")\n    def Size(self):\n        print(f\"Its size is {self.size}\")\nclass Cargo_trous(Trousers):",
        "detail": "Emma.Assignment_13.Abstraction",
        "documentation": {}
    },
    {
        "label": "Cargo_trous",
        "kind": 6,
        "importPath": "Emma.Assignment_13.Abstraction",
        "description": "Emma.Assignment_13.Abstraction",
        "peekOfCode": "class Cargo_trous(Trousers):\n    def __init__(self, name, size):\n        super().__init__(name, size)\n    def cargo_name(self):\n        super().Name()\nT = Cargo_trous(\"Plain cargoes\",34)\nT.Name()\nT.Size()\n  #Answer 2\nclass Phone(ABC):",
        "detail": "Emma.Assignment_13.Abstraction",
        "documentation": {}
    },
    {
        "label": "Phone",
        "kind": 6,
        "importPath": "Emma.Assignment_13.Abstraction",
        "description": "Emma.Assignment_13.Abstraction",
        "peekOfCode": "class Phone(ABC):\n    def __init__(self,model,price):\n        self.model=model\n        self.price=price\n    @abstractmethod\n    def Mod_print(self):\n        print(f\"its model is {self.model}\")\n        return\n    def price_print(self):\n        print(f\"its price is {self.price} USD\")",
        "detail": "Emma.Assignment_13.Abstraction",
        "documentation": {}
    },
    {
        "label": "Iphones",
        "kind": 6,
        "importPath": "Emma.Assignment_13.Abstraction",
        "description": "Emma.Assignment_13.Abstraction",
        "peekOfCode": "class Iphones(Phone):\n    def Iphone_mod(self):\n        super().Mod_print()\n        return\nI15 = Iphones(\"I15\",1200)\nI15.Iphone_mod()",
        "detail": "Emma.Assignment_13.Abstraction",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "Emma.Assignment_13.Abstraction",
        "description": "Emma.Assignment_13.Abstraction",
        "peekOfCode": "T = Cargo_trous(\"Plain cargoes\",34)\nT.Name()\nT.Size()\n  #Answer 2\nclass Phone(ABC):\n    def __init__(self,model,price):\n        self.model=model\n        self.price=price\n    @abstractmethod\n    def Mod_print(self):",
        "detail": "Emma.Assignment_13.Abstraction",
        "documentation": {}
    },
    {
        "label": "I15",
        "kind": 5,
        "importPath": "Emma.Assignment_13.Abstraction",
        "description": "Emma.Assignment_13.Abstraction",
        "peekOfCode": "I15 = Iphones(\"I15\",1200)\nI15.Iphone_mod()",
        "detail": "Emma.Assignment_13.Abstraction",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "Emma.Assignment_13.encapsulation",
        "description": "Emma.Assignment_13.encapsulation",
        "peekOfCode": "class Dog:\n    def __init__(self,name,age):\n        self.name = name\n        self._age = age\n    def getName(self):\n        print(f\"its name is {self.name}\")\n    def getAge(self):\n        print(f\"its age is {self._age} years\")\nD = Dog(\"Spick\",2)\nD.getName()",
        "detail": "Emma.Assignment_13.encapsulation",
        "documentation": {}
    },
    {
        "label": "Nuts",
        "kind": 6,
        "importPath": "Emma.Assignment_13.encapsulation",
        "description": "Emma.Assignment_13.encapsulation",
        "peekOfCode": "class Nuts:\n    def __init__(self,name,breed):\n        self.name = name\n        self._breed = breed\n    def getId(self):\n        print(f\"its ID is {self.name}\")\n    def getbreed(self):\n        print(f\"its breed is {self._breed} years\")\nD = Nuts(\"wallnut\",\"norma\")\nD.getId()",
        "detail": "Emma.Assignment_13.encapsulation",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 5,
        "importPath": "Emma.Assignment_13.encapsulation",
        "description": "Emma.Assignment_13.encapsulation",
        "peekOfCode": "D = Dog(\"Spick\",2)\nD.getName()\nD.getAge()\n  #Answer 2\nclass Nuts:\n    def __init__(self,name,breed):\n        self.name = name\n        self._breed = breed\n    def getId(self):\n        print(f\"its ID is {self.name}\")",
        "detail": "Emma.Assignment_13.encapsulation",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 5,
        "importPath": "Emma.Assignment_13.encapsulation",
        "description": "Emma.Assignment_13.encapsulation",
        "peekOfCode": "D = Nuts(\"wallnut\",\"norma\")\nD.getId()\nD.getbreed()",
        "detail": "Emma.Assignment_13.encapsulation",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Emma.assignment_15.application",
        "description": "Emma.assignment_15.application",
        "peekOfCode": "def main():\n    start = int(input(\"Enter start of the range : \"))\n    end = int(input(\"Enter end of the range : \"))\n    step = int(input(\"Enter number of steps to skip : \"))\n    for i in range(start,end,step):\n        print(i)\nmain()",
        "detail": "Emma.assignment_15.application",
        "documentation": {}
    },
    {
        "label": "file1",
        "kind": 5,
        "importPath": "Emma.assignment_15.read_file",
        "description": "Emma.assignment_15.read_file",
        "peekOfCode": "file1 = open(\"first_file.txt\",\"r\")\nprint(file1.read())\n# second example\nfile2 = open(\"second_file.txt\",\"r\")\nprint(file2.read())",
        "detail": "Emma.assignment_15.read_file",
        "documentation": {}
    },
    {
        "label": "file2",
        "kind": 5,
        "importPath": "Emma.assignment_15.read_file",
        "description": "Emma.assignment_15.read_file",
        "peekOfCode": "file2 = open(\"second_file.txt\",\"r\")\nprint(file2.read())",
        "detail": "Emma.assignment_15.read_file",
        "documentation": {}
    },
    {
        "label": "file_name",
        "kind": 5,
        "importPath": "Emma.assignment_15.write",
        "description": "Emma.assignment_15.write",
        "peekOfCode": "file_name = open(\"first_file.txt\",\"w\")\nfile_name.write(\"Hello, this is the first text\")\nfile_name.close()\n#second example\nfile2 = open(\"second_file.txt\",\"w\")\nfile2.write(\"This is the second file text\")\nfile2.close()",
        "detail": "Emma.assignment_15.write",
        "documentation": {}
    },
    {
        "label": "file2",
        "kind": 5,
        "importPath": "Emma.assignment_15.write",
        "description": "Emma.assignment_15.write",
        "peekOfCode": "file2 = open(\"second_file.txt\",\"w\")\nfile2.write(\"This is the second file text\")\nfile2.close()",
        "detail": "Emma.assignment_15.write",
        "documentation": {}
    },
    {
        "label": "Area_square",
        "kind": 6,
        "importPath": "Emma.assignment_16.shape_calc",
        "description": "Emma.assignment_16.shape_calc",
        "peekOfCode": "class Area_square():\n    def __init__(self,length):\n        self.length=length\n    def calculate_Area(self):\n        Answer = self.length **2\n        print(\" ____________\")\n        print(\"|            |\")\n        print(\"|            |\", self.length,units)\n        print(\"|            |\")\n        print(\" ------------\")",
        "detail": "Emma.assignment_16.shape_calc",
        "documentation": {}
    },
    {
        "label": "Area_rectangle",
        "kind": 6,
        "importPath": "Emma.assignment_16.shape_calc",
        "description": "Emma.assignment_16.shape_calc",
        "peekOfCode": "class Area_rectangle(Area_square):\n    def __init__(self,length,width):\n        super().__init__(length)\n        self.width=width\n    def calculate_Area(self):\n        Answer= self.length*self.width\n        print(\" -------------\")\n        print(\"|             |\" ,self.length,units)\n        print(\"|             |\")\n        print(\" -------------\")",
        "detail": "Emma.assignment_16.shape_calc",
        "documentation": {}
    },
    {
        "label": "Area_triangle",
        "kind": 6,
        "importPath": "Emma.assignment_16.shape_calc",
        "description": "Emma.assignment_16.shape_calc",
        "peekOfCode": "class Area_triangle(Area_rectangle):\n    def __init__(self, length, width):\n        super().__init__(length, width)\n    def calculate_Area(self):\n        Answer = 1/2 * self.length*self.width\n        print(\"     /\\    \")\n        print(\"    /  \\  \")\n        print(\"   /    \\ \" \"height : \",self.width,units)\n        print(\"  /      \\ \")\n        print(\"  -------- \")",
        "detail": "Emma.assignment_16.shape_calc",
        "documentation": {}
    },
    {
        "label": "Area_circle",
        "kind": 6,
        "importPath": "Emma.assignment_16.shape_calc",
        "description": "Emma.assignment_16.shape_calc",
        "peekOfCode": "class Area_circle(Area_square):\n    def __init__(self, length):\n        super().__init__(length)\n    def calculate_Area(self):\n        Answer = 3.14 * self.length**2\n        print(\"   ---   \")\n        print(\" /     \\ \")\n        print(\"|----   |\" ,\"radius : \", self.length,units)\n        print(\" \\     / \")\n        print(\"   --- \")",
        "detail": "Emma.assignment_16.shape_calc",
        "documentation": {}
    },
    {
        "label": "perimeter_square",
        "kind": 6,
        "importPath": "Emma.assignment_16.shape_calc",
        "description": "Emma.assignment_16.shape_calc",
        "peekOfCode": "class perimeter_square:\n    def __init__(self,length):\n        self.length=length\n    def calculate_perimeter(self):\n        Answer = 4*self.length\n        print(\" ____________\")\n        print(\"|            |\")\n        print(\"|            |\", self.length,units)\n        print(\"|            |\")\n        print(\" ------------\")",
        "detail": "Emma.assignment_16.shape_calc",
        "documentation": {}
    },
    {
        "label": "perimeter_rectangle",
        "kind": 6,
        "importPath": "Emma.assignment_16.shape_calc",
        "description": "Emma.assignment_16.shape_calc",
        "peekOfCode": "class perimeter_rectangle(perimeter_square):\n    def __init__(self,length,width):\n        super().__init__(length)\n        self.width = width\n    def calculate_perimeter(self):\n        Answer = 2*(self.length+self.width)\n        print(\" -------------\")\n        print(\"|             |\" ,self.length,units)\n        print(\"|             |\")\n        print(\" -------------\")",
        "detail": "Emma.assignment_16.shape_calc",
        "documentation": {}
    },
    {
        "label": "perimeter_triangle",
        "kind": 6,
        "importPath": "Emma.assignment_16.shape_calc",
        "description": "Emma.assignment_16.shape_calc",
        "peekOfCode": "class perimeter_triangle(perimeter_rectangle):\n    def __init__(self, length, width,height):\n        super().__init__(length, width)\n        self.height=height\n    def calculate_perimeter(self):\n        Answer = self.length + self.width + self.height\n        print(\"     /\\    \")\n        print(\"    /  \\  \")\n        print(\"   /    \\ \" \"height : \",self.width,units)\n        print(\"  /      \\ \")",
        "detail": "Emma.assignment_16.shape_calc",
        "documentation": {}
    },
    {
        "label": "perimeter_circle",
        "kind": 6,
        "importPath": "Emma.assignment_16.shape_calc",
        "description": "Emma.assignment_16.shape_calc",
        "peekOfCode": "class perimeter_circle(perimeter_square):\n    def __init__(self, length):\n        super().__init__(length)\n    def calculate_perimeter(self):\n        Answer = 2*3.14*self.length\n        print(\"   ---\")\n        print(\" /     \\ \")\n        print(\"|----   |\" ,\"radius : \", self.length,units)\n        print(\" \\     /\")\n        print(\"   --- \")",
        "detail": "Emma.assignment_16.shape_calc",
        "documentation": {}
    },
    {
        "label": "units",
        "kind": 5,
        "importPath": "Emma.assignment_16.shape_calc",
        "description": "Emma.assignment_16.shape_calc",
        "peekOfCode": "units = input(\"what units are you using ? \\n: \")\nprint(\"What operation would you like to do ?\")\nprint(\"1. Area of a square     5. perimeter of a Square \\n2. Area of a rectangle  6. perimeter of a rectangle \\n3. Area of a triangle   7. perimeter of a triangle \\n4. Area of a circle     8. perimeter of a circle\")\nInput1 = input(\"Put in your option \\n :\")\nif Input1 == \"1\":\n    S = Area_square(int(input(\"put in your value : \")))\n    S.calculate_Area()\nelif Input1 == \"2\":\n    R = Area_rectangle(int(input(\"Put in your length : \")),int(input(\"Put in your width : \")))\n    R.calculate_Area()",
        "detail": "Emma.assignment_16.shape_calc",
        "documentation": {}
    },
    {
        "label": "Input1",
        "kind": 5,
        "importPath": "Emma.assignment_16.shape_calc",
        "description": "Emma.assignment_16.shape_calc",
        "peekOfCode": "Input1 = input(\"Put in your option \\n :\")\nif Input1 == \"1\":\n    S = Area_square(int(input(\"put in your value : \")))\n    S.calculate_Area()\nelif Input1 == \"2\":\n    R = Area_rectangle(int(input(\"Put in your length : \")),int(input(\"Put in your width : \")))\n    R.calculate_Area()\nelif Input1 == \"3\":\n    T = Area_triangle(int(input(\"Put in your Base : \")),int(input(\"Put in your height : \")))\n    T.calculate_Area()",
        "detail": "Emma.assignment_16.shape_calc",
        "documentation": {}
    },
    {
        "label": "Age",
        "kind": 5,
        "importPath": "Emma.assignment_2.case_sensitivity",
        "description": "Emma.assignment_2.case_sensitivity",
        "peekOfCode": "Age = 13\nage = 12\nClaSs = \"second\"\nclAss = \"third\"\nLeveL = \"infinity\"\nlevel = \"finity\"\nprint(Age)\nprint(age)",
        "detail": "Emma.assignment_2.case_sensitivity",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Emma.assignment_2.case_sensitivity",
        "description": "Emma.assignment_2.case_sensitivity",
        "peekOfCode": "age = 12\nClaSs = \"second\"\nclAss = \"third\"\nLeveL = \"infinity\"\nlevel = \"finity\"\nprint(Age)\nprint(age)",
        "detail": "Emma.assignment_2.case_sensitivity",
        "documentation": {}
    },
    {
        "label": "ClaSs",
        "kind": 5,
        "importPath": "Emma.assignment_2.case_sensitivity",
        "description": "Emma.assignment_2.case_sensitivity",
        "peekOfCode": "ClaSs = \"second\"\nclAss = \"third\"\nLeveL = \"infinity\"\nlevel = \"finity\"\nprint(Age)\nprint(age)",
        "detail": "Emma.assignment_2.case_sensitivity",
        "documentation": {}
    },
    {
        "label": "clAss",
        "kind": 5,
        "importPath": "Emma.assignment_2.case_sensitivity",
        "description": "Emma.assignment_2.case_sensitivity",
        "peekOfCode": "clAss = \"third\"\nLeveL = \"infinity\"\nlevel = \"finity\"\nprint(Age)\nprint(age)",
        "detail": "Emma.assignment_2.case_sensitivity",
        "documentation": {}
    },
    {
        "label": "LeveL",
        "kind": 5,
        "importPath": "Emma.assignment_2.case_sensitivity",
        "description": "Emma.assignment_2.case_sensitivity",
        "peekOfCode": "LeveL = \"infinity\"\nlevel = \"finity\"\nprint(Age)\nprint(age)",
        "detail": "Emma.assignment_2.case_sensitivity",
        "documentation": {}
    },
    {
        "label": "level",
        "kind": 5,
        "importPath": "Emma.assignment_2.case_sensitivity",
        "description": "Emma.assignment_2.case_sensitivity",
        "peekOfCode": "level = \"finity\"\nprint(Age)\nprint(age)",
        "detail": "Emma.assignment_2.case_sensitivity",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Emma.assignment_2.casting",
        "description": "Emma.assignment_2.casting",
        "peekOfCode": "name = \"Alexander\"\nlevel = 1\nrate = 1.3\nis_high = True\nprint(type(name))\nprint(type(level))\nprint(type(rate))\nprint(type(is_high))",
        "detail": "Emma.assignment_2.casting",
        "documentation": {}
    },
    {
        "label": "level",
        "kind": 5,
        "importPath": "Emma.assignment_2.casting",
        "description": "Emma.assignment_2.casting",
        "peekOfCode": "level = 1\nrate = 1.3\nis_high = True\nprint(type(name))\nprint(type(level))\nprint(type(rate))\nprint(type(is_high))",
        "detail": "Emma.assignment_2.casting",
        "documentation": {}
    },
    {
        "label": "rate",
        "kind": 5,
        "importPath": "Emma.assignment_2.casting",
        "description": "Emma.assignment_2.casting",
        "peekOfCode": "rate = 1.3\nis_high = True\nprint(type(name))\nprint(type(level))\nprint(type(rate))\nprint(type(is_high))",
        "detail": "Emma.assignment_2.casting",
        "documentation": {}
    },
    {
        "label": "is_high",
        "kind": 5,
        "importPath": "Emma.assignment_2.casting",
        "description": "Emma.assignment_2.casting",
        "peekOfCode": "is_high = True\nprint(type(name))\nprint(type(level))\nprint(type(rate))\nprint(type(is_high))",
        "detail": "Emma.assignment_2.casting",
        "documentation": {}
    },
    {
        "label": "level",
        "kind": 5,
        "importPath": "Emma.assignment_2.delete_variable",
        "description": "Emma.assignment_2.delete_variable",
        "peekOfCode": "level = (3) \nstage = 0\nfloor = \"first\" \nprint(level)\nprint(stage)\nprint(floor)\ndel(level)\nprint(level)\nprint(stage)\nprint(floor)",
        "detail": "Emma.assignment_2.delete_variable",
        "documentation": {}
    },
    {
        "label": "stage",
        "kind": 5,
        "importPath": "Emma.assignment_2.delete_variable",
        "description": "Emma.assignment_2.delete_variable",
        "peekOfCode": "stage = 0\nfloor = \"first\" \nprint(level)\nprint(stage)\nprint(floor)\ndel(level)\nprint(level)\nprint(stage)\nprint(floor)",
        "detail": "Emma.assignment_2.delete_variable",
        "documentation": {}
    },
    {
        "label": "floor",
        "kind": 5,
        "importPath": "Emma.assignment_2.delete_variable",
        "description": "Emma.assignment_2.delete_variable",
        "peekOfCode": "floor = \"first\" \nprint(level)\nprint(stage)\nprint(floor)\ndel(level)\nprint(level)\nprint(stage)\nprint(floor)",
        "detail": "Emma.assignment_2.delete_variable",
        "documentation": {}
    },
    {
        "label": "PoleInHole",
        "kind": 5,
        "importPath": "Emma.assignment_2.variable_conven",
        "description": "Emma.assignment_2.variable_conven",
        "peekOfCode": "PoleInHole = 10\npoleInHole = 20\npole_in_Hole = 30\nprint(PoleInHole)\nprint(poleInHole)\nprint(Pole_In_Hole)",
        "detail": "Emma.assignment_2.variable_conven",
        "documentation": {}
    },
    {
        "label": "poleInHole",
        "kind": 5,
        "importPath": "Emma.assignment_2.variable_conven",
        "description": "Emma.assignment_2.variable_conven",
        "peekOfCode": "poleInHole = 20\npole_in_Hole = 30\nprint(PoleInHole)\nprint(poleInHole)\nprint(Pole_In_Hole)",
        "detail": "Emma.assignment_2.variable_conven",
        "documentation": {}
    },
    {
        "label": "pole_in_Hole",
        "kind": 5,
        "importPath": "Emma.assignment_2.variable_conven",
        "description": "Emma.assignment_2.variable_conven",
        "peekOfCode": "pole_in_Hole = 30\nprint(PoleInHole)\nprint(poleInHole)\nprint(Pole_In_Hole)",
        "detail": "Emma.assignment_2.variable_conven",
        "documentation": {}
    },
    {
        "label": "Signed_in",
        "kind": 5,
        "importPath": "Emma.assignment_2.variable_type",
        "description": "Emma.assignment_2.variable_type",
        "peekOfCode": "Signed_in = True\nName = \"James\"\nAge = 20\nrating = 1.2\nprint(type(Signed_in))\nprint(type(Name))\nprint(type(Age))\nprint(type(rating))",
        "detail": "Emma.assignment_2.variable_type",
        "documentation": {}
    },
    {
        "label": "Name",
        "kind": 5,
        "importPath": "Emma.assignment_2.variable_type",
        "description": "Emma.assignment_2.variable_type",
        "peekOfCode": "Name = \"James\"\nAge = 20\nrating = 1.2\nprint(type(Signed_in))\nprint(type(Name))\nprint(type(Age))\nprint(type(rating))",
        "detail": "Emma.assignment_2.variable_type",
        "documentation": {}
    },
    {
        "label": "Age",
        "kind": 5,
        "importPath": "Emma.assignment_2.variable_type",
        "description": "Emma.assignment_2.variable_type",
        "peekOfCode": "Age = 20\nrating = 1.2\nprint(type(Signed_in))\nprint(type(Name))\nprint(type(Age))\nprint(type(rating))",
        "detail": "Emma.assignment_2.variable_type",
        "documentation": {}
    },
    {
        "label": "rating",
        "kind": 5,
        "importPath": "Emma.assignment_2.variable_type",
        "description": "Emma.assignment_2.variable_type",
        "peekOfCode": "rating = 1.2\nprint(type(Signed_in))\nprint(type(Name))\nprint(type(Age))\nprint(type(rating))",
        "detail": "Emma.assignment_2.variable_type",
        "documentation": {}
    },
    {
        "label": "addx",
        "kind": 2,
        "importPath": "Emma.Assignment_9.Bank_withdrawal",
        "description": "Emma.Assignment_9.Bank_withdrawal",
        "peekOfCode": "def addx(a,b):\n    Answer=int(a)+int(b)\n    print(\"This is your new account balance : \",Answer)\n    return\n# Withdrawal function\ndef subx(s,b):\n    Answer=int(b)-int(s)\n    print(\"this is your new account balance :\",Answer)\n    return;\n#Account balance",
        "detail": "Emma.Assignment_9.Bank_withdrawal",
        "documentation": {}
    },
    {
        "label": "subx",
        "kind": 2,
        "importPath": "Emma.Assignment_9.Bank_withdrawal",
        "description": "Emma.Assignment_9.Bank_withdrawal",
        "peekOfCode": "def subx(s,b):\n    Answer=int(b)-int(s)\n    print(\"this is your new account balance :\",Answer)\n    return;\n#Account balance\nb=10000\nprint(\"Your Account balance : \",b)\n# bank operation function\ndef bank_op():\n    print(\"What would you like to do ?\")",
        "detail": "Emma.Assignment_9.Bank_withdrawal",
        "documentation": {}
    },
    {
        "label": "bank_op",
        "kind": 2,
        "importPath": "Emma.Assignment_9.Bank_withdrawal",
        "description": "Emma.Assignment_9.Bank_withdrawal",
        "peekOfCode": "def bank_op():\n    print(\"What would you like to do ?\")\n    print(\"A : Withdraw\")\n    print(\"B : Deposit\")\n    print(\"C : Exit\")\n    option_selected = input(\"Enter your selected option :\")\n    if  option_selected == \"A\" :\n        s=input(\"put in your value to be withdrawn :\")\n        subx(s,b)\n    elif option_selected== \"B\"  :",
        "detail": "Emma.Assignment_9.Bank_withdrawal",
        "documentation": {}
    },
    {
        "label": "days",
        "kind": 5,
        "importPath": "Emma.Assignment_9.Reminder_program",
        "description": "Emma.Assignment_9.Reminder_program",
        "peekOfCode": "days = [\"Sunday\",\"Monday\",\" Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\ndays.pop(5)\ntoday= datetime.datetime.now()\nprint(days[today.weekday()])\nprint(today)\nif today.weekday() == 0:\n    print(\"REMINDER : You have a meeting today\")\nelif today.weekday()== 1 :\n    print(\"REMINDER: Logistics work at the harbour\")\nelif today.weekday() == 2:",
        "detail": "Emma.Assignment_9.Reminder_program",
        "documentation": {}
    },
    {
        "label": "MutableList",
        "kind": 6,
        "importPath": "Emma.immutability.main",
        "description": "Emma.immutability.main",
        "peekOfCode": "class MutableList:\n    def __init__(self,values):\n        self.values = values\nlst =MutableList([1,2,3,4,5])\n#mutable class dicts\nclass MutableDict:\n    def __init__(self,values):\n        self.values = values\ndct =MutableDict({'a':1,'b':2})\nclass MutableData:",
        "detail": "Emma.immutability.main",
        "documentation": {}
    },
    {
        "label": "MutableDict",
        "kind": 6,
        "importPath": "Emma.immutability.main",
        "description": "Emma.immutability.main",
        "peekOfCode": "class MutableDict:\n    def __init__(self,values):\n        self.values = values\ndct =MutableDict({'a':1,'b':2})\nclass MutableData:\n    def __init__(self,data):\n        self.data = list(data)\nmutable_data=MutableData([1,3,4])\n# immutable int class\nclass ImmutbaleInt:",
        "detail": "Emma.immutability.main",
        "documentation": {}
    },
    {
        "label": "MutableData",
        "kind": 6,
        "importPath": "Emma.immutability.main",
        "description": "Emma.immutability.main",
        "peekOfCode": "class MutableData:\n    def __init__(self,data):\n        self.data = list(data)\nmutable_data=MutableData([1,3,4])\n# immutable int class\nclass ImmutbaleInt:\n    def __init__(self,values):\n        self.values = values\nnum = ImmutbaleInt(5)\n# immutable tuples",
        "detail": "Emma.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImmutbaleInt",
        "kind": 6,
        "importPath": "Emma.immutability.main",
        "description": "Emma.immutability.main",
        "peekOfCode": "class ImmutbaleInt:\n    def __init__(self,values):\n        self.values = values\nnum = ImmutbaleInt(5)\n# immutable tuples\nclass ImmutableTuples:\n    def __init__(self,data):\n        self.data=tuple(data)\nnum=ImmutableTuples([1,2,3,4])\n# immutable Boolean",
        "detail": "Emma.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImmutableTuples",
        "kind": 6,
        "importPath": "Emma.immutability.main",
        "description": "Emma.immutability.main",
        "peekOfCode": "class ImmutableTuples:\n    def __init__(self,data):\n        self.data=tuple(data)\nnum=ImmutableTuples([1,2,3,4])\n# immutable Boolean\nclass ImmutableBoolean:\n    def __init__(self,data):\n        self.data=bool(data)\n        print(f\"it is {self.data}\")\nnum=ImmutableBoolean(3==1)",
        "detail": "Emma.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImmutableBoolean",
        "kind": 6,
        "importPath": "Emma.immutability.main",
        "description": "Emma.immutability.main",
        "peekOfCode": "class ImmutableBoolean:\n    def __init__(self,data):\n        self.data=bool(data)\n        print(f\"it is {self.data}\")\nnum=ImmutableBoolean(3==1)\n# immutable string\nclass ImmutableString:\n    def __init__(self,data):\n        self.data=str(data)\n        print(f\"This is a {self.data}\")",
        "detail": "Emma.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImmutableString",
        "kind": 6,
        "importPath": "Emma.immutability.main",
        "description": "Emma.immutability.main",
        "peekOfCode": "class ImmutableString:\n    def __init__(self,data):\n        self.data=str(data)\n        print(f\"This is a {self.data}\")\nnum=ImmutableString(\"Fish\")\nG",
        "detail": "Emma.immutability.main",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "Emma.immutability.main",
        "description": "Emma.immutability.main",
        "peekOfCode": "num = ImmutbaleInt(5)\n# immutable tuples\nclass ImmutableTuples:\n    def __init__(self,data):\n        self.data=tuple(data)\nnum=ImmutableTuples([1,2,3,4])\n# immutable Boolean\nclass ImmutableBoolean:\n    def __init__(self,data):\n        self.data=bool(data)",
        "detail": "Emma.immutability.main",
        "documentation": {}
    },
    {
        "label": "democlass",
        "kind": 6,
        "importPath": "Emma.OOP.Abstraction",
        "description": "Emma.OOP.Abstraction",
        "peekOfCode": "class democlass(ABC):\n   @abstractmethod\n   def method1(self):\n      print (\"abstract method\")\n      return\n   def method2(self):\n      print (\"concrete method\")\nclass concreteclass(democlass):\n   def method1(self):\n      super().method1()",
        "detail": "Emma.OOP.Abstraction",
        "documentation": {}
    },
    {
        "label": "concreteclass",
        "kind": 6,
        "importPath": "Emma.OOP.Abstraction",
        "description": "Emma.OOP.Abstraction",
        "peekOfCode": "class concreteclass(democlass):\n   def method1(self):\n      super().method1()\n      return\nobj = concreteclass()\nobj.method1()\nobj.method2()",
        "detail": "Emma.OOP.Abstraction",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "Emma.OOP.Abstraction",
        "description": "Emma.OOP.Abstraction",
        "peekOfCode": "obj = concreteclass()\nobj.method1()\nobj.method2()",
        "detail": "Emma.OOP.Abstraction",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Emma.string_function.app",
        "description": "Emma.string_function.app",
        "peekOfCode": "def main():\n    input_string=input(\"Enter the string : \")\n    substring_to_replace=input(\"Enter sub string to replace :\")\n    replacement_substring=input(\"Enter the replacement : \")\n#perform replacement operation\n    replaced_string = input_string.replace(substring_to_replace,replacement_substring)\n    #splitting the replaced string into a list of words\n    words_list = replaced_string.split()\n    #join the splitted words with hyphen\n    hyphenated_string=\"-\".join(words_list)",
        "detail": "Emma.string_function.app",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "Emma.string_function.join_function",
        "description": "Emma.string_function.join_function",
        "peekOfCode": "string1 = \"Hello\"\njoined_string1=\"*\".join(string1)\nprint(joined_string1)\nstring2 = [\"apple\",\"banana\",\"orange\"]\njoint_string2 = \",\".join(string2)\nprint(joint_string2)\nwords = ['python','is','cool']\njoint_words = \" <3 \".join(words)\nprint(joint_words)",
        "detail": "Emma.string_function.join_function",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "Emma.string_function.join_function",
        "description": "Emma.string_function.join_function",
        "peekOfCode": "string2 = [\"apple\",\"banana\",\"orange\"]\njoint_string2 = \",\".join(string2)\nprint(joint_string2)\nwords = ['python','is','cool']\njoint_words = \" <3 \".join(words)\nprint(joint_words)",
        "detail": "Emma.string_function.join_function",
        "documentation": {}
    },
    {
        "label": "joint_string2",
        "kind": 5,
        "importPath": "Emma.string_function.join_function",
        "description": "Emma.string_function.join_function",
        "peekOfCode": "joint_string2 = \",\".join(string2)\nprint(joint_string2)\nwords = ['python','is','cool']\njoint_words = \" <3 \".join(words)\nprint(joint_words)",
        "detail": "Emma.string_function.join_function",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "Emma.string_function.join_function",
        "description": "Emma.string_function.join_function",
        "peekOfCode": "words = ['python','is','cool']\njoint_words = \" <3 \".join(words)\nprint(joint_words)",
        "detail": "Emma.string_function.join_function",
        "documentation": {}
    },
    {
        "label": "joint_words",
        "kind": 5,
        "importPath": "Emma.string_function.join_function",
        "description": "Emma.string_function.join_function",
        "peekOfCode": "joint_words = \" <3 \".join(words)\nprint(joint_words)",
        "detail": "Emma.string_function.join_function",
        "documentation": {}
    },
    {
        "label": "replaced_string",
        "kind": 5,
        "importPath": "Emma.string_function.replace_function",
        "description": "Emma.string_function.replace_function",
        "peekOfCode": "replaced_string = string1.replace('o','O')\nprint(replaced_string)\n # replacing words\nstring2=\"I love python programming\"\nstring3 = string2.replace('python','Django') # its letter sensitive \nprint(string3)\n  # replacing letters\nstring4=\"abbbbbshhdhhccc\"\nstring6=string4.replace('h','x')\nprint(string6)",
        "detail": "Emma.string_function.replace_function",
        "documentation": {}
    },
    {
        "label": "string3",
        "kind": 5,
        "importPath": "Emma.string_function.replace_function",
        "description": "Emma.string_function.replace_function",
        "peekOfCode": "string3 = string2.replace('python','Django') # its letter sensitive \nprint(string3)\n  # replacing letters\nstring4=\"abbbbbshhdhhccc\"\nstring6=string4.replace('h','x')\nprint(string6)\n # replacing spaces\nstring7 = \"I am doing fine\"\nstring8= string7.replace(\" \",\"\")\nprint(string8)",
        "detail": "Emma.string_function.replace_function",
        "documentation": {}
    },
    {
        "label": "string7",
        "kind": 5,
        "importPath": "Emma.string_function.replace_function",
        "description": "Emma.string_function.replace_function",
        "peekOfCode": "string7 = \"I am doing fine\"\nstring8= string7.replace(\" \",\"\")\nprint(string8)",
        "detail": "Emma.string_function.replace_function",
        "documentation": {}
    },
    {
        "label": "STAGE",
        "kind": 5,
        "importPath": "Emma.assignment",
        "description": "Emma.assignment",
        "peekOfCode": "STAGE = 1\nprint(STAGE)\nSTAGE = 2\nprint(STAGE)",
        "detail": "Emma.assignment",
        "documentation": {}
    },
    {
        "label": "STAGE",
        "kind": 5,
        "importPath": "Emma.assignment",
        "description": "Emma.assignment",
        "peekOfCode": "STAGE = 2\nprint(STAGE)",
        "detail": "Emma.assignment",
        "documentation": {}
    },
    {
        "label": "addx",
        "kind": 2,
        "importPath": "Emma.Assignment_7",
        "description": "Emma.Assignment_7",
        "peekOfCode": "def addx():\n    a=input(\"put in your 1st value : \")\n    b=input(\"put in your 2nd value : \")\n    P=int(a)+int(b)\n    print(\"your new combined value : \" , P)\n    return ;\ndef subx():\n    a=input(\"put in your 1st value : \")\n    b=input(\"put in your 2nd value : \")\n    print(\"your new value : \" , int(a)-int(b))",
        "detail": "Emma.Assignment_7",
        "documentation": {}
    },
    {
        "label": "subx",
        "kind": 2,
        "importPath": "Emma.Assignment_7",
        "description": "Emma.Assignment_7",
        "peekOfCode": "def subx():\n    a=input(\"put in your 1st value : \")\n    b=input(\"put in your 2nd value : \")\n    print(\"your new value : \" , int(a)-int(b))\n    return ;\ndef divx():\n    a=input(\"put in your 1st value : \")\n    b=input(\"put in your 2nd value : \")\n    print(\"your new divied value : \", int(a)/int(b))\n    return;",
        "detail": "Emma.Assignment_7",
        "documentation": {}
    },
    {
        "label": "divx",
        "kind": 2,
        "importPath": "Emma.Assignment_7",
        "description": "Emma.Assignment_7",
        "peekOfCode": "def divx():\n    a=input(\"put in your 1st value : \")\n    b=input(\"put in your 2nd value : \")\n    print(\"your new divied value : \", int(a)/int(b))\n    return;\ndef multx():\n    a=input(\"put in your 1st value : \")\n    b=input(\"put in your 2nd value : \")\n    P=int(a)*int(b)\n    print(\"your new multipled value : \", )",
        "detail": "Emma.Assignment_7",
        "documentation": {}
    },
    {
        "label": "multx",
        "kind": 2,
        "importPath": "Emma.Assignment_7",
        "description": "Emma.Assignment_7",
        "peekOfCode": "def multx():\n    a=input(\"put in your 1st value : \")\n    b=input(\"put in your 2nd value : \")\n    P=int(a)*int(b)\n    print(\"your new multipled value : \", )\n    return;\ndef opx():\n    P = (addx())\n    print(\"this is the answer\", P)\n    return;",
        "detail": "Emma.Assignment_7",
        "documentation": {}
    },
    {
        "label": "opx",
        "kind": 2,
        "importPath": "Emma.Assignment_7",
        "description": "Emma.Assignment_7",
        "peekOfCode": "def opx():\n    P = (addx())\n    print(\"this is the answer\", P)\n    return;\nsubx()",
        "detail": "Emma.Assignment_7",
        "documentation": {}
    },
    {
        "label": "oper",
        "kind": 2,
        "importPath": "Emma.functions",
        "description": "Emma.functions",
        "peekOfCode": "def oper(a,b):\n    print(\"Your answer will be :\",int(a)*int(b))\noper(a,b)",
        "detail": "Emma.functions",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 6,
        "importPath": "Emma.ineritance_from_class",
        "description": "Emma.ineritance_from_class",
        "peekOfCode": "class person:\n    def __init__(self,name,age):\n        self.name=name\n        self.age=age\n    def stud_name(self):\n        print(f\"My name is {self.name}\")\n    def stud_age(self):\n        print(f\"my age is {self.age}\")\nclass student(person):\n    def __init__(self,name,age):",
        "detail": "Emma.ineritance_from_class",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 6,
        "importPath": "Emma.ineritance_from_class",
        "description": "Emma.ineritance_from_class",
        "peekOfCode": "class student(person):\n    def __init__(self,name,age):\n        super().__init__(name,age)\n    def Speak(self):\n        pass\nJam = student(\"Greg\",19)\nJam.stud_name()\nJam.stud_age()",
        "detail": "Emma.ineritance_from_class",
        "documentation": {}
    },
    {
        "label": "Jam",
        "kind": 5,
        "importPath": "Emma.ineritance_from_class",
        "description": "Emma.ineritance_from_class",
        "peekOfCode": "Jam = student(\"Greg\",19)\nJam.stud_name()\nJam.stud_age()",
        "detail": "Emma.ineritance_from_class",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "Emma.replace_func",
        "description": "Emma.replace_func",
        "peekOfCode": "string1 = \"They are going out\"\nstring2= string1.replace(\"They\",\"You\")\nprint(string2)",
        "detail": "Emma.replace_func",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "Joel.Assignment.add",
        "description": "Joel.Assignment.add",
        "peekOfCode": "string1 = \"Hello\"\nstring2 = \"World\"\nresult = string1 + \"\" + string2\nprint(result)",
        "detail": "Joel.Assignment.add",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "Joel.Assignment.add",
        "description": "Joel.Assignment.add",
        "peekOfCode": "string2 = \"World\"\nresult = string1 + \"\" + string2\nprint(result)",
        "detail": "Joel.Assignment.add",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Joel.Assignment.add",
        "description": "Joel.Assignment.add",
        "peekOfCode": "result = string1 + \"\" + string2\nprint(result)",
        "detail": "Joel.Assignment.add",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 2,
        "importPath": "Joel.assignment.py.python.assignment",
        "description": "Joel.assignment.py.python.assignment",
        "peekOfCode": "def time():\n    my_time = datetime.now().strftime('%H:%M:%S')\n    print(\"Current time: \", my_time)0\ntime()",
        "detail": "Joel.assignment.py.python.assignment",
        "documentation": {}
    },
    {
        "label": "BankAccount",
        "kind": 6,
        "importPath": "Joel.bank operation.operation",
        "description": "Joel.bank operation.operation",
        "peekOfCode": "class BankAccount:\n    def init (self, account_number, balance=0):\n        self.account_number = account_number\n        self.balance = balance\n    def deposit(self,amount):\n        if amount > 0:\n            self.balance += amount\n            print(f\"Deposited {amount} into account {self.account_number}.\")\n        else:\n            print(\"Invalid deposit amount.\")",
        "detail": "Joel.bank operation.operation",
        "documentation": {}
    },
    {
        "label": "first_name",
        "kind": 5,
        "importPath": "Joel.Case Sensitivity.casesensitivity",
        "description": "Joel.Case Sensitivity.casesensitivity",
        "peekOfCode": "first_name = \"Jason\"\nFirst_name = \"Kaitaita\"\nage = 20\nprint(\"age =\", age)",
        "detail": "Joel.Case Sensitivity.casesensitivity",
        "documentation": {}
    },
    {
        "label": "First_name",
        "kind": 5,
        "importPath": "Joel.Case Sensitivity.casesensitivity",
        "description": "Joel.Case Sensitivity.casesensitivity",
        "peekOfCode": "First_name = \"Kaitaita\"\nage = 20\nprint(\"age =\", age)",
        "detail": "Joel.Case Sensitivity.casesensitivity",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Joel.Case Sensitivity.casesensitivity",
        "description": "Joel.Case Sensitivity.casesensitivity",
        "peekOfCode": "age = 20\nprint(\"age =\", age)",
        "detail": "Joel.Case Sensitivity.casesensitivity",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Joel.casting.casting",
        "description": "Joel.casting.casting",
        "peekOfCode": "x = str(10)    \ny = int(x)\nz = float(y)\nprint( \"x =\", x)\nprint( \"y =\", y)\nprint( \"z =\", z)",
        "detail": "Joel.casting.casting",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Joel.casting.casting",
        "description": "Joel.casting.casting",
        "peekOfCode": "y = int(x)\nz = float(y)\nprint( \"x =\", x)\nprint( \"y =\", y)\nprint( \"z =\", z)",
        "detail": "Joel.casting.casting",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "Joel.casting.casting",
        "description": "Joel.casting.casting",
        "peekOfCode": "z = float(y)\nprint( \"x =\", x)\nprint( \"y =\", y)\nprint( \"z =\", z)",
        "detail": "Joel.casting.casting",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Joel.dictionary.dics",
        "description": "Joel.dictionary.dics",
        "peekOfCode": "students = {\n    \"Joel\": 21,\n    \"Mark\": 39,}\nprint(students)\n#EXAMPLE 2\nfruits = {\n    \"Mango\": 12,\n    \"Banana\":16,}\nprint(fruits)\ncapitals = {\"Uganda\":\"Kampala\", \"India\":\"New Delhi\"}",
        "detail": "Joel.dictionary.dics",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "Joel.dictionary.dics",
        "description": "Joel.dictionary.dics",
        "peekOfCode": "fruits = {\n    \"Mango\": 12,\n    \"Banana\":16,}\nprint(fruits)\ncapitals = {\"Uganda\":\"Kampala\", \"India\":\"New Delhi\"}\nprint(capitals[\"Uganda\"])",
        "detail": "Joel.dictionary.dics",
        "documentation": {}
    },
    {
        "label": "capitals",
        "kind": 5,
        "importPath": "Joel.dictionary.dics",
        "description": "Joel.dictionary.dics",
        "peekOfCode": "capitals = {\"Uganda\":\"Kampala\", \"India\":\"New Delhi\"}\nprint(capitals[\"Uganda\"])",
        "detail": "Joel.dictionary.dics",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "Joel.function.assignment7",
        "description": "Joel.function.assignment7",
        "peekOfCode": "def subtract(num1,num2)\n    print(num1-num2)\nnumber1=input(\"Enter first value\")\nnumber2=input(\"Enter second value\")\nprint(\"The summed value is:\", add(int(number1), int(number2)))",
        "detail": "Joel.function.assignment7",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Joel.function.functions",
        "description": "Joel.function.functions",
        "peekOfCode": "def add(a=5,b=10):\n    c=a+b\n    print(c)\n#arguments are passed in the function call\nadd(50)\ndef func1():\n    average =(8/4)\n    return average\ndef func3():\n    print(func1())",
        "detail": "Joel.function.functions",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "Joel.function.functions",
        "description": "Joel.function.functions",
        "peekOfCode": "def func1():\n    average =(8/4)\n    return average\ndef func3():\n    print(func1())\ndef func2():\n    print(func1())",
        "detail": "Joel.function.functions",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "Joel.function.functions",
        "description": "Joel.function.functions",
        "peekOfCode": "def func3():\n    print(func1())\ndef func2():\n    print(func1())",
        "detail": "Joel.function.functions",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "Joel.function.functions",
        "description": "Joel.function.functions",
        "peekOfCode": "def func2():\n    print(func1())",
        "detail": "Joel.function.functions",
        "documentation": {}
    },
    {
        "label": "Name",
        "kind": 2,
        "importPath": "Joel.function.functions2",
        "description": "Joel.function.functions2",
        "peekOfCode": "def Name(): \n    name =input(\"Enter Your Name: \")\n    return name\ndef Age(): \n    age=input(\"Enter your Age: \")\n    # print(\"Name: \" + Name() + ('\\n') + \"Age: \"+ str(age)) \n    print(Name(), age)\nAge()\ndef function():\n    pass",
        "detail": "Joel.function.functions2",
        "documentation": {}
    },
    {
        "label": "Age",
        "kind": 2,
        "importPath": "Joel.function.functions2",
        "description": "Joel.function.functions2",
        "peekOfCode": "def Age(): \n    age=input(\"Enter your Age: \")\n    # print(\"Name: \" + Name() + ('\\n') + \"Age: \"+ str(age)) \n    print(Name(), age)\nAge()\ndef function():\n    pass\ndef function2()\n    print(\"not empty\")",
        "detail": "Joel.function.functions2",
        "documentation": {}
    },
    {
        "label": "function",
        "kind": 2,
        "importPath": "Joel.function.functions2",
        "description": "Joel.function.functions2",
        "peekOfCode": "def function():\n    pass\ndef function2()\n    print(\"not empty\")",
        "detail": "Joel.function.functions2",
        "documentation": {}
    },
    {
        "label": "function2",
        "kind": 2,
        "importPath": "Joel.function.functions2",
        "description": "Joel.function.functions2",
        "peekOfCode": "def function2()\n    print(\"not empty\")",
        "detail": "Joel.function.functions2",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Joel.function.inputs",
        "description": "Joel.function.inputs",
        "peekOfCode": "def add(num1,num2)\n    return(num1+num2)\ndef get_input():\n    number1=int(input(\"Enter first value\"))\n    number2=int(input(\"Enter second value\"))\n    result=add(number1,number2)\n    print(\"The summed value is: \", result)\nget_input()",
        "detail": "Joel.function.inputs",
        "documentation": {}
    },
    {
        "label": "get_input",
        "kind": 2,
        "importPath": "Joel.function.inputs",
        "description": "Joel.function.inputs",
        "peekOfCode": "def get_input():\n    number1=int(input(\"Enter first value\"))\n    number2=int(input(\"Enter second value\"))\n    result=add(number1,number2)\n    print(\"The summed value is: \", result)\nget_input()",
        "detail": "Joel.function.inputs",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Joel.operations.calculator.main",
        "description": "Joel.operations.calculator.main",
        "peekOfCode": "def add(a,b):\n    return a+b\ndef sub(a,b)\n    return a+b\ndef mul(a,b):\n    return a*b\ndel div(a,b)\n    return a/b\nchoice={'A':'Addition', 'B':'Subtraction', 'C':'Multiplication', 'D':'Division'}\nprint(\"Select an option: \")",
        "detail": "Joel.operations.calculator.main",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "Joel.operations.calculator.main",
        "description": "Joel.operations.calculator.main",
        "peekOfCode": "def sub(a,b)\n    return a+b\ndef mul(a,b):\n    return a*b\ndel div(a,b)\n    return a/b\nchoice={'A':'Addition', 'B':'Subtraction', 'C':'Multiplication', 'D':'Division'}\nprint(\"Select an option: \")\nprint('A: Addition')\nprint('B: Subtraction')",
        "detail": "Joel.operations.calculator.main",
        "documentation": {}
    },
    {
        "label": "mul",
        "kind": 2,
        "importPath": "Joel.operations.calculator.main",
        "description": "Joel.operations.calculator.main",
        "peekOfCode": "def mul(a,b):\n    return a*b\ndel div(a,b)\n    return a/b\nchoice={'A':'Addition', 'B':'Subtraction', 'C':'Multiplication', 'D':'Division'}\nprint(\"Select an option: \")\nprint('A: Addition')\nprint('B: Subtraction')\nprint('C: Multiplication')\nprint('D: Division')",
        "detail": "Joel.operations.calculator.main",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Joel.operations.calculator.main2",
        "description": "Joel.operations.calculator.main2",
        "peekOfCode": "def add(a,b):\n    answer=a + b\n    print(str(a) + \"+\" + str(b) + \"=\" + str(answer)\ndef sub(a,b)\n    answer=a - b\n    print(str(a) +\ndef mul(a,b)\n    return a*b\ndel div(a,b)\n    return a/b",
        "detail": "Joel.operations.calculator.main2",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "Joel.operations.calculator.main2",
        "description": "Joel.operations.calculator.main2",
        "peekOfCode": "def sub(a,b)\n    answer=a - b\n    print(str(a) +\ndef mul(a,b)\n    return a*b\ndel div(a,b)\n    return a/b\nchoice={'A': 'Addition', 'B':}",
        "detail": "Joel.operations.calculator.main2",
        "documentation": {}
    },
    {
        "label": "mul",
        "kind": 2,
        "importPath": "Joel.operations.calculator.main2",
        "description": "Joel.operations.calculator.main2",
        "peekOfCode": "def mul(a,b)\n    return a*b\ndel div(a,b)\n    return a/b\nchoice={'A': 'Addition', 'B':}",
        "detail": "Joel.operations.calculator.main2",
        "documentation": {}
    },
    {
        "label": "new_list",
        "kind": 5,
        "importPath": "Joel.operations.list_operations",
        "description": "Joel.operations.list_operations",
        "peekOfCode": "new_list = list1 + list2\nprint(new_list)\n#clear() removes everything from a list\nlist2.clear()\nprint(list2)\n#count\ncount_items=new_list.count('20')\nprint(count_items)\n#sort(only sort numbers)\nunsorted_items=[29,3,0,1,5,80]",
        "detail": "Joel.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "copied_list",
        "kind": 5,
        "importPath": "Joel.operations.list_operations",
        "description": "Joel.operations.list_operations",
        "peekOfCode": "copied_list = unsorted_items.copy()\nprint(copied_list)",
        "detail": "Joel.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "*a,b,c",
        "kind": 5,
        "importPath": "Joel.operations.tuple_operations",
        "description": "Joel.operations.tuple_operations",
        "peekOfCode": "*a,b,c = tuple1\nprint(\"item assigned to 'a':\", a)\nprint(\"item assigned to 'b'\",  b)\nprint(\"item assigned to 'c':\", c)\n#tuple comparison\ntuple2=(1,2,3)\ntuple3=(1,2,4)\nprint(tuple3 < tuple2) #outputs a False\n#deleting a tuple\ntuple4=(1,2,4,5)",
        "detail": "Joel.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "slice_tuple",
        "kind": 5,
        "importPath": "Joel.operations.tuple_operations",
        "description": "Joel.operations.tuple_operations",
        "peekOfCode": "slice_tuple = tuple5[1:2:3]\nprint(slice_tuple)",
        "detail": "Joel.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "Joel.python.python",
        "description": "Joel.python.python",
        "peekOfCode": "class Car:\n    def --init--(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.is_running = False\n    def start(self):\n        if not self.is_running:\n            self.is_running = True\n            print(f\"{self.make} {self.model} started.\")",
        "detail": "Joel.python.python",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "Joel.python.python2",
        "description": "Joel.python.python2",
        "peekOfCode": "class Human:\n    def_init_(self, name, age, gender):\n        self.age=age\n        self.name=name\n        self.gender=gender\n        def introduce(self):\n            print(f\"Hello,my name is (self.name), I'm {self.name} years old and my gender is {self.gender} \")",
        "detail": "Joel.python.python2",
        "documentation": {}
    },
    {
        "label": "BankAccount",
        "kind": 6,
        "importPath": "Joel.Python_Class.bank operation.operation",
        "description": "Joel.Python_Class.bank operation.operation",
        "peekOfCode": "class BankAccount:\n    def init (self, account_number, balance=0):\n        self.account_number = account_number\n        self.balance = balance\n    def deposit(self,amount):\n        if amount > 0:\n            self.balance += amount\n            print(f\"Deposited {amount} into account {self.account_number}.\")\n        else:\n            print(\"Invalid deposit amount.\")",
        "detail": "Joel.Python_Class.bank operation.operation",
        "documentation": {}
    },
    {
        "label": "Tuple2",
        "kind": 5,
        "importPath": "Joel.Python_Class.lists.first_code",
        "description": "Joel.Python_Class.lists.first_code",
        "peekOfCode": "Tuple2 = Tuple[0:2]\n    Print(Tuple2)\nTuple[0]= \"Mary\"\nPrint(Tuple)",
        "detail": "Joel.Python_Class.lists.first_code",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Joel.Python_Class.lists.forloop",
        "description": "Joel.Python_Class.lists.forloop",
        "peekOfCode": "students = [\"Mary\",\"John\",\"Cris\"]\nfor student in students:\n    print(student, end=\" \")",
        "detail": "Joel.Python_Class.lists.forloop",
        "documentation": {}
    },
    {
        "label": "Tuple2",
        "kind": 5,
        "importPath": "Joel.Python_Class.tuples.tuple",
        "description": "Joel.Python_Class.tuples.tuple",
        "peekOfCode": "Tuple2 = Tuple[0:2]\n   Print(Tuple2)\nTuple[0]= \"Mary\"\nPrint(Tuple)",
        "detail": "Joel.Python_Class.tuples.tuple",
        "documentation": {}
    },
    {
        "label": "FirstName",
        "kind": 5,
        "importPath": "Joel.Python_Class.assignment2",
        "description": "Joel.Python_Class.assignment2",
        "peekOfCode": "FirstName = \"Joel\"\nAge = 25\nSalary = 26.0 dollars\nS_married = False\na=b=c=10\nprint(a)\nprint(b)\nprint(c)\nprint(a,b,c)",
        "detail": "Joel.Python_Class.assignment2",
        "documentation": {}
    },
    {
        "label": "Age",
        "kind": 5,
        "importPath": "Joel.Python_Class.assignment2",
        "description": "Joel.Python_Class.assignment2",
        "peekOfCode": "Age = 25\nSalary = 26.0 dollars\nS_married = False\na=b=c=10\nprint(a)\nprint(b)\nprint(c)\nprint(a,b,c)",
        "detail": "Joel.Python_Class.assignment2",
        "documentation": {}
    },
    {
        "label": "Salary",
        "kind": 5,
        "importPath": "Joel.Python_Class.assignment2",
        "description": "Joel.Python_Class.assignment2",
        "peekOfCode": "Salary = 26.0 dollars\nS_married = False\na=b=c=10\nprint(a)\nprint(b)\nprint(c)\nprint(a,b,c)",
        "detail": "Joel.Python_Class.assignment2",
        "documentation": {}
    },
    {
        "label": "S_married",
        "kind": 5,
        "importPath": "Joel.Python_Class.assignment2",
        "description": "Joel.Python_Class.assignment2",
        "peekOfCode": "S_married = False\na=b=c=10\nprint(a)\nprint(b)\nprint(c)\nprint(a,b,c)",
        "detail": "Joel.Python_Class.assignment2",
        "documentation": {}
    },
    {
        "label": "is_student",
        "kind": 5,
        "importPath": "Joel.Python_Class.HelloWorld",
        "description": "Joel.Python_Class.HelloWorld",
        "peekOfCode": "is_student = True\nprint(month)\nprint(age)\nprint(is_student)",
        "detail": "Joel.Python_Class.HelloWorld",
        "documentation": {}
    },
    {
        "label": "Name",
        "kind": 5,
        "importPath": "Joel.Variable Convention.variableconvention",
        "description": "Joel.Variable Convention.variableconvention",
        "peekOfCode": "Name = \"John\"\nAge = \"20\"\nAge1 =\"20\"\nName1 =\"John\"\nlast_name =\"Doe\"\nphone_number =\"070523567\"\nfirst_name = \"John\"\nprint (userName)\nprint (userAge)\nprint (name)",
        "detail": "Joel.Variable Convention.variableconvention",
        "documentation": {}
    },
    {
        "label": "Age",
        "kind": 5,
        "importPath": "Joel.Variable Convention.variableconvention",
        "description": "Joel.Variable Convention.variableconvention",
        "peekOfCode": "Age = \"20\"\nAge1 =\"20\"\nName1 =\"John\"\nlast_name =\"Doe\"\nphone_number =\"070523567\"\nfirst_name = \"John\"\nprint (userName)\nprint (userAge)\nprint (name)\nprint (age)",
        "detail": "Joel.Variable Convention.variableconvention",
        "documentation": {}
    },
    {
        "label": "first_name",
        "kind": 5,
        "importPath": "Joel.Variable Convention.variableconvention",
        "description": "Joel.Variable Convention.variableconvention",
        "peekOfCode": "first_name = \"John\"\nprint (userName)\nprint (userAge)\nprint (name)\nprint (age)\nprint (age1)\nprint (name1)\nprint (last_name)\nprint (phone_number)\nprint (first_name)",
        "detail": "Joel.Variable Convention.variableconvention",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Joel.Variable Type.variabletype",
        "description": "Joel.Variable Type.variabletype",
        "peekOfCode": "x = \"Joel\"\ny = 10\nz = 10.10\nprint(type(x))\nprint(type(y))\nprint(type(z))",
        "detail": "Joel.Variable Type.variabletype",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Joel.Variable Type.variabletype",
        "description": "Joel.Variable Type.variabletype",
        "peekOfCode": "y = 10\nz = 10.10\nprint(type(x))\nprint(type(y))\nprint(type(z))",
        "detail": "Joel.Variable Type.variabletype",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "Joel.Variable Type.variabletype",
        "description": "Joel.Variable Type.variabletype",
        "peekOfCode": "z = 10.10\nprint(type(x))\nprint(type(y))\nprint(type(z))",
        "detail": "Joel.Variable Type.variabletype",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "Joel.work.forloops.while_loops.routine.routine",
        "description": "Joel.work.forloops.while_loops.routine.routine",
        "peekOfCode": "def greet():\n    return(\"Hello, welcome to our program\")\ndef ask_name():\n    name = input(\"What is your name? \")\n    return name\ndef main():\n    greet()\n    name = ask_name()\n    print(\"Nice to meet you, {}!\".format(name))\n    # Add more tasks here if needed",
        "detail": "Joel.work.forloops.while_loops.routine.routine",
        "documentation": {}
    },
    {
        "label": "ask_name",
        "kind": 2,
        "importPath": "Joel.work.forloops.while_loops.routine.routine",
        "description": "Joel.work.forloops.while_loops.routine.routine",
        "peekOfCode": "def ask_name():\n    name = input(\"What is your name? \")\n    return name\ndef main():\n    greet()\n    name = ask_name()\n    print(\"Nice to meet you, {}!\".format(name))\n    # Add more tasks here if needed\nif __name__ == \"__main__\":\n    main()",
        "detail": "Joel.work.forloops.while_loops.routine.routine",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Joel.work.forloops.while_loops.routine.routine",
        "description": "Joel.work.forloops.while_loops.routine.routine",
        "peekOfCode": "def main():\n    greet()\n    name = ask_name()\n    print(\"Nice to meet you, {}!\".format(name))\n    # Add more tasks here if needed\nif __name__ == \"__main__\":\n    main()",
        "detail": "Joel.work.forloops.while_loops.routine.routine",
        "documentation": {}
    },
    {
        "label": "countdown",
        "kind": 5,
        "importPath": "Joel.work.forloops.while_loops.while loops",
        "description": "Joel.work.forloops.while_loops.while loops",
        "peekOfCode": "countdown = 5\nwhile countdown > 0:\n    print(countdown)\n    countdown -= 1\nprint(\"Blastoff\")",
        "detail": "Joel.work.forloops.while_loops.while loops",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Joel.work.forloops.forloops",
        "description": "Joel.work.forloops.forloops",
        "peekOfCode": "my_list = [1, 2, 3, 4, 5]\nfor num in my_list:\n    print(num)",
        "detail": "Joel.work.forloops.forloops",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "Joel.lists2",
        "description": "Joel.lists2",
        "peekOfCode": "my_list = [2, 3, 4]\nmy_list.insert(0,1)\nprint(my_list)",
        "detail": "Joel.lists2",
        "documentation": {}
    },
    {
        "label": "month",
        "kind": 5,
        "importPath": "julson.Assignments.assignment1.hello_world",
        "description": "julson.Assignments.assignment1.hello_world",
        "peekOfCode": "month = \"January\"\nage=22\nis_teacher = True\nprint(month)\nprint(age)\nprint(is_teacher)",
        "detail": "julson.Assignments.assignment1.hello_world",
        "documentation": {}
    },
    {
        "label": "is_teacher",
        "kind": 5,
        "importPath": "julson.Assignments.assignment1.hello_world",
        "description": "julson.Assignments.assignment1.hello_world",
        "peekOfCode": "is_teacher = True\nprint(month)\nprint(age)\nprint(is_teacher)",
        "detail": "julson.Assignments.assignment1.hello_world",
        "documentation": {}
    },
    {
        "label": "car",
        "kind": 6,
        "importPath": "julson.Assignments.assignment10.aasignment10_class",
        "description": "julson.Assignments.assignment10.aasignment10_class",
        "peekOfCode": "class car:\n    def __init__(self,name, model,year):\n        self.Name=name\n        self.Modal=model\n        self.Year=year\n    def is_running(self):\n        Start_ingine=True\n        print('The engine has sarted')\n    def stop_running(self):\n        print('The ingine has Stopped')",
        "detail": "julson.Assignments.assignment10.aasignment10_class",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "julson.Assignments.assignment10.aasignment10_class",
        "description": "julson.Assignments.assignment10.aasignment10_class",
        "peekOfCode": "N = input(\"Car name :\")\nM = input(\"car model :\")\nY = int(input(\"car Year\"))\ncar1=car(N,M,Y)\ncar1.stop_running()",
        "detail": "julson.Assignments.assignment10.aasignment10_class",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "julson.Assignments.assignment10.aasignment10_class",
        "description": "julson.Assignments.assignment10.aasignment10_class",
        "peekOfCode": "M = input(\"car model :\")\nY = int(input(\"car Year\"))\ncar1=car(N,M,Y)\ncar1.stop_running()",
        "detail": "julson.Assignments.assignment10.aasignment10_class",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "julson.Assignments.assignment10.aasignment10_class",
        "description": "julson.Assignments.assignment10.aasignment10_class",
        "peekOfCode": "Y = int(input(\"car Year\"))\ncar1=car(N,M,Y)\ncar1.stop_running()",
        "detail": "julson.Assignments.assignment10.aasignment10_class",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 6,
        "importPath": "julson.Assignments.assignment10.increment",
        "description": "julson.Assignments.assignment10.increment",
        "peekOfCode": "class counter:\n    def __init__(self, start=0):\n        self.value = start\n    def increment(self):\n        self.value += 1\n    def get_value(self):\n        return self.value \ncounter = counter()\ncounter.increment()\ncounter.increment()",
        "detail": "julson.Assignments.assignment10.increment",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "julson.Assignments.assignment10.increment",
        "description": "julson.Assignments.assignment10.increment",
        "peekOfCode": "counter = counter()\ncounter.increment()\ncounter.increment()\ncounter.increment()\nprint(\"Current value of the counter :\",counter.get_value())",
        "detail": "julson.Assignments.assignment10.increment",
        "documentation": {}
    },
    {
        "label": "BankAccount",
        "kind": 6,
        "importPath": "julson.Assignments.assignment10.practice",
        "description": "julson.Assignments.assignment10.practice",
        "peekOfCode": "class BankAccount:\n    def __init__(self, owner, balance=0):\n        self.owner = owner\n        self.balance = balance\n    @property\n    def account_info(self):\n        return f\"Account Owner: {self.owner}, Balance: ${self.balance}\"\n    def deposit(self, amount):\n        self.balance += amount\n        print(f\"Deposited ${amount}. New balance: ${self.balance}\")",
        "detail": "julson.Assignments.assignment10.practice",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "julson.Assignments.assignment11.inheritage",
        "description": "julson.Assignments.assignment11.inheritage",
        "peekOfCode": "class Animal:\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n    def make_sound(self):\n        pass  # Placeholder method to be overridden by subclasses\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name, species=\"Dog\")  # Call superclass constructor\n        self.breed = breed",
        "detail": "julson.Assignments.assignment11.inheritage",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "julson.Assignments.assignment11.inheritage",
        "description": "julson.Assignments.assignment11.inheritage",
        "peekOfCode": "class Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name, species=\"Dog\")  # Call superclass constructor\n        self.breed = breed\n    def make_sound(self):\n        return \"Woof!\"  # Implement method specific to Dog subclass\nmy_dog = Dog(\"Buddy\", \"Golden Retriever\")\nprint(my_dog.name)  # Output: Buddy\nprint(my_dog.species)  # Output: Dog\nprint(my_dog.breed)  # Output: Golden Retriever",
        "detail": "julson.Assignments.assignment11.inheritage",
        "documentation": {}
    },
    {
        "label": "my_dog",
        "kind": 5,
        "importPath": "julson.Assignments.assignment11.inheritage",
        "description": "julson.Assignments.assignment11.inheritage",
        "peekOfCode": "my_dog = Dog(\"Buddy\", \"Golden Retriever\")\nprint(my_dog.name)  # Output: Buddy\nprint(my_dog.species)  # Output: Dog\nprint(my_dog.breed)  # Output: Golden Retriever\nprint(my_dog.make_sound())  # Output: Woof!",
        "detail": "julson.Assignments.assignment11.inheritage",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "julson.Assignments.assignment11.polymorphisim",
        "description": "julson.Assignments.assignment11.polymorphisim",
        "peekOfCode": "class Animal:\n    def make_sound(self):\n        print(\"Some generic sound\")\nclass Dog(Animal):\n    def make_sound(self):\n        print(\"Woof!\")\nclass Cat(Animal):\n    def make_sound(self):\n        print(\"Meow!\")\ndog = Dog()",
        "detail": "julson.Assignments.assignment11.polymorphisim",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "julson.Assignments.assignment11.polymorphisim",
        "description": "julson.Assignments.assignment11.polymorphisim",
        "peekOfCode": "class Dog(Animal):\n    def make_sound(self):\n        print(\"Woof!\")\nclass Cat(Animal):\n    def make_sound(self):\n        print(\"Meow!\")\ndog = Dog()\ncat = Cat()\ndog.make_sound()  # Output: Woof!\ncat.make_sound()  # Output: Meow!",
        "detail": "julson.Assignments.assignment11.polymorphisim",
        "documentation": {}
    },
    {
        "label": "Cat",
        "kind": 6,
        "importPath": "julson.Assignments.assignment11.polymorphisim",
        "description": "julson.Assignments.assignment11.polymorphisim",
        "peekOfCode": "class Cat(Animal):\n    def make_sound(self):\n        print(\"Meow!\")\ndog = Dog()\ncat = Cat()\ndog.make_sound()  # Output: Woof!\ncat.make_sound()  # Output: Meow!",
        "detail": "julson.Assignments.assignment11.polymorphisim",
        "documentation": {}
    },
    {
        "label": "dog",
        "kind": 5,
        "importPath": "julson.Assignments.assignment11.polymorphisim",
        "description": "julson.Assignments.assignment11.polymorphisim",
        "peekOfCode": "dog = Dog()\ncat = Cat()\ndog.make_sound()  # Output: Woof!\ncat.make_sound()  # Output: Meow!",
        "detail": "julson.Assignments.assignment11.polymorphisim",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "julson.Assignments.assignment11.polymorphisim",
        "description": "julson.Assignments.assignment11.polymorphisim",
        "peekOfCode": "cat = Cat()\ndog.make_sound()  # Output: Woof!\ncat.make_sound()  # Output: Meow!",
        "detail": "julson.Assignments.assignment11.polymorphisim",
        "documentation": {}
    },
    {
        "label": "MathOperations",
        "kind": 6,
        "importPath": "julson.Assignments.assignment11.poly_two",
        "description": "julson.Assignments.assignment11.poly_two",
        "peekOfCode": "class MathOperations:\n    def add(self, a, b):\n        return a + b\n    def add(self, a, b, c):\n        return a + b + c\nmath_ops = MathOperations()\n#print(math_ops.add(2, 3))      # Error: Only the second definition of add() is recognized\nprint(math_ops.add(2, 3, 4))   # Output: 9",
        "detail": "julson.Assignments.assignment11.poly_two",
        "documentation": {}
    },
    {
        "label": "math_ops",
        "kind": 5,
        "importPath": "julson.Assignments.assignment11.poly_two",
        "description": "julson.Assignments.assignment11.poly_two",
        "peekOfCode": "math_ops = MathOperations()\n#print(math_ops.add(2, 3))      # Error: Only the second definition of add() is recognized\nprint(math_ops.add(2, 3, 4))   # Output: 9",
        "detail": "julson.Assignments.assignment11.poly_two",
        "documentation": {}
    },
    {
        "label": "Vehicle",
        "kind": 6,
        "importPath": "julson.Assignments.assignment12.Abstraction",
        "description": "julson.Assignments.assignment12.Abstraction",
        "peekOfCode": "class Vehicle(ABC):\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n    @abstractmethod\n    def drive(self):\n        pass\n    @abstractmethod\n    def stop(self):\n        pass",
        "detail": "julson.Assignments.assignment12.Abstraction",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "julson.Assignments.assignment12.Abstraction",
        "description": "julson.Assignments.assignment12.Abstraction",
        "peekOfCode": "class Car(Vehicle):\n    def drive(self):\n        return f\"{self.make} {self.model} is driving.\"\n    def stop(self):\n        return f\"{self.make} {self.model} has stopped.\"\nclass Motorcycle(Vehicle):\n    def drive(self):\n        return f\"{self.make} {self.model} is riding.\"\n    def stop(self):\n        return f\"{self.make} {self.model} has stopped.\"",
        "detail": "julson.Assignments.assignment12.Abstraction",
        "documentation": {}
    },
    {
        "label": "Motorcycle",
        "kind": 6,
        "importPath": "julson.Assignments.assignment12.Abstraction",
        "description": "julson.Assignments.assignment12.Abstraction",
        "peekOfCode": "class Motorcycle(Vehicle):\n    def drive(self):\n        return f\"{self.make} {self.model} is riding.\"\n    def stop(self):\n        return f\"{self.make} {self.model} has stopped.\"\n# Usage\ncar = Car(\"Toyota\", \"Camry\")\nprint(car.drive())  # Output: Toyota Camry is driving.\nprint(car.stop())   # Output: Toyota Camry has stopped.\nmotorcycle = Motorcycle(\"Harley-Davidson\", \"Sportster\")",
        "detail": "julson.Assignments.assignment12.Abstraction",
        "documentation": {}
    },
    {
        "label": "car",
        "kind": 5,
        "importPath": "julson.Assignments.assignment12.Abstraction",
        "description": "julson.Assignments.assignment12.Abstraction",
        "peekOfCode": "car = Car(\"Toyota\", \"Camry\")\nprint(car.drive())  # Output: Toyota Camry is driving.\nprint(car.stop())   # Output: Toyota Camry has stopped.\nmotorcycle = Motorcycle(\"Harley-Davidson\", \"Sportster\")\nprint(motorcycle.drive())  # Output: Harley-Davidson Sportster is riding.\nprint(motorcycle.stop())   # Output: Harley-Davidson Sportster has stopped.",
        "detail": "julson.Assignments.assignment12.Abstraction",
        "documentation": {}
    },
    {
        "label": "motorcycle",
        "kind": 5,
        "importPath": "julson.Assignments.assignment12.Abstraction",
        "description": "julson.Assignments.assignment12.Abstraction",
        "peekOfCode": "motorcycle = Motorcycle(\"Harley-Davidson\", \"Sportster\")\nprint(motorcycle.drive())  # Output: Harley-Davidson Sportster is riding.\nprint(motorcycle.stop())   # Output: Harley-Davidson Sportster has stopped.",
        "detail": "julson.Assignments.assignment12.Abstraction",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "julson.Assignments.assignment12.Encapsulation",
        "description": "julson.Assignments.assignment12.Encapsulation",
        "peekOfCode": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.__odometer_reading = 0  # Private attribute\n    def get_odometer_reading(self):\n        return self.__odometer_reading\n    def update_odometer(self, mileage):\n        if mileage >= self.__odometer_reading:",
        "detail": "julson.Assignments.assignment12.Encapsulation",
        "documentation": {}
    },
    {
        "label": "my_car",
        "kind": 5,
        "importPath": "julson.Assignments.assignment12.Encapsulation",
        "description": "julson.Assignments.assignment12.Encapsulation",
        "peekOfCode": "my_car = Car(\"Toyota\", \"Camry\", 2022)\nprint(my_car.get_odometer_reading())  # Output: 0\nmy_car.update_odometer(100)\nprint(my_car.get_odometer_reading())  # Output: 100",
        "detail": "julson.Assignments.assignment12.Encapsulation",
        "documentation": {}
    },
    {
        "label": "BankAccount",
        "kind": 6,
        "importPath": "julson.Assignments.assignment13.encapsu3",
        "description": "julson.Assignments.assignment13.encapsu3",
        "peekOfCode": "class BankAccount:\n    def __init__(self):\n        self.__balance = 0   # Private variable\n    def deposit(self, amount):\n        self.__balance += amount\n    def withdraw(self, amount):\n        if amount <= self.__balance:\n            self.__balance -= amount\n        else:\n            print(\"Insufficient funds\")",
        "detail": "julson.Assignments.assignment13.encapsu3",
        "documentation": {}
    },
    {
        "label": "account",
        "kind": 5,
        "importPath": "julson.Assignments.assignment13.encapsu3",
        "description": "julson.Assignments.assignment13.encapsu3",
        "peekOfCode": "account = BankAccount()\naccount.deposit(100)\nprint(account.get_balance())  # Output: 100\naccount.withdraw(50)\nprint(account.get_balance())  # Output: 50",
        "detail": "julson.Assignments.assignment13.encapsu3",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "julson.Assignments.assignment13.encapsulation",
        "description": "julson.Assignments.assignment13.encapsulation",
        "peekOfCode": "class Car:\n    def __init__(self):\n        self.__speed = 10   # Private variable\n    def accelerate(self, increment):\n        self.__speed += increment\n    def get_speed(self):\n        return self.__speed\ncar = Car()\ncar.accelerate(20)\nprint(car.get_speed())  # Output: 20",
        "detail": "julson.Assignments.assignment13.encapsulation",
        "documentation": {}
    },
    {
        "label": "car",
        "kind": 5,
        "importPath": "julson.Assignments.assignment13.encapsulation",
        "description": "julson.Assignments.assignment13.encapsulation",
        "peekOfCode": "car = Car()\ncar.accelerate(20)\nprint(car.get_speed())  # Output: 20",
        "detail": "julson.Assignments.assignment13.encapsulation",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "julson.Assignments.assignment13.encapsulation2",
        "description": "julson.Assignments.assignment13.encapsulation2",
        "peekOfCode": "class Person:\n    def __init__(self, name):\n        self.__name = name   # Private variable\n    @property\n    def name(self):\n        return self.__name\n    @name.setter\n    def name(self, value):\n        self.__name = value\nperson = Person(\"Alice\")",
        "detail": "julson.Assignments.assignment13.encapsulation2",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 5,
        "importPath": "julson.Assignments.assignment13.encapsulation2",
        "description": "julson.Assignments.assignment13.encapsulation2",
        "peekOfCode": "person = Person(\"Alice\")\nprint(person.name)    # Output: Alice\nperson.name = \"Bob\"\nprint(person.name)    # Output: Bob",
        "detail": "julson.Assignments.assignment13.encapsulation2",
        "documentation": {}
    },
    {
        "label": "person.name",
        "kind": 5,
        "importPath": "julson.Assignments.assignment13.encapsulation2",
        "description": "julson.Assignments.assignment13.encapsulation2",
        "peekOfCode": "person.name = \"Bob\"\nprint(person.name)    # Output: Bob",
        "detail": "julson.Assignments.assignment13.encapsulation2",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "julson.Assignments.assignment13.polymo2",
        "description": "julson.Assignments.assignment13.polymo2",
        "peekOfCode": "class Shape:\n    def area(self):\n        pass\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):\n        return self.width * self.height\nclass Circle(Shape):",
        "detail": "julson.Assignments.assignment13.polymo2",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "julson.Assignments.assignment13.polymo2",
        "description": "julson.Assignments.assignment13.polymo2",
        "peekOfCode": "class Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):\n        return self.width * self.height\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):",
        "detail": "julson.Assignments.assignment13.polymo2",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "julson.Assignments.assignment13.polymo2",
        "description": "julson.Assignments.assignment13.polymo2",
        "peekOfCode": "class Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return 3.14 * self.radius ** 2\nshapes = [Rectangle(5, 4), Circle(3)]\nfor shape in shapes:\n    print(\"Area:\", shape.area())",
        "detail": "julson.Assignments.assignment13.polymo2",
        "documentation": {}
    },
    {
        "label": "shapes",
        "kind": 5,
        "importPath": "julson.Assignments.assignment13.polymo2",
        "description": "julson.Assignments.assignment13.polymo2",
        "peekOfCode": "shapes = [Rectangle(5, 4), Circle(3)]\nfor shape in shapes:\n    print(\"Area:\", shape.area())",
        "detail": "julson.Assignments.assignment13.polymo2",
        "documentation": {}
    },
    {
        "label": "Dog",
        "kind": 6,
        "importPath": "julson.Assignments.assignment13.polymo3",
        "description": "julson.Assignments.assignment13.polymo3",
        "peekOfCode": "class Dog:\n    def sound(self):\n        return \"Woof!\"\nclass Cat:\n    def sound(self):\n        return \"Meow!\"\ndef make_sound(animal):\n    return animal.sound()\ndog = Dog()\ncat = Cat()",
        "detail": "julson.Assignments.assignment13.polymo3",
        "documentation": {}
    },
    {
        "label": "Cat",
        "kind": 6,
        "importPath": "julson.Assignments.assignment13.polymo3",
        "description": "julson.Assignments.assignment13.polymo3",
        "peekOfCode": "class Cat:\n    def sound(self):\n        return \"Meow!\"\ndef make_sound(animal):\n    return animal.sound()\ndog = Dog()\ncat = Cat()\nprint(make_sound(dog))  # Output: Woof!\nprint(make_sound(cat))  # Output: Meow!",
        "detail": "julson.Assignments.assignment13.polymo3",
        "documentation": {}
    },
    {
        "label": "make_sound",
        "kind": 2,
        "importPath": "julson.Assignments.assignment13.polymo3",
        "description": "julson.Assignments.assignment13.polymo3",
        "peekOfCode": "def make_sound(animal):\n    return animal.sound()\ndog = Dog()\ncat = Cat()\nprint(make_sound(dog))  # Output: Woof!\nprint(make_sound(cat))  # Output: Meow!",
        "detail": "julson.Assignments.assignment13.polymo3",
        "documentation": {}
    },
    {
        "label": "dog",
        "kind": 5,
        "importPath": "julson.Assignments.assignment13.polymo3",
        "description": "julson.Assignments.assignment13.polymo3",
        "peekOfCode": "dog = Dog()\ncat = Cat()\nprint(make_sound(dog))  # Output: Woof!\nprint(make_sound(cat))  # Output: Meow!",
        "detail": "julson.Assignments.assignment13.polymo3",
        "documentation": {}
    },
    {
        "label": "cat",
        "kind": 5,
        "importPath": "julson.Assignments.assignment13.polymo3",
        "description": "julson.Assignments.assignment13.polymo3",
        "peekOfCode": "cat = Cat()\nprint(make_sound(dog))  # Output: Woof!\nprint(make_sound(cat))  # Output: Meow!",
        "detail": "julson.Assignments.assignment13.polymo3",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "julson.Assignments.assignment13.polymorphism",
        "description": "julson.Assignments.assignment13.polymorphism",
        "peekOfCode": "class Car:\n  def __init__(self, brand, model):\n    self.brand = brand\n    self.model = model\n  def move(self):\n    print(\"Drive!\")\nclass Boat:\n  def __init__(self, brand, model):\n    self.brand = brand\n    self.model = model",
        "detail": "julson.Assignments.assignment13.polymorphism",
        "documentation": {}
    },
    {
        "label": "Boat",
        "kind": 6,
        "importPath": "julson.Assignments.assignment13.polymorphism",
        "description": "julson.Assignments.assignment13.polymorphism",
        "peekOfCode": "class Boat:\n  def __init__(self, brand, model):\n    self.brand = brand\n    self.model = model\n  def move(self):\n    print(\"Sail!\")\nclass Plane:\n  def __init__(self, brand, model):\n    self.brand = brand\n    self.model = model",
        "detail": "julson.Assignments.assignment13.polymorphism",
        "documentation": {}
    },
    {
        "label": "Plane",
        "kind": 6,
        "importPath": "julson.Assignments.assignment13.polymorphism",
        "description": "julson.Assignments.assignment13.polymorphism",
        "peekOfCode": "class Plane:\n  def __init__(self, brand, model):\n    self.brand = brand\n    self.model = model\n  def move(self):\n    print(\"Fly!\")\ncar1 = Car(\"Ford\", \"Mustang\")       #Create a Car class\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat class\nplane1 = Plane(\"Boeing\", \"747\")     #Create a Plane class\nfor x in (car1, boat1, plane1):",
        "detail": "julson.Assignments.assignment13.polymorphism",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "julson.Assignments.assignment13.polymorphism",
        "description": "julson.Assignments.assignment13.polymorphism",
        "peekOfCode": "x = \"Hello World!\"\n#print(len(x))\n#on a tuple\nmytuple = (\"apple\", \"banana\", \"cherry\")\n#print(len(mytuple))\nclass Car:\n  def __init__(self, brand, model):\n    self.brand = brand\n    self.model = model\n  def move(self):",
        "detail": "julson.Assignments.assignment13.polymorphism",
        "documentation": {}
    },
    {
        "label": "mytuple",
        "kind": 5,
        "importPath": "julson.Assignments.assignment13.polymorphism",
        "description": "julson.Assignments.assignment13.polymorphism",
        "peekOfCode": "mytuple = (\"apple\", \"banana\", \"cherry\")\n#print(len(mytuple))\nclass Car:\n  def __init__(self, brand, model):\n    self.brand = brand\n    self.model = model\n  def move(self):\n    print(\"Drive!\")\nclass Boat:\n  def __init__(self, brand, model):",
        "detail": "julson.Assignments.assignment13.polymorphism",
        "documentation": {}
    },
    {
        "label": "car1",
        "kind": 5,
        "importPath": "julson.Assignments.assignment13.polymorphism",
        "description": "julson.Assignments.assignment13.polymorphism",
        "peekOfCode": "car1 = Car(\"Ford\", \"Mustang\")       #Create a Car class\nboat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat class\nplane1 = Plane(\"Boeing\", \"747\")     #Create a Plane class\nfor x in (car1, boat1, plane1):\n  x.move()",
        "detail": "julson.Assignments.assignment13.polymorphism",
        "documentation": {}
    },
    {
        "label": "boat1",
        "kind": 5,
        "importPath": "julson.Assignments.assignment13.polymorphism",
        "description": "julson.Assignments.assignment13.polymorphism",
        "peekOfCode": "boat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat class\nplane1 = Plane(\"Boeing\", \"747\")     #Create a Plane class\nfor x in (car1, boat1, plane1):\n  x.move()",
        "detail": "julson.Assignments.assignment13.polymorphism",
        "documentation": {}
    },
    {
        "label": "plane1",
        "kind": 5,
        "importPath": "julson.Assignments.assignment13.polymorphism",
        "description": "julson.Assignments.assignment13.polymorphism",
        "peekOfCode": "plane1 = Plane(\"Boeing\", \"747\")     #Create a Plane class\nfor x in (car1, boat1, plane1):\n  x.move()",
        "detail": "julson.Assignments.assignment13.polymorphism",
        "documentation": {}
    },
    {
        "label": "phone_input",
        "kind": 5,
        "importPath": "julson.Assignments.assignment14.app2",
        "description": "julson.Assignments.assignment14.app2",
        "peekOfCode": "phone_input = []\n# Taking input from three variables\ninput_var1 = input(\"Enter first Phone: \")\ninput_var2 = input(\"Enter second Phone: \")\ninput_var3 = input(\"Enter third Phone: \")\n# Adding inputs to the list\nphone_input.append(input_var1)\nphone_input.append(input_var2)\nphone_input.append(input_var3)\nprint(phone_input)",
        "detail": "julson.Assignments.assignment14.app2",
        "documentation": {}
    },
    {
        "label": "input_var1",
        "kind": 5,
        "importPath": "julson.Assignments.assignment14.app2",
        "description": "julson.Assignments.assignment14.app2",
        "peekOfCode": "input_var1 = input(\"Enter first Phone: \")\ninput_var2 = input(\"Enter second Phone: \")\ninput_var3 = input(\"Enter third Phone: \")\n# Adding inputs to the list\nphone_input.append(input_var1)\nphone_input.append(input_var2)\nphone_input.append(input_var3)\nprint(phone_input)\n#reverse list\nphones_reverse = phone_input[::-1]",
        "detail": "julson.Assignments.assignment14.app2",
        "documentation": {}
    },
    {
        "label": "input_var2",
        "kind": 5,
        "importPath": "julson.Assignments.assignment14.app2",
        "description": "julson.Assignments.assignment14.app2",
        "peekOfCode": "input_var2 = input(\"Enter second Phone: \")\ninput_var3 = input(\"Enter third Phone: \")\n# Adding inputs to the list\nphone_input.append(input_var1)\nphone_input.append(input_var2)\nphone_input.append(input_var3)\nprint(phone_input)\n#reverse list\nphones_reverse = phone_input[::-1]\nprint(\"Reversed :\" , phones_reverse) ",
        "detail": "julson.Assignments.assignment14.app2",
        "documentation": {}
    },
    {
        "label": "input_var3",
        "kind": 5,
        "importPath": "julson.Assignments.assignment14.app2",
        "description": "julson.Assignments.assignment14.app2",
        "peekOfCode": "input_var3 = input(\"Enter third Phone: \")\n# Adding inputs to the list\nphone_input.append(input_var1)\nphone_input.append(input_var2)\nphone_input.append(input_var3)\nprint(phone_input)\n#reverse list\nphones_reverse = phone_input[::-1]\nprint(\"Reversed :\" , phones_reverse) \n#To Uppercase",
        "detail": "julson.Assignments.assignment14.app2",
        "documentation": {}
    },
    {
        "label": "phones_reverse",
        "kind": 5,
        "importPath": "julson.Assignments.assignment14.app2",
        "description": "julson.Assignments.assignment14.app2",
        "peekOfCode": "phones_reverse = phone_input[::-1]\nprint(\"Reversed :\" , phones_reverse) \n#To Uppercase\nphone_toUppercase = [word.upper() for word in phone_input]\nprint(\"To uppercase : \" , phone_toUppercase)\n#To Lowercase\nphone_toLowercase = [word.lower() for word in phone_input]\nprint(\"To Lowercase : \" , phone_toLowercase)\n#Strip : The strip() method removes any leading and trailing whitespaces from a string\nphone_strip = [word.strip() for word in phone_input]",
        "detail": "julson.Assignments.assignment14.app2",
        "documentation": {}
    },
    {
        "label": "phone_toUppercase",
        "kind": 5,
        "importPath": "julson.Assignments.assignment14.app2",
        "description": "julson.Assignments.assignment14.app2",
        "peekOfCode": "phone_toUppercase = [word.upper() for word in phone_input]\nprint(\"To uppercase : \" , phone_toUppercase)\n#To Lowercase\nphone_toLowercase = [word.lower() for word in phone_input]\nprint(\"To Lowercase : \" , phone_toLowercase)\n#Strip : The strip() method removes any leading and trailing whitespaces from a string\nphone_strip = [word.strip() for word in phone_input]\nprint(\"Striped : \" , phone_strip)\n#Count\nelement = input(\"Which phone do you wanna count : \")",
        "detail": "julson.Assignments.assignment14.app2",
        "documentation": {}
    },
    {
        "label": "phone_toLowercase",
        "kind": 5,
        "importPath": "julson.Assignments.assignment14.app2",
        "description": "julson.Assignments.assignment14.app2",
        "peekOfCode": "phone_toLowercase = [word.lower() for word in phone_input]\nprint(\"To Lowercase : \" , phone_toLowercase)\n#Strip : The strip() method removes any leading and trailing whitespaces from a string\nphone_strip = [word.strip() for word in phone_input]\nprint(\"Striped : \" , phone_strip)\n#Count\nelement = input(\"Which phone do you wanna count : \")\nphone_count = phone_input.count(element)\nprint(\"Counted : \" , phone_count)",
        "detail": "julson.Assignments.assignment14.app2",
        "documentation": {}
    },
    {
        "label": "phone_strip",
        "kind": 5,
        "importPath": "julson.Assignments.assignment14.app2",
        "description": "julson.Assignments.assignment14.app2",
        "peekOfCode": "phone_strip = [word.strip() for word in phone_input]\nprint(\"Striped : \" , phone_strip)\n#Count\nelement = input(\"Which phone do you wanna count : \")\nphone_count = phone_input.count(element)\nprint(\"Counted : \" , phone_count)",
        "detail": "julson.Assignments.assignment14.app2",
        "documentation": {}
    },
    {
        "label": "element",
        "kind": 5,
        "importPath": "julson.Assignments.assignment14.app2",
        "description": "julson.Assignments.assignment14.app2",
        "peekOfCode": "element = input(\"Which phone do you wanna count : \")\nphone_count = phone_input.count(element)\nprint(\"Counted : \" , phone_count)",
        "detail": "julson.Assignments.assignment14.app2",
        "documentation": {}
    },
    {
        "label": "phone_count",
        "kind": 5,
        "importPath": "julson.Assignments.assignment14.app2",
        "description": "julson.Assignments.assignment14.app2",
        "peekOfCode": "phone_count = phone_input.count(element)\nprint(\"Counted : \" , phone_count)",
        "detail": "julson.Assignments.assignment14.app2",
        "documentation": {}
    },
    {
        "label": "lines_to_write",
        "kind": 5,
        "importPath": "julson.Assignments.assignment15.write.my_file2",
        "description": "julson.Assignments.assignment15.write.my_file2",
        "peekOfCode": "lines_to_write = [\n    \"First line\",\n    \"Second line\",\n    \"Third line\"\n]\n# Open the file in write mode ('w' mode will overwrite existing file or create a new one)\nwith open('output.txt', 'w') as file:\n    # Write each line from the list to the file\n    for line in lines_to_write:\n        file.write(line + '\\n')  # Add a newline character to separate lines",
        "detail": "julson.Assignments.assignment15.write.my_file2",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "julson.Assignments.assignment15.my_file",
        "description": "julson.Assignments.assignment15.my_file",
        "peekOfCode": "f = open(\"my_text.txt\", \"r\")   # Opens \"my_text.txt\" for reading\ncontent = f.read()\nprint(content)",
        "detail": "julson.Assignments.assignment15.my_file",
        "documentation": {}
    },
    {
        "label": "content",
        "kind": 5,
        "importPath": "julson.Assignments.assignment15.my_file",
        "description": "julson.Assignments.assignment15.my_file",
        "peekOfCode": "content = f.read()\nprint(content)",
        "detail": "julson.Assignments.assignment15.my_file",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "julson.Assignments.assignment15.range",
        "description": "julson.Assignments.assignment15.range",
        "peekOfCode": "def main(start, end, step):\n    # Using range() with specified start, end, and step\n    for i in range(start, end, step):\n        print(i)\nif __name__ == \"__main__\":\n    # Calling main function with start, end, and step values\n    start = int(input(\"Enter start value: \"))\n    end = int(input(\"Enter end value: \"))\n    step = int(input(\"Enter step value: \"))\n    main(start, end, step)",
        "detail": "julson.Assignments.assignment15.range",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 5,
        "importPath": "julson.Assignments.assignment2.area",
        "description": "julson.Assignments.assignment2.area",
        "peekOfCode": "length = 20\nwidth = 10\narea= length*width\nprint(area)",
        "detail": "julson.Assignments.assignment2.area",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "julson.Assignments.assignment2.area",
        "description": "julson.Assignments.assignment2.area",
        "peekOfCode": "width = 10\narea= length*width\nprint(area)",
        "detail": "julson.Assignments.assignment2.area",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "julson.Assignments.assignment3.casting",
        "description": "julson.Assignments.assignment3.casting",
        "peekOfCode": "num = 123\nnum_str = str(num)\nprint(num_str)  # Output: \"123\"\n#Int\nnum_str = \"456\"\nnum = int(num_str)\nprint(num)  # Output: 456\nfloat_num = 3.14\nint_num = int(float_num)\nprint(int_num)  # Output: 3",
        "detail": "julson.Assignments.assignment3.casting",
        "documentation": {}
    },
    {
        "label": "num_str",
        "kind": 5,
        "importPath": "julson.Assignments.assignment3.casting",
        "description": "julson.Assignments.assignment3.casting",
        "peekOfCode": "num_str = str(num)\nprint(num_str)  # Output: \"123\"\n#Int\nnum_str = \"456\"\nnum = int(num_str)\nprint(num)  # Output: 456\nfloat_num = 3.14\nint_num = int(float_num)\nprint(int_num)  # Output: 3",
        "detail": "julson.Assignments.assignment3.casting",
        "documentation": {}
    },
    {
        "label": "num_str",
        "kind": 5,
        "importPath": "julson.Assignments.assignment3.casting",
        "description": "julson.Assignments.assignment3.casting",
        "peekOfCode": "num_str = \"456\"\nnum = int(num_str)\nprint(num)  # Output: 456\nfloat_num = 3.14\nint_num = int(float_num)\nprint(int_num)  # Output: 3",
        "detail": "julson.Assignments.assignment3.casting",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "julson.Assignments.assignment3.casting",
        "description": "julson.Assignments.assignment3.casting",
        "peekOfCode": "num = int(num_str)\nprint(num)  # Output: 456\nfloat_num = 3.14\nint_num = int(float_num)\nprint(int_num)  # Output: 3",
        "detail": "julson.Assignments.assignment3.casting",
        "documentation": {}
    },
    {
        "label": "float_num",
        "kind": 5,
        "importPath": "julson.Assignments.assignment3.casting",
        "description": "julson.Assignments.assignment3.casting",
        "peekOfCode": "float_num = 3.14\nint_num = int(float_num)\nprint(int_num)  # Output: 3",
        "detail": "julson.Assignments.assignment3.casting",
        "documentation": {}
    },
    {
        "label": "int_num",
        "kind": 5,
        "importPath": "julson.Assignments.assignment3.casting",
        "description": "julson.Assignments.assignment3.casting",
        "peekOfCode": "int_num = int(float_num)\nprint(int_num)  # Output: 3",
        "detail": "julson.Assignments.assignment3.casting",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "julson.Assignments.assignment3.del",
        "description": "julson.Assignments.assignment3.del",
        "peekOfCode": "name = \"Mumbere\"\ndel name\nprint(name)\n# example 2\nstudents = [\"Maurice\",\"Emma\",\"Joel\"]\nprint(students)\ndel students",
        "detail": "julson.Assignments.assignment3.del",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "julson.Assignments.assignment3.del",
        "description": "julson.Assignments.assignment3.del",
        "peekOfCode": "students = [\"Maurice\",\"Emma\",\"Joel\"]\nprint(students)\ndel students",
        "detail": "julson.Assignments.assignment3.del",
        "documentation": {}
    },
    {
        "label": "a=b=c",
        "kind": 5,
        "importPath": "julson.Assignments.assignment3.multi",
        "description": "julson.Assignments.assignment3.multi",
        "peekOfCode": "a=b=c = 40\nprint(a, b, c)\n# example 2\nDog, goat = 10, 200\nDog, goat = Dog, goat\nprint(\"Dog:\", Dog, \"goat:\", goat)\n# example 3\nx, y, z = 5, 2, 99\nprint(\"x:\", x)\nprint(\"y:\", y)",
        "detail": "julson.Assignments.assignment3.multi",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "julson.Assignments.assignment4.adding_to_list",
        "description": "julson.Assignments.assignment4.adding_to_list",
        "peekOfCode": "my_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list)  # Output: [1, 2, 3, 4]\n# Adding elements using extend()\nnew_elements = [5, 6]\nmy_list.extend(new_elements)\nprint(my_list)  # Output: [1, 2, 3, 4, 5, 6]",
        "detail": "julson.Assignments.assignment4.adding_to_list",
        "documentation": {}
    },
    {
        "label": "new_elements",
        "kind": 5,
        "importPath": "julson.Assignments.assignment4.adding_to_list",
        "description": "julson.Assignments.assignment4.adding_to_list",
        "peekOfCode": "new_elements = [5, 6]\nmy_list.extend(new_elements)\nprint(my_list)  # Output: [1, 2, 3, 4, 5, 6]",
        "detail": "julson.Assignments.assignment4.adding_to_list",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "julson.Assignments.assignment4.removing",
        "description": "julson.Assignments.assignment4.removing",
        "peekOfCode": "my_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list)  # Output: [1, 2, 3, 4]\n# Adding elements using extend()\nnew_elements = [5, 6]\nmy_list.extend(new_elements)\nprint(my_list)  # Output: [1, 2, 3, 4, 5, 6]\n# Removing elements using pop()\npopped_element = my_list.pop()\nprint(\"Popped element:\", popped_element)  # Output: 6",
        "detail": "julson.Assignments.assignment4.removing",
        "documentation": {}
    },
    {
        "label": "new_elements",
        "kind": 5,
        "importPath": "julson.Assignments.assignment4.removing",
        "description": "julson.Assignments.assignment4.removing",
        "peekOfCode": "new_elements = [5, 6]\nmy_list.extend(new_elements)\nprint(my_list)  # Output: [1, 2, 3, 4, 5, 6]\n# Removing elements using pop()\npopped_element = my_list.pop()\nprint(\"Popped element:\", popped_element)  # Output: 6\nprint(\"Updated list after pop:\", my_list)  # Output: [1, 2, 3, 4, 5]\n# Removing elements using remove()\nmy_list.remove(3)\nprint(\"Updated list after remove:\", my_list)  # Output: [1, 2, 4, 5]",
        "detail": "julson.Assignments.assignment4.removing",
        "documentation": {}
    },
    {
        "label": "popped_element",
        "kind": 5,
        "importPath": "julson.Assignments.assignment4.removing",
        "description": "julson.Assignments.assignment4.removing",
        "peekOfCode": "popped_element = my_list.pop()\nprint(\"Popped element:\", popped_element)  # Output: 6\nprint(\"Updated list after pop:\", my_list)  # Output: [1, 2, 3, 4, 5]\n# Removing elements using remove()\nmy_list.remove(3)\nprint(\"Updated list after remove:\", my_list)  # Output: [1, 2, 4, 5]\n# Removing elements using del\ndel my_list[1]\nprint(\"Updated list after del:\", my_list)  # Output: [1, 4, 5]",
        "detail": "julson.Assignments.assignment4.removing",
        "documentation": {}
    },
    {
        "label": "greetings",
        "kind": 2,
        "importPath": "julson.Assignments.assignment5.function",
        "description": "julson.Assignments.assignment5.function",
        "peekOfCode": "def greetings():\n   \"This is docstring of greetings function\"\n   print (\"Hello World\")\n   return\ngreetings()\n#display time\ndef cureent_time_datime():\n   now = time.localtime()\n   tt = time.strftime( now)\n   print(\"Current time :\", tt)",
        "detail": "julson.Assignments.assignment5.function",
        "documentation": {}
    },
    {
        "label": "cureent_time_datime",
        "kind": 2,
        "importPath": "julson.Assignments.assignment5.function",
        "description": "julson.Assignments.assignment5.function",
        "peekOfCode": "def cureent_time_datime():\n   now = time.localtime()\n   tt = time.strftime( now)\n   print(\"Current time :\", tt)\n# adding to a funtion\n   def testfunction(arg):\n      print (\"Inside function:\",arg)\n   print (\"ID inside the function:\", id(arg))\n   arg=arg.append(100)\n   var=[10, 20, 30, 40]",
        "detail": "julson.Assignments.assignment5.function",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 2,
        "importPath": "julson.Assignments.assignment6.functions",
        "description": "julson.Assignments.assignment6.functions",
        "peekOfCode": "def name():\n    n = input(\"Enter Your Name \")\nname()\n# def age():\n#     Age = 22\n#     print (name() + str(Age))\n# age()\ndef Age():\n     Age = input(\"Enter your Age \")\n     print (name() + Age)",
        "detail": "julson.Assignments.assignment6.functions",
        "documentation": {}
    },
    {
        "label": "Age",
        "kind": 2,
        "importPath": "julson.Assignments.assignment6.functions",
        "description": "julson.Assignments.assignment6.functions",
        "peekOfCode": "def Age():\n     Age = input(\"Enter your Age \")\n     print (name() + Age)\nAge()",
        "detail": "julson.Assignments.assignment6.functions",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "julson.Assignments.assignment6.input",
        "description": "julson.Assignments.assignment6.input",
        "peekOfCode": "def add(num1=10,num2=5):\n    return(num1+num2)\ndef get input():\n    n1=input(\"Enter first value \")\n    n2=input(\"Enter Second Value \")",
        "detail": "julson.Assignments.assignment6.input",
        "documentation": {}
    },
    {
        "label": "ge",
        "kind": 2,
        "importPath": "julson.Assignments.assignment6.input",
        "description": "julson.Assignments.assignment6.input",
        "peekOfCode": "def get input():\n    n1=input(\"Enter first value \")\n    n2=input(\"Enter Second Value \")",
        "detail": "julson.Assignments.assignment6.input",
        "documentation": {}
    },
    {
        "label": "multi",
        "kind": 2,
        "importPath": "julson.Assignments.assignment7.multi",
        "description": "julson.Assignments.assignment7.multi",
        "peekOfCode": "def multi(x,y):\n    return x*y\nresult = multi(5,2)\nprint(result)",
        "detail": "julson.Assignments.assignment7.multi",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "julson.Assignments.assignment7.multi",
        "description": "julson.Assignments.assignment7.multi",
        "peekOfCode": "result = multi(5,2)\nprint(result)",
        "detail": "julson.Assignments.assignment7.multi",
        "documentation": {}
    },
    {
        "label": "subtrat",
        "kind": 2,
        "importPath": "julson.Assignments.assignment7.sub",
        "description": "julson.Assignments.assignment7.sub",
        "peekOfCode": "def subtrat(x, y):\n    return x-y\nresult = subtrat(10, 4)\nprint (result)",
        "detail": "julson.Assignments.assignment7.sub",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "julson.Assignments.assignment7.sub",
        "description": "julson.Assignments.assignment7.sub",
        "peekOfCode": "result = subtrat(10, 4)\nprint (result)",
        "detail": "julson.Assignments.assignment7.sub",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.Assignment08",
        "description": "julson.Assignments.assignment8.Assignment08",
        "peekOfCode": "numbers = [1, 2, 3,4 ,5]\nsquared_numbers = [x**2 for x in numbers]\nprint(squared_numbers)\n#Pop\nelement = numbers.pop(3)\nprint(\"This is a Pop number :\", element)\nprint(\"This are numbers after pop :\",numbers)",
        "detail": "julson.Assignments.assignment8.Assignment08",
        "documentation": {}
    },
    {
        "label": "squared_numbers",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.Assignment08",
        "description": "julson.Assignments.assignment8.Assignment08",
        "peekOfCode": "squared_numbers = [x**2 for x in numbers]\nprint(squared_numbers)\n#Pop\nelement = numbers.pop(3)\nprint(\"This is a Pop number :\", element)\nprint(\"This are numbers after pop :\",numbers)",
        "detail": "julson.Assignments.assignment8.Assignment08",
        "documentation": {}
    },
    {
        "label": "element",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.Assignment08",
        "description": "julson.Assignments.assignment8.Assignment08",
        "peekOfCode": "element = numbers.pop(3)\nprint(\"This is a Pop number :\", element)\nprint(\"This are numbers after pop :\",numbers)",
        "detail": "julson.Assignments.assignment8.Assignment08",
        "documentation": {}
    },
    {
        "label": "dic1",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.dic_oparation",
        "description": "julson.Assignments.assignment8.dic_oparation",
        "peekOfCode": "dic1 = {'a':1, 'b':2}\ndic2 = {'b':3, 'c':4}\n#upsating a Dictionary\ndic1.update(dic2)\nprint(dic1)\n#comparison\ndic3 = {'a':1, 'b':2}\ndic4 = {'b':3, 'c':4}\nprint(dic3==dic4)\n#length",
        "detail": "julson.Assignments.assignment8.dic_oparation",
        "documentation": {}
    },
    {
        "label": "dic2",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.dic_oparation",
        "description": "julson.Assignments.assignment8.dic_oparation",
        "peekOfCode": "dic2 = {'b':3, 'c':4}\n#upsating a Dictionary\ndic1.update(dic2)\nprint(dic1)\n#comparison\ndic3 = {'a':1, 'b':2}\ndic4 = {'b':3, 'c':4}\nprint(dic3==dic4)\n#length\nprint(len(dic1))",
        "detail": "julson.Assignments.assignment8.dic_oparation",
        "documentation": {}
    },
    {
        "label": "dic3",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.dic_oparation",
        "description": "julson.Assignments.assignment8.dic_oparation",
        "peekOfCode": "dic3 = {'a':1, 'b':2}\ndic4 = {'b':3, 'c':4}\nprint(dic3==dic4)\n#length\nprint(len(dic1))\n#sorting items in dict\ndic5 = {'b':2, 'a':1,'c':3}\nsorted_dic=dict(sorted(dic5.items()))\nprint(sorted_dic)",
        "detail": "julson.Assignments.assignment8.dic_oparation",
        "documentation": {}
    },
    {
        "label": "dic4",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.dic_oparation",
        "description": "julson.Assignments.assignment8.dic_oparation",
        "peekOfCode": "dic4 = {'b':3, 'c':4}\nprint(dic3==dic4)\n#length\nprint(len(dic1))\n#sorting items in dict\ndic5 = {'b':2, 'a':1,'c':3}\nsorted_dic=dict(sorted(dic5.items()))\nprint(sorted_dic)",
        "detail": "julson.Assignments.assignment8.dic_oparation",
        "documentation": {}
    },
    {
        "label": "dic5",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.dic_oparation",
        "description": "julson.Assignments.assignment8.dic_oparation",
        "peekOfCode": "dic5 = {'b':2, 'a':1,'c':3}\nsorted_dic=dict(sorted(dic5.items()))\nprint(sorted_dic)",
        "detail": "julson.Assignments.assignment8.dic_oparation",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.list_oparations",
        "description": "julson.Assignments.assignment8.list_oparations",
        "peekOfCode": "list2 = [\"John\",20,30]\nnew_list = list1 + list2\nprint (new_list)\n#clearing a list, removes everything from a list\n#cleared_list = list2.clear\n#Count\ncount_items = new_list.count('20')\nprint(count_items)\n#sort only works for numbers\nunsorted = [29,30,40,1]",
        "detail": "julson.Assignments.assignment8.list_oparations",
        "documentation": {}
    },
    {
        "label": "new_list",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.list_oparations",
        "description": "julson.Assignments.assignment8.list_oparations",
        "peekOfCode": "new_list = list1 + list2\nprint (new_list)\n#clearing a list, removes everything from a list\n#cleared_list = list2.clear\n#Count\ncount_items = new_list.count('20')\nprint(count_items)\n#sort only works for numbers\nunsorted = [29,30,40,1]\n#sorted_items = new_list.sort()",
        "detail": "julson.Assignments.assignment8.list_oparations",
        "documentation": {}
    },
    {
        "label": "#cleared_list",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.list_oparations",
        "description": "julson.Assignments.assignment8.list_oparations",
        "peekOfCode": "#cleared_list = list2.clear\n#Count\ncount_items = new_list.count('20')\nprint(count_items)\n#sort only works for numbers\nunsorted = [29,30,40,1]\n#sorted_items = new_list.sort()\nunsorted.sort()\nprint (\"Thise are the sorted items: \",unsorted)\n#reverse sort",
        "detail": "julson.Assignments.assignment8.list_oparations",
        "documentation": {}
    },
    {
        "label": "count_items",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.list_oparations",
        "description": "julson.Assignments.assignment8.list_oparations",
        "peekOfCode": "count_items = new_list.count('20')\nprint(count_items)\n#sort only works for numbers\nunsorted = [29,30,40,1]\n#sorted_items = new_list.sort()\nunsorted.sort()\nprint (\"Thise are the sorted items: \",unsorted)\n#reverse sort\nunsorted.reverse()\nprint(unsorted)",
        "detail": "julson.Assignments.assignment8.list_oparations",
        "documentation": {}
    },
    {
        "label": "unsorted",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.list_oparations",
        "description": "julson.Assignments.assignment8.list_oparations",
        "peekOfCode": "unsorted = [29,30,40,1]\n#sorted_items = new_list.sort()\nunsorted.sort()\nprint (\"Thise are the sorted items: \",unsorted)\n#reverse sort\nunsorted.reverse()\nprint(unsorted)\n#coping\ncopied = unsorted.copy()\nprint(copied)",
        "detail": "julson.Assignments.assignment8.list_oparations",
        "documentation": {}
    },
    {
        "label": "#sorted_items",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.list_oparations",
        "description": "julson.Assignments.assignment8.list_oparations",
        "peekOfCode": "#sorted_items = new_list.sort()\nunsorted.sort()\nprint (\"Thise are the sorted items: \",unsorted)\n#reverse sort\nunsorted.reverse()\nprint(unsorted)\n#coping\ncopied = unsorted.copy()\nprint(copied)",
        "detail": "julson.Assignments.assignment8.list_oparations",
        "documentation": {}
    },
    {
        "label": "copied",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.list_oparations",
        "description": "julson.Assignments.assignment8.list_oparations",
        "peekOfCode": "copied = unsorted.copy()\nprint(copied)",
        "detail": "julson.Assignments.assignment8.list_oparations",
        "documentation": {}
    },
    {
        "label": "a,*b,c",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.my_tuple_oparations",
        "description": "julson.Assignments.assignment8.my_tuple_oparations",
        "peekOfCode": "a,*b,c = tuple1\nprint(\"Item assign to a :\", a)\nprint(\"Item assign to b :\", b)\nprint(\"Item assign to c :\", c)\n#tuple comparison\ntuple2 = (1,2,3)\ntuple3 = (1,2,4)\nprint(tuple1==tuple2)\n#deleting a tuple\ntuple4 = (1,2,3,4,5)",
        "detail": "julson.Assignments.assignment8.my_tuple_oparations",
        "documentation": {}
    },
    {
        "label": "tuple2",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.my_tuple_oparations",
        "description": "julson.Assignments.assignment8.my_tuple_oparations",
        "peekOfCode": "tuple2 = (1,2,3)\ntuple3 = (1,2,4)\nprint(tuple1==tuple2)\n#deleting a tuple\ntuple4 = (1,2,3,4,5)\ndel tuple4\n#print (tuple4)\ntuple5 =(\"John\",False,20,0.7,10,30)\nslice_tuple = tuple5[1:5]\nprint(\"slice :\",slice_tuple)",
        "detail": "julson.Assignments.assignment8.my_tuple_oparations",
        "documentation": {}
    },
    {
        "label": "tuple3",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.my_tuple_oparations",
        "description": "julson.Assignments.assignment8.my_tuple_oparations",
        "peekOfCode": "tuple3 = (1,2,4)\nprint(tuple1==tuple2)\n#deleting a tuple\ntuple4 = (1,2,3,4,5)\ndel tuple4\n#print (tuple4)\ntuple5 =(\"John\",False,20,0.7,10,30)\nslice_tuple = tuple5[1:5]\nprint(\"slice :\",slice_tuple)",
        "detail": "julson.Assignments.assignment8.my_tuple_oparations",
        "documentation": {}
    },
    {
        "label": "tuple4",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.my_tuple_oparations",
        "description": "julson.Assignments.assignment8.my_tuple_oparations",
        "peekOfCode": "tuple4 = (1,2,3,4,5)\ndel tuple4\n#print (tuple4)\ntuple5 =(\"John\",False,20,0.7,10,30)\nslice_tuple = tuple5[1:5]\nprint(\"slice :\",slice_tuple)",
        "detail": "julson.Assignments.assignment8.my_tuple_oparations",
        "documentation": {}
    },
    {
        "label": "slice_tuple",
        "kind": 5,
        "importPath": "julson.Assignments.assignment8.my_tuple_oparations",
        "description": "julson.Assignments.assignment8.my_tuple_oparations",
        "peekOfCode": "slice_tuple = tuple5[1:5]\nprint(\"slice :\",slice_tuple)",
        "detail": "julson.Assignments.assignment8.my_tuple_oparations",
        "documentation": {}
    },
    {
        "label": "deposit",
        "kind": 2,
        "importPath": "julson.Assignments.assignment9.ban",
        "description": "julson.Assignments.assignment9.ban",
        "peekOfCode": "def deposit(amount):\n    balance += amount\n    print(\"Deposited ${}. Current balance: ${}\".format(amount, balance))\ndef withdraw(amount):\n    if amount <= balance:\n        balance -= amount\n        print(\"Withdrew ${}. Current balance: ${}\".format(amount, balance))\n    else:\n        print(\"Insufficient funds.\")\ndef check_balance():",
        "detail": "julson.Assignments.assignment9.ban",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "kind": 2,
        "importPath": "julson.Assignments.assignment9.ban",
        "description": "julson.Assignments.assignment9.ban",
        "peekOfCode": "def withdraw(amount):\n    if amount <= balance:\n        balance -= amount\n        print(\"Withdrew ${}. Current balance: ${}\".format(amount, balance))\n    else:\n        print(\"Insufficient funds.\")\ndef check_balance():\n    print(\"Current balance: ${}\".format(balance))\nprint(\"\\nServices available:\")\nprint(\"1. Check Balance\")",
        "detail": "julson.Assignments.assignment9.ban",
        "documentation": {}
    },
    {
        "label": "check_balance",
        "kind": 2,
        "importPath": "julson.Assignments.assignment9.ban",
        "description": "julson.Assignments.assignment9.ban",
        "peekOfCode": "def check_balance():\n    print(\"Current balance: ${}\".format(balance))\nprint(\"\\nServices available:\")\nprint(\"1. Check Balance\")\nprint(\"2. Deposit\")\nprint(\"3. Withdraw\")\nprint(\"4. Exit\")\n\"* \" *10\nchoice = int(input(\"Enter choice: \"))\nif choice == 1:",
        "detail": "julson.Assignments.assignment9.ban",
        "documentation": {}
    },
    {
        "label": "balance",
        "kind": 5,
        "importPath": "julson.Assignments.assignment9.ban",
        "description": "julson.Assignments.assignment9.ban",
        "peekOfCode": "balance = 0\nprint(\"Hello\")\ndef deposit(amount):\n    balance += amount\n    print(\"Deposited ${}. Current balance: ${}\".format(amount, balance))\ndef withdraw(amount):\n    if amount <= balance:\n        balance -= amount\n        print(\"Withdrew ${}. Current balance: ${}\".format(amount, balance))\n    else:",
        "detail": "julson.Assignments.assignment9.ban",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": "julson.Assignments.assignment9.ban",
        "description": "julson.Assignments.assignment9.ban",
        "peekOfCode": "choice = int(input(\"Enter choice: \"))\nif choice == 1:\n    check_balance()\nelif choice == 2:\n    amount = float(input(\"Enter deposit amount: $\"))\n    deposit(amount)\nelif choice == 3:\n    amount = float(input(\"Enter withdrawal amount: $\"))\n    withdraw(amount)\nelif choice == 4:",
        "detail": "julson.Assignments.assignment9.ban",
        "documentation": {}
    },
    {
        "label": "deposit",
        "kind": 2,
        "importPath": "julson.Assignments.assignment9.bbank",
        "description": "julson.Assignments.assignment9.bbank",
        "peekOfCode": "def deposit(amount):\n    global balance     #global function can be called from multiple parts of the code\n    balance += amount\n    print(\"Deposited ${}. Current balance: ${}\".format(amount, balance))\ndef withdraw(amount):\n    global balance\n    if amount <= balance:\n        balance -= amount\n        print(\"Withdrew ${}. Current balance: ${}\".format(amount, balance))\n    else:",
        "detail": "julson.Assignments.assignment9.bbank",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "kind": 2,
        "importPath": "julson.Assignments.assignment9.bbank",
        "description": "julson.Assignments.assignment9.bbank",
        "peekOfCode": "def withdraw(amount):\n    global balance\n    if amount <= balance:\n        balance -= amount\n        print(\"Withdrew ${}. Current balance: ${}\".format(amount, balance))\n    else:\n        print(\"Insufficient funds.\")\ndef check_balance():\n    print(\"Current balance: ${}\".format(balance))\nwhile True:",
        "detail": "julson.Assignments.assignment9.bbank",
        "documentation": {}
    },
    {
        "label": "check_balance",
        "kind": 2,
        "importPath": "julson.Assignments.assignment9.bbank",
        "description": "julson.Assignments.assignment9.bbank",
        "peekOfCode": "def check_balance():\n    print(\"Current balance: ${}\".format(balance))\nwhile True:\n    print(\"\\nATM services Available Options:\")\n    print(\"1. Check Balance\")\n    print(\"2. Deposit\")\n    print(\"3. Withdraw\")\n    print(\"4. Exit\")\n    choice = int(input(\"Enter choice: \"))\n    if choice == 1:",
        "detail": "julson.Assignments.assignment9.bbank",
        "documentation": {}
    },
    {
        "label": "balance",
        "kind": 5,
        "importPath": "julson.Assignments.assignment9.bbank",
        "description": "julson.Assignments.assignment9.bbank",
        "peekOfCode": "balance = 0\ndef deposit(amount):\n    global balance     #global function can be called from multiple parts of the code\n    balance += amount\n    print(\"Deposited ${}. Current balance: ${}\".format(amount, balance))\ndef withdraw(amount):\n    global balance\n    if amount <= balance:\n        balance -= amount\n        print(\"Withdrew ${}. Current balance: ${}\".format(amount, balance))",
        "detail": "julson.Assignments.assignment9.bbank",
        "documentation": {}
    },
    {
        "label": "#day",
        "kind": 5,
        "importPath": "julson.Assignments.assignment9.weekdays",
        "description": "julson.Assignments.assignment9.weekdays",
        "peekOfCode": "#day = datetime.now()\n#current_day_of_week = day.weekday()\n#print(\"current day (0 = Monday) :\",current_day_of_week)\n#print(day)\n#print(datetime.now().day)\nWeekDay='monday'\nif WeekDay == 'monday':\n   print (\"Go and Work\")\nelif WeekDay == 'Tuesday':\n   print (\"Its a Tuesday\")",
        "detail": "julson.Assignments.assignment9.weekdays",
        "documentation": {}
    },
    {
        "label": "#current_day_of_week",
        "kind": 5,
        "importPath": "julson.Assignments.assignment9.weekdays",
        "description": "julson.Assignments.assignment9.weekdays",
        "peekOfCode": "#current_day_of_week = day.weekday()\n#print(\"current day (0 = Monday) :\",current_day_of_week)\n#print(day)\n#print(datetime.now().day)\nWeekDay='monday'\nif WeekDay == 'monday':\n   print (\"Go and Work\")\nelif WeekDay == 'Tuesday':\n   print (\"Its a Tuesday\")\nelif WeekDay == 'Wednesday':",
        "detail": "julson.Assignments.assignment9.weekdays",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "maurice.2Darray.while",
        "description": "maurice.2Darray.while",
        "peekOfCode": "sum = 0\ncount = 1\nwhile count <=10:\n    sum +=count\n    count += 1\n# print(\"sum to 10: \", sum)",
        "detail": "maurice.2Darray.while",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "maurice.2Darray.while",
        "description": "maurice.2Darray.while",
        "peekOfCode": "count = 1\nwhile count <=10:\n    sum +=count\n    count += 1\n# print(\"sum to 10: \", sum)",
        "detail": "maurice.2Darray.while",
        "documentation": {}
    },
    {
        "label": "calculation",
        "kind": 2,
        "importPath": "maurice.advanced_functions.main",
        "description": "maurice.advanced_functions.main",
        "peekOfCode": "def calculation(a,b):\n    a=input('enter no1: ')\n    b=input('enter no.2: ')\n    return a*b \nprint(calculation(4,5))\ndef main():\n    print('This script is being executed')\nif __name__==\"__main__\":\n    main()",
        "detail": "maurice.advanced_functions.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "maurice.advanced_functions.main",
        "description": "maurice.advanced_functions.main",
        "peekOfCode": "def main():\n    print('This script is being executed')\nif __name__==\"__main__\":\n    main()",
        "detail": "maurice.advanced_functions.main",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "maurice.asignments.assignment 12.abstruction",
        "description": "maurice.asignments.assignment 12.abstruction",
        "peekOfCode": "class Car(ABC):\n    def Toyota(self):\n        pass\nclass Tesla(Car):\n    def Toyota(self):\n        print(\"Toyota is slowing down\")\nclass Suzuki(Car):\n    def Toyota(self):\n        print(\"Toyota is stopping\")\nclass BMW(Car):",
        "detail": "maurice.asignments.assignment 12.abstruction",
        "documentation": {}
    },
    {
        "label": "Tesla",
        "kind": 6,
        "importPath": "maurice.asignments.assignment 12.abstruction",
        "description": "maurice.asignments.assignment 12.abstruction",
        "peekOfCode": "class Tesla(Car):\n    def Toyota(self):\n        print(\"Toyota is slowing down\")\nclass Suzuki(Car):\n    def Toyota(self):\n        print(\"Toyota is stopping\")\nclass BMW(Car):\n    def Toyota(self):\n        print(\"Toyota has stopped\")\nc1=Tesla()",
        "detail": "maurice.asignments.assignment 12.abstruction",
        "documentation": {}
    },
    {
        "label": "Suzuki",
        "kind": 6,
        "importPath": "maurice.asignments.assignment 12.abstruction",
        "description": "maurice.asignments.assignment 12.abstruction",
        "peekOfCode": "class Suzuki(Car):\n    def Toyota(self):\n        print(\"Toyota is stopping\")\nclass BMW(Car):\n    def Toyota(self):\n        print(\"Toyota has stopped\")\nc1=Tesla()\nc1.Toyota()\nc2=Suzuki()\nc2.Toyota()",
        "detail": "maurice.asignments.assignment 12.abstruction",
        "documentation": {}
    },
    {
        "label": "BMW",
        "kind": 6,
        "importPath": "maurice.asignments.assignment 12.abstruction",
        "description": "maurice.asignments.assignment 12.abstruction",
        "peekOfCode": "class BMW(Car):\n    def Toyota(self):\n        print(\"Toyota has stopped\")\nc1=Tesla()\nc1.Toyota()\nc2=Suzuki()\nc2.Toyota()\nc3=BMW()\nc3.Toyota()",
        "detail": "maurice.asignments.assignment 12.abstruction",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "maurice.asignments.assignment 12.encapsulation",
        "description": "maurice.asignments.assignment 12.encapsulation",
        "peekOfCode": "class Student:\n    def __init__(self,name,height):\n        self.__name=name\n        self.__height=height\n    def set_height(self,value):\n        self.__height=value \n    def get_height(self):\n       return self.__height\n    def set_name(self,value):\n        self.__name=value",
        "detail": "maurice.asignments.assignment 12.encapsulation",
        "documentation": {}
    },
    {
        "label": "Workers",
        "kind": 6,
        "importPath": "maurice.asignments.assignment13.encapsulation1",
        "description": "maurice.asignments.assignment13.encapsulation1",
        "peekOfCode": "class Workers:\n    def __init__(self,name,salary):\n        self.__name=name\n        self.__salary=salary\n    def workerd_data(self):\n        print(f'Name:{self.__name},Salary:{self.__salary}')\nw1=Workers(\"Mercy\",30)\nw2=Workers(\"Fred\",32)\nw1.workerd_data()\nw2.workerd_data()",
        "detail": "maurice.asignments.assignment13.encapsulation1",
        "documentation": {}
    },
    {
        "label": "Laptops",
        "kind": 6,
        "importPath": "maurice.asignments.assignment13.encapsulation1",
        "description": "maurice.asignments.assignment13.encapsulation1",
        "peekOfCode": "class Laptops:\n    def __init__(self,type,year):\n        self.__type=type\n        self.__year=year\n    def laptop_data(self):\n        print(f'Name:{self.__type},Salary:{self.__year}')\nl1=Laptops(\"Toshiba\",1994)\nl2=Laptops(\"Fred\",32)\nl1.laptop_data()\nl2.laptop_data()",
        "detail": "maurice.asignments.assignment13.encapsulation1",
        "documentation": {}
    },
    {
        "label": "Music",
        "kind": 6,
        "importPath": "maurice.asignments.assignment13.encapsulation1",
        "description": "maurice.asignments.assignment13.encapsulation1",
        "peekOfCode": "class Music:\n    def __init__(self,genre,musician):\n        self.__genre=genre\n        self.__musician=musician\n    def music_data(self):\n        print(f'Name:{self.__genre},Salary:{self.__musician}')\nm1=Music(\"Pop\",\"Selena Gomez\")\nm2=Music(\"RnB\",\"SZA\")\nm1.music_data()\nm2.music_data()",
        "detail": "maurice.asignments.assignment13.encapsulation1",
        "documentation": {}
    },
    {
        "label": "Humans",
        "kind": 6,
        "importPath": "maurice.asignments.assignment13.polymophism",
        "description": "maurice.asignments.assignment13.polymophism",
        "peekOfCode": "class Humans:\n    def breathe(self):\n        print(\"Humans can breathe\")\n    def speake(self):\n        print(\"Humans can speake\")\nclass Animals:\n    def breathe(self):\n        print(\"Animals can breathe\")\n    def speake(self):\n        print(\"Animals cannot speake\")",
        "detail": "maurice.asignments.assignment13.polymophism",
        "documentation": {}
    },
    {
        "label": "Animals",
        "kind": 6,
        "importPath": "maurice.asignments.assignment13.polymophism",
        "description": "maurice.asignments.assignment13.polymophism",
        "peekOfCode": "class Animals:\n    def breathe(self):\n        print(\"Animals can breathe\")\n    def speake(self):\n        print(\"Animals cannot speake\")\nobj_hum=Humans()\nobj_ani=Animals()\nfor object in (obj_hum, obj_ani):\n    object.breathe()\n    object.speake()",
        "detail": "maurice.asignments.assignment13.polymophism",
        "documentation": {}
    },
    {
        "label": "Toyota",
        "kind": 6,
        "importPath": "maurice.asignments.assignment13.polymophism",
        "description": "maurice.asignments.assignment13.polymophism",
        "peekOfCode": "class Toyota:\n    def Engine(self):\n        print(\"A Toyota has an amazing engine\")\n    def speed(self):\n        print(\"A Toyota is very fast\")\nclass BMW:\n    def Engine(self):\n        print(\"A BMW has has a fairly nice engine\")\n    def speed(self):\n        print(\"A BMW is super fast\")",
        "detail": "maurice.asignments.assignment13.polymophism",
        "documentation": {}
    },
    {
        "label": "BMW",
        "kind": 6,
        "importPath": "maurice.asignments.assignment13.polymophism",
        "description": "maurice.asignments.assignment13.polymophism",
        "peekOfCode": "class BMW:\n    def Engine(self):\n        print(\"A BMW has has a fairly nice engine\")\n    def speed(self):\n        print(\"A BMW is super fast\")\nobjects=[Toyota(),BMW()]\nfor object in objects:\n    object.Engine()\n    object.speed()\nprint(\"EXAMPLE3\")",
        "detail": "maurice.asignments.assignment13.polymophism",
        "documentation": {}
    },
    {
        "label": "Weight_loss",
        "kind": 6,
        "importPath": "maurice.asignments.assignment13.polymophism",
        "description": "maurice.asignments.assignment13.polymophism",
        "peekOfCode": "class Weight_loss(ABC):\n    @abstractmethod\n    def work_out(self):\n        \"Abstract method\"\n        return\nclass Push_ups(Weight_loss):\n    def work_out(self):\n        super().work_out()\n        print(\"Do 30 push-ups\")\n        return",
        "detail": "maurice.asignments.assignment13.polymophism",
        "documentation": {}
    },
    {
        "label": "Push_ups",
        "kind": 6,
        "importPath": "maurice.asignments.assignment13.polymophism",
        "description": "maurice.asignments.assignment13.polymophism",
        "peekOfCode": "class Push_ups(Weight_loss):\n    def work_out(self):\n        super().work_out()\n        print(\"Do 30 push-ups\")\n        return\nclass Sit_ups(Weight_loss):\n    def work_out(self):\n        super().work_out()\n        print(\"Do 40 sit-ups\")\n        return",
        "detail": "maurice.asignments.assignment13.polymophism",
        "documentation": {}
    },
    {
        "label": "Sit_ups",
        "kind": 6,
        "importPath": "maurice.asignments.assignment13.polymophism",
        "description": "maurice.asignments.assignment13.polymophism",
        "peekOfCode": "class Sit_ups(Weight_loss):\n    def work_out(self):\n        super().work_out()\n        print(\"Do 40 sit-ups\")\n        return\nexercises=[Push_ups(),Sit_ups()]\nfor exercise in exercises:\n    exercise.work_out()",
        "detail": "maurice.asignments.assignment13.polymophism",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "maurice.asignments.15_part2",
        "description": "maurice.asignments.15_part2",
        "peekOfCode": "def main():\n    start=input('enter start: ')\n    end=input('enter end: ')\n    set=input('enter set: ')\n    for i in range(int(start),int(end),int(set)):\n      print(i)\nmain()",
        "detail": "maurice.asignments.15_part2",
        "documentation": {}
    },
    {
        "label": "Markert",
        "kind": 6,
        "importPath": "maurice.asignments.assignment10",
        "description": "maurice.asignments.assignment10",
        "peekOfCode": "class Markert:\n    def __init__(self,commodity,price):\n        self.commodity=commodity\n        self.price=price\n        print(f'commodity: {self.commodity},price:shs {self.price}')\nc1=Markert(\"cabagge\",2000)\nc2=Markert(\"Ginger\",800)\n# HOW TO USE GITHUB AS A GROUP \n# 1.Open github and click the + in rhe top right corner and click 'New Organisation'.\n# 2.Name the organisation",
        "detail": "maurice.asignments.assignment10",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "maurice.asignments.assignment11",
        "description": "maurice.asignments.assignment11",
        "peekOfCode": "class Car:\n    def __init__(self,name,make,year):\n        self.name=name\n        self.make=make\n        self.year=year\n    def description(self):\n       print (f'Car_name: {self.name}, car_make: {self.make}, Year: {self.year}')\n# inheritence\nclass Type(Car):\n    pass",
        "detail": "maurice.asignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Type",
        "kind": 6,
        "importPath": "maurice.asignments.assignment11",
        "description": "maurice.asignments.assignment11",
        "peekOfCode": "class Type(Car):\n    pass\ncar_1=Type(\"mazda\", 2021 ,2021)\ncar_1.description()\n# HOW TO CREATE A BRANCH ON GITHUB\n# Nvigate the main page of the repository.\n# Click the View all branches option from the branch drop down menufrom the file view tree on the left\n# Click on New branch\n# Enter the branch Name \n# Choose a source for your branch",
        "detail": "maurice.asignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Humans",
        "kind": 6,
        "importPath": "maurice.asignments.assignment11_polymorphism",
        "description": "maurice.asignments.assignment11_polymorphism",
        "peekOfCode": "class Humans:\n    def breathe(self):\n        print(\"Humans can breathe\")\n    def speake(self):\n        print(\"Humans can speake\")\nclass Animals:\n    def breathe(self):\n        print(\"Animals can breathe\")\n    def speake(self):\n        print(\"Animals cannot speake\")",
        "detail": "maurice.asignments.assignment11_polymorphism",
        "documentation": {}
    },
    {
        "label": "Animals",
        "kind": 6,
        "importPath": "maurice.asignments.assignment11_polymorphism",
        "description": "maurice.asignments.assignment11_polymorphism",
        "peekOfCode": "class Animals:\n    def breathe(self):\n        print(\"Animals can breathe\")\n    def speake(self):\n        print(\"Animals cannot speake\")\nobj_hum=Humans()\nobj_ani=Animals()\nfor object in (obj_hum, obj_ani):\n    object.breathe()\n    object.speake()",
        "detail": "maurice.asignments.assignment11_polymorphism",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "maurice.asignments.assignment14",
        "description": "maurice.asignments.assignment14",
        "peekOfCode": "def main():\n    original_string=input(\"Enter text: ..... \")\n    print(\"The original string: \",original_string)\n    reversed_text=original_string[::-1]\n    print(\"The reversed Text: \",reversed_text)\n    print(\"The text in capital: \",original_string.upper())\n    print(\"The stripped text: \",original_string.strip(\".\"))\n    counting=input(\"Enter word whose number you want to know: \")\n    print(\"Times appeared: \",original_string.count(counting))\nmain()",
        "detail": "maurice.asignments.assignment14",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "maurice.asignments.assignment5add",
        "description": "maurice.asignments.assignment5add",
        "peekOfCode": "def add(num1,num2):\n    return num1 + num2\nprint(add(4,8))",
        "detail": "maurice.asignments.assignment5add",
        "documentation": {}
    },
    {
        "label": "hello_worl",
        "kind": 2,
        "importPath": "maurice.asignments.assignment5functions",
        "description": "maurice.asignments.assignment5functions",
        "peekOfCode": "def hello_world ():\n print (\"Hello World\")\nhello_world()\n# timefunction\nfrom datetime import datetime \nprint(datetime.now().time())",
        "detail": "maurice.asignments.assignment5functions",
        "documentation": {}
    },
    {
        "label": "#",
        "kind": 5,
        "importPath": "maurice.asignments.assignment7",
        "description": "maurice.asignments.assignment7",
        "peekOfCode": "# =\n# +=\n# -=\n# *=\n# /=\n# **=\n# %=\nnum = 40\nnum += 50\nprint(num)",
        "detail": "maurice.asignments.assignment7",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "maurice.asignments.assignment7",
        "description": "maurice.asignments.assignment7",
        "peekOfCode": "num = 40\nnum += 50\nprint(num)\n# comparison assignment\n# ==\n# !=\n# <\n# >\n# <=\n# >=",
        "detail": "maurice.asignments.assignment7",
        "documentation": {}
    },
    {
        "label": "of",
        "kind": 2,
        "importPath": "maurice.asignments.assignment7input",
        "description": "maurice.asignments.assignment7input",
        "peekOfCode": "def of(a,b):\n    return a*b\ndef multipy(n1,n2):\n    print(\"The Product is:  \", of(int(n1) , int(n2)))\nn1=input(\"Enter first number: \")\nn2=input(\"Enter second number:  \")\nmultipy(n1,n2)\n# subtraction\ndef sub(a,b):\n    return a-b",
        "detail": "maurice.asignments.assignment7input",
        "documentation": {}
    },
    {
        "label": "multipy",
        "kind": 2,
        "importPath": "maurice.asignments.assignment7input",
        "description": "maurice.asignments.assignment7input",
        "peekOfCode": "def multipy(n1,n2):\n    print(\"The Product is:  \", of(int(n1) , int(n2)))\nn1=input(\"Enter first number: \")\nn2=input(\"Enter second number:  \")\nmultipy(n1,n2)\n# subtraction\ndef sub(a,b):\n    return a-b\ndef Subtraction(N1,N2):\n    print(\"The Answer is:\", sub(int(N1),int(N2)))",
        "detail": "maurice.asignments.assignment7input",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "maurice.asignments.assignment7input",
        "description": "maurice.asignments.assignment7input",
        "peekOfCode": "def sub(a,b):\n    return a-b\ndef Subtraction(N1,N2):\n    print(\"The Answer is:\", sub(int(N1),int(N2)))\nN1=input(\"Enter the Bigger Number: \")\nN2=input(\"Enter The Smaller Number: \")\nSubtraction(N1,N2)\n# divisionndef div(a,b):\n    return a/b",
        "detail": "maurice.asignments.assignment7input",
        "documentation": {}
    },
    {
        "label": "Subtraction",
        "kind": 2,
        "importPath": "maurice.asignments.assignment7input",
        "description": "maurice.asignments.assignment7input",
        "peekOfCode": "def Subtraction(N1,N2):\n    print(\"The Answer is:\", sub(int(N1),int(N2)))\nN1=input(\"Enter the Bigger Number: \")\nN2=input(\"Enter The Smaller Number: \")\nSubtraction(N1,N2)\n# divisionndef div(a,b):\n    return a/b\ndef division(N1,N2):\n    print(\"The Answer is: \", div(int(N1),int(N2)))",
        "detail": "maurice.asignments.assignment7input",
        "documentation": {}
    },
    {
        "label": "div",
        "kind": 2,
        "importPath": "maurice.asignments.assignment7input",
        "description": "maurice.asignments.assignment7input",
        "peekOfCode": "def div(a,b):\n    return a/b\ndef division(N1,N2):\n    print(\"The Answer is: \", div(int(N1),int(N2)))\nN1=input(\"The first number: \")\nN2=input(\"The divisor: \")\ndivision(N1,N2)",
        "detail": "maurice.asignments.assignment7input",
        "documentation": {}
    },
    {
        "label": "division",
        "kind": 2,
        "importPath": "maurice.asignments.assignment7input",
        "description": "maurice.asignments.assignment7input",
        "peekOfCode": "def division(N1,N2):\n    print(\"The Answer is: \", div(int(N1),int(N2)))\nN1=input(\"The first number: \")\nN2=input(\"The divisor: \")\ndivision(N1,N2)",
        "detail": "maurice.asignments.assignment7input",
        "documentation": {}
    },
    {
        "label": "deposit",
        "kind": 2,
        "importPath": "maurice.asignments.banking_system",
        "description": "maurice.asignments.banking_system",
        "peekOfCode": "def deposit(amount):\n    global balance\n    balance += amount\n    print(\"Deposit ${}.Current balance: ${}\".format(amount, balance))\ndef withdraw(amount):\n    global balance\n    if amount <= balance:\n        balance -= amount\n        print(\"withdraw ${}.Current balance: ${}\".format(amount,balance))\n    else:",
        "detail": "maurice.asignments.banking_system",
        "documentation": {}
    },
    {
        "label": "withdraw",
        "kind": 2,
        "importPath": "maurice.asignments.banking_system",
        "description": "maurice.asignments.banking_system",
        "peekOfCode": "def withdraw(amount):\n    global balance\n    if amount <= balance:\n        balance -= amount\n        print(\"withdraw ${}.Current balance: ${}\".format(amount,balance))\n    else:\n        print(\"Insufficient funds.\")\ndef check_balance():\n    print(\"Curent balance: ${}\".format(balance))\nwhile True:",
        "detail": "maurice.asignments.banking_system",
        "documentation": {}
    },
    {
        "label": "check_balance",
        "kind": 2,
        "importPath": "maurice.asignments.banking_system",
        "description": "maurice.asignments.banking_system",
        "peekOfCode": "def check_balance():\n    print(\"Curent balance: ${}\".format(balance))\nwhile True:\n    print(\"\\nATM services available options:\")\n    print(\"1. Check Balance: \")\n    print(\"2. Deposit \")\n    print(\"3.Withdraw \")\n    print(\"4. Exit program.\")\n    choice=int(input(\"Enter choice: \"))\n    if choice==1:",
        "detail": "maurice.asignments.banking_system",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "maurice.asignments.funcassignment",
        "description": "maurice.asignments.funcassignment",
        "peekOfCode": "def add(num1,num2):\n    return num1+num2\ndef inputs(n1,n2):\n print(\"The summed Value is:  \", add(int(n1) , int(n2)))\nn1=input(\"Enter first value: \")  \nn2=input(\"Enter second value: \")\ninputs(n1,n2)",
        "detail": "maurice.asignments.funcassignment",
        "documentation": {}
    },
    {
        "label": "inputs",
        "kind": 2,
        "importPath": "maurice.asignments.funcassignment",
        "description": "maurice.asignments.funcassignment",
        "peekOfCode": "def inputs(n1,n2):\n print(\"The summed Value is:  \", add(int(n1) , int(n2)))\nn1=input(\"Enter first value: \")  \nn2=input(\"Enter second value: \")\ninputs(n1,n2)",
        "detail": "maurice.asignments.funcassignment",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "maurice.class test.inherit",
        "description": "maurice.class test.inherit",
        "peekOfCode": "class Person:\n  def __init__(self, name,age):\n    self.Name=name \n    self.Age=age\nclass Student(Person):\n    def __init__(self):\n      print(f'name: {self.Name},\"age: {self.Age}')\nobject=Student(\"Maurice\",20)",
        "detail": "maurice.class test.inherit",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "maurice.class test.inherit",
        "description": "maurice.class test.inherit",
        "peekOfCode": "class Student(Person):\n    def __init__(self):\n      print(f'name: {self.Name},\"age: {self.Age}')\nobject=Student(\"Maurice\",20)",
        "detail": "maurice.class test.inherit",
        "documentation": {}
    },
    {
        "label": "switch_case",
        "kind": 2,
        "importPath": "maurice.conditions.switch_casese",
        "description": "maurice.conditions.switch_casese",
        "peekOfCode": "def switch_case(argument):\n    if argument=='a':\n        return 'apple' \n    elif  argument=='b':\n        return 'banana'\n    elif argument=='c':\n          return 'cherry'",
        "detail": "maurice.conditions.switch_casese",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 2,
        "importPath": "maurice.functions.functionsclass",
        "description": "maurice.functions.functionsclass",
        "peekOfCode": "def name():\n    name=input(\"Enter Your Name:  \")\n    return name\ndef age():\n    age=input(\"Enter Your Age:  \")\n    # print(\"Name:  \" + name() + ('\\n') + \"Age: \" + str(age) )\n    print(name(),age)\nage()",
        "detail": "maurice.functions.functionsclass",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 2,
        "importPath": "maurice.functions.functionsclass",
        "description": "maurice.functions.functionsclass",
        "peekOfCode": "def age():\n    age=input(\"Enter Your Age:  \")\n    # print(\"Name:  \" + name() + ('\\n') + \"Age: \" + str(age) )\n    print(name(),age)\nage()",
        "detail": "maurice.functions.functionsclass",
        "documentation": {}
    },
    {
        "label": "Home",
        "kind": 6,
        "importPath": "maurice.group work.bank",
        "description": "maurice.group work.bank",
        "peekOfCode": "class Home:\n    status='peaceful'\n    def features(cls):\n        return f'All homes are{cls.features}'\nprint(home.features())",
        "detail": "maurice.group work.bank",
        "documentation": {}
    },
    {
        "label": "ImmutableTuple",
        "kind": 6,
        "importPath": "maurice.mutability.main",
        "description": "maurice.mutability.main",
        "peekOfCode": "class ImmutableTuple:\n    def __init__(self,data):\n        self.data=tuple(data)\n        print(self.data)\nnum=ImmutableTuple([1,2,3])\n# we are changing a list to a tuple is what ive done above\nclass Mutablelist:\n    def __init__(self,data):\n        self.data=data\nlst=Mutablelist([1,2,3])",
        "detail": "maurice.mutability.main",
        "documentation": {}
    },
    {
        "label": "Mutablelist",
        "kind": 6,
        "importPath": "maurice.mutability.main",
        "description": "maurice.mutability.main",
        "peekOfCode": "class Mutablelist:\n    def __init__(self,data):\n        self.data=data\nlst=Mutablelist([1,2,3])\n# exercise\nclass Immutablebool:\n    def __init__(self,data):\n        self.data=str(data)\n        print(self.data)\nbool=Immutablebool(False)",
        "detail": "maurice.mutability.main",
        "documentation": {}
    },
    {
        "label": "Immutablebool",
        "kind": 6,
        "importPath": "maurice.mutability.main",
        "description": "maurice.mutability.main",
        "peekOfCode": "class Immutablebool:\n    def __init__(self,data):\n        self.data=str(data)\n        print(self.data)\nbool=Immutablebool(False)\n# exercise2\nclass Immutablestring():\n    def __init__(self,data):\n        self.data=int(data)\n        print(self.data)",
        "detail": "maurice.mutability.main",
        "documentation": {}
    },
    {
        "label": "Immutablestring",
        "kind": 6,
        "importPath": "maurice.mutability.main",
        "description": "maurice.mutability.main",
        "peekOfCode": "class Immutablestring():\n    def __init__(self,data):\n        self.data=int(data)\n        print(self.data)\nstr=Immutablestring('Boy')",
        "detail": "maurice.mutability.main",
        "documentation": {}
    },
    {
        "label": "democlass",
        "kind": 6,
        "importPath": "maurice.oop.abstruction",
        "description": "maurice.oop.abstruction",
        "peekOfCode": "class democlass(ABC):\n    @abstractmethod\n    def method1(self):\n        print(\"abstract method\")\n        return\n    def method2(self):\n        print(\"concrete method\")\nclass concreteclass(democlass):\n    def method1(self):\n        super().method1()",
        "detail": "maurice.oop.abstruction",
        "documentation": {}
    },
    {
        "label": "concreteclass",
        "kind": 6,
        "importPath": "maurice.oop.abstruction",
        "description": "maurice.oop.abstruction",
        "peekOfCode": "class concreteclass(democlass):\n    def method1(self):\n        super().method1()\n        return\nobj=concreteclass()\nobj.method1()\nobj.method2()",
        "detail": "maurice.oop.abstruction",
        "documentation": {}
    },
    {
        "label": "Students",
        "kind": 6,
        "importPath": "maurice.practice.class",
        "description": "maurice.practice.class",
        "peekOfCode": "class Students:\n    def __init__(self,name,age):\n        self.name=name\n        self.age=age\n    def intro(self):\n        print(f'Name: {self.name},Age: {self.age}')\ns1=Students(\"maurice\",20)\ns1.intro()",
        "detail": "maurice.practice.class",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "maurice.practice.functionsprac",
        "description": "maurice.practice.functionsprac",
        "peekOfCode": "def add(a,b):\n# argument arepassedin the function call\n    return a + b \nprint(add(4,6))\ndef greet(name):\n    print(\"hello\",name)\nname=['Van','Mary']\ngreet(\"Mary\")\n# return\ndef of(a,b):",
        "detail": "maurice.practice.functionsprac",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "maurice.practice.functionsprac",
        "description": "maurice.practice.functionsprac",
        "peekOfCode": "def greet(name):\n    print(\"hello\",name)\nname=['Van','Mary']\ngreet(\"Mary\")\n# return\ndef of(a,b):\n    return a*b\nresult=of(6,8)\nprint(result)\n# in class ",
        "detail": "maurice.practice.functionsprac",
        "documentation": {}
    },
    {
        "label": "of",
        "kind": 2,
        "importPath": "maurice.practice.functionsprac",
        "description": "maurice.practice.functionsprac",
        "peekOfCode": "def of(a,b):\n    return a*b\nresult=of(6,8)\nprint(result)\n# in class \ndef add(a=5,b=10):\n    c=a+b\n    print(c)\nadd(50,60)\n# tr",
        "detail": "maurice.practice.functionsprac",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "maurice.practice.functionsprac",
        "description": "maurice.practice.functionsprac",
        "peekOfCode": "def add(a=5,b=10):\n    c=a+b\n    print(c)\nadd(50,60)\n# tr\ndef func1():\n    average=(8/2)\n    return average\ndef func2():\n    print(func1())",
        "detail": "maurice.practice.functionsprac",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "maurice.practice.functionsprac",
        "description": "maurice.practice.functionsprac",
        "peekOfCode": "def func1():\n    average=(8/2)\n    return average\ndef func2():\n    print(func1())",
        "detail": "maurice.practice.functionsprac",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "maurice.practice.functionsprac",
        "description": "maurice.practice.functionsprac",
        "peekOfCode": "def func2():\n    print(func1())",
        "detail": "maurice.practice.functionsprac",
        "documentation": {}
    },
    {
        "label": "StudentRegister",
        "kind": 6,
        "importPath": "maurice.PROJECT.projecttt",
        "description": "maurice.PROJECT.projecttt",
        "peekOfCode": "class StudentRegister:\n    # Constructor method to initialize the class with an empty dictionary for storing student information\n    def __init__(self):\n        self.students = {}\n    # Method to register a new student by taking user input for student ID, name, and age\n    def register_student(self):\n        student_id = input(\"Enter student ID: \")\n        name = input(\"Enter student name: \")\n        age = int(input(\"Enter student age: \"))\n        # Store the entered student information in the 'students' dictionary",
        "detail": "maurice.PROJECT.projecttt",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "maurice.PROJECT.projecttt",
        "description": "maurice.PROJECT.projecttt",
        "peekOfCode": "register = StudentRegister()\n# Invoke the run_register method to start the program\nregister.run_register()",
        "detail": "maurice.PROJECT.projecttt",
        "documentation": {}
    },
    {
        "label": "call1",
        "kind": 2,
        "importPath": "maurice.PROJECT.register(final)",
        "description": "maurice.PROJECT.register(final)",
        "peekOfCode": "def call1():\n    userlist.append([e1.get(),e2.get(),e3.get()])\n    print(userlist)\n    userverification=tkr.Tk()\n    userverification.title(\"userverification\")\n    userverification.geometry(\"200x100\")\n    tkr.Label(userverification,text=\"Your Account has been Created\").grid(row=1)\n# buttons\nbutton1=tkr.Button(master,width=7,height=1,text=\"submit\",command=call1)\nbutton1.grid(row=4,column=1,padx=3,pady=3)",
        "detail": "maurice.PROJECT.register(final)",
        "documentation": {}
    },
    {
        "label": "replacement",
        "kind": 2,
        "importPath": "maurice.string_function.find",
        "description": "maurice.string_function.find",
        "peekOfCode": "def replacement():\n    enter=input(\"Enter your text: \")\n    word_to_find=\"stay\"\n    word_to_insert=\"GO!\"\n    new_sentence=enter.find(word_to_find)\n    if new_sentence != -1:\n      final_sentence=enter.replace(word_to_find,word_to_insert)\n      print(final_sentence)\n    else:\n       print(f'{word_to_find} is not in the entered sentence')",
        "detail": "maurice.string_function.find",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Rajvir.advanced_func.main",
        "description": "Rajvir.advanced_func.main",
        "peekOfCode": "def main():\n    print(\"this script is being executed directly\")\nif __name__==\"__main__\":\n    main()\n    first()",
        "detail": "Rajvir.advanced_func.main",
        "documentation": {}
    },
    {
        "label": "step",
        "kind": 5,
        "importPath": "Rajvir.advanced_func.range",
        "description": "Rajvir.advanced_func.range",
        "peekOfCode": "step = int(input(\"Enter the step u want it to follow: \"))\nfor i in range(start,end,step):\n    print(i)\n    for i in range(5):\n    # print(i)\n    pass\n#start and end point\nfor i in range(2,8):\n    # print(i)\n    pass",
        "detail": "Rajvir.advanced_func.range",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment13.encap",
        "description": "Rajvir.assignments.assignment13.encap",
        "peekOfCode": "class Parent:\n    def __init__(self,name,age):\n        self.__name= name\n        self.__age= age \n    def get_name(self):\n        return self.__name\n    def set_name(self,name):\n        self.__name = name\n    def get_age(self,age):\n        return self.__age",
        "detail": "Rajvir.assignments.assignment13.encap",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment13.encap",
        "description": "Rajvir.assignments.assignment13.encap",
        "peekOfCode": "class Child(Parent):\n    def __init__(self,name,age,mname):\n        super().__init__(name,age)\n        self.mname = mname\nparent1 =Parent(\"Alice\", 20)\nprint (\"parents name is \" , Parent.get_name())\nchild1 =Child(\"John\", 20, \"jack\")\nprint (\"childs name is \" , Child.get_name())",
        "detail": "Rajvir.assignments.assignment13.encap",
        "documentation": {}
    },
    {
        "label": "Car2",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment13.poly",
        "description": "Rajvir.assignments.assignment13.poly",
        "peekOfCode": "class Car2:\n    def __init__(self,brand,model):\n        self.brand= brand \n        self.model=model \n    def move(self):\n        print(\"Drive\")\nclass Boat:\n    def __init__(self,brand,model):\n        self.brand= brand\n        self.model= model",
        "detail": "Rajvir.assignments.assignment13.poly",
        "documentation": {}
    },
    {
        "label": "Boat",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment13.poly",
        "description": "Rajvir.assignments.assignment13.poly",
        "peekOfCode": "class Boat:\n    def __init__(self,brand,model):\n        self.brand= brand\n        self.model= model\n    def move(self):\n        print(\"sail!\")\ncar1 = Car2(\"ford\", \"mustang\")\nboat_1= Boat(\"ibiza\", \"toouring 16\")\nfor x in (car1, boat_1):\n    x.move()",
        "detail": "Rajvir.assignments.assignment13.poly",
        "documentation": {}
    },
    {
        "label": "Vehicle",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment13.poly",
        "description": "Rajvir.assignments.assignment13.poly",
        "peekOfCode": "class Vehicle:\n    def __init__(self,brand,model):\n        self.brand= brand\n        self.model = model\n    def move(self):\n        print(\"move!!\")\nclass Car3(Vehicle):\n    pass \nclass Plane(Vehicle):\n    def move(self):",
        "detail": "Rajvir.assignments.assignment13.poly",
        "documentation": {}
    },
    {
        "label": "Car3",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment13.poly",
        "description": "Rajvir.assignments.assignment13.poly",
        "peekOfCode": "class Car3(Vehicle):\n    pass \nclass Plane(Vehicle):\n    def move(self):\n        print(\"fly\")\ncar4 = Car3(\"FORD\",\"MUSTANG\")\nplane1= Plane(\"Rajvir\",\"456\")\nfor x in (car4, plane1):\n    print(x.brand)\n    print(x.model)",
        "detail": "Rajvir.assignments.assignment13.poly",
        "documentation": {}
    },
    {
        "label": "Plane",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment13.poly",
        "description": "Rajvir.assignments.assignment13.poly",
        "peekOfCode": "class Plane(Vehicle):\n    def move(self):\n        print(\"fly\")\ncar4 = Car3(\"FORD\",\"MUSTANG\")\nplane1= Plane(\"Rajvir\",\"456\")\nfor x in (car4, plane1):\n    print(x.brand)\n    print(x.model)\n    x.move()",
        "detail": "Rajvir.assignments.assignment13.poly",
        "documentation": {}
    },
    {
        "label": "car1",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment13.poly",
        "description": "Rajvir.assignments.assignment13.poly",
        "peekOfCode": "car1 = Car2(\"ford\", \"mustang\")\nboat_1= Boat(\"ibiza\", \"toouring 16\")\nfor x in (car1, boat_1):\n    x.move()\n#example 2 this belongs to class inheritence \nclass Vehicle:\n    def __init__(self,brand,model):\n        self.brand= brand\n        self.model = model\n    def move(self):",
        "detail": "Rajvir.assignments.assignment13.poly",
        "documentation": {}
    },
    {
        "label": "car4",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment13.poly",
        "description": "Rajvir.assignments.assignment13.poly",
        "peekOfCode": "car4 = Car3(\"FORD\",\"MUSTANG\")\nplane1= Plane(\"Rajvir\",\"456\")\nfor x in (car4, plane1):\n    print(x.brand)\n    print(x.model)\n    x.move()",
        "detail": "Rajvir.assignments.assignment13.poly",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment9.casting",
        "description": "Rajvir.assignments.assignment9.casting",
        "peekOfCode": "x = int(1)\ny = int(2.8)\nz= int(\"3\")\nprint (x)\nprint(y)\nprint(z)\n#2 floats\na= float(1)\nb= float(2.9)\nc= float(\"4.3\")",
        "detail": "Rajvir.assignments.assignment9.casting",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment9.casting",
        "description": "Rajvir.assignments.assignment9.casting",
        "peekOfCode": "y = int(2.8)\nz= int(\"3\")\nprint (x)\nprint(y)\nprint(z)\n#2 floats\na= float(1)\nb= float(2.9)\nc= float(\"4.3\")\nprint(a)",
        "detail": "Rajvir.assignments.assignment9.casting",
        "documentation": {}
    },
    {
        "label": "Myclass",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment9.delete",
        "description": "Rajvir.assignments.assignment9.delete",
        "peekOfCode": "class Myclass:\n    name=\"john\"\ndel Myclass\nprint(Myclass)  #it will show an error because it is no longer defined..\n#example 2\nx= \"hello\"\ndel x\nprint (x) #same here\n#deleting from a list..\nx = [\"apple\", \"banana\"]",
        "detail": "Rajvir.assignments.assignment9.delete",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment9.delete",
        "description": "Rajvir.assignments.assignment9.delete",
        "peekOfCode": "x = [\"apple\", \"banana\"]\ndel x[0]\nprint (x)",
        "detail": "Rajvir.assignments.assignment9.delete",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment9.multiple",
        "description": "Rajvir.assignments.assignment9.multiple",
        "peekOfCode": "fruits = [\"apple\", \"banana\",\"cherry\"]\nx, y, z = fruits\nprint(x)\nprint(y)\nprint(z)",
        "detail": "Rajvir.assignments.assignment9.multiple",
        "documentation": {}
    },
    {
        "label": "2myvar",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment9.naming",
        "description": "Rajvir.assignments.assignment9.naming",
        "peekOfCode": "2myvar = \"john\" \nmy-var= 2\nmy var = 90             \nprint (2myvar)\nprint(my-var)\nprint(my var)\n#how they can be; \nmyvar= 1\nmy_var= 2\n_my_var= 3",
        "detail": "Rajvir.assignments.assignment9.naming",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment9.type",
        "description": "Rajvir.assignments.assignment9.type",
        "peekOfCode": "x = \"John\"\nprint (type(x))\ny = 2\nprint (type(y))\nz = 4.5\nprint (\"this belongs to:\",type(z))",
        "detail": "Rajvir.assignments.assignment9.type",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment9.type",
        "description": "Rajvir.assignments.assignment9.type",
        "peekOfCode": "y = 2\nprint (type(y))\nz = 4.5\nprint (\"this belongs to:\",type(z))",
        "detail": "Rajvir.assignments.assignment9.type",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment9.type",
        "description": "Rajvir.assignments.assignment9.type",
        "peekOfCode": "z = 4.5\nprint (\"this belongs to:\",type(z))",
        "detail": "Rajvir.assignments.assignment9.type",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment10",
        "description": "Rajvir.assignments.assignment10",
        "peekOfCode": "class Car:\n    def __init__(self,make,model,year,color):\n        self.make= make\n        self.model= model\n        self.year= year\n        self.color= color\n    def drive(self):\n        print(\"this car is driving\")\n    def stop(self):\n        print(\"this car has stoped\")",
        "detail": "Rajvir.assignments.assignment10",
        "documentation": {}
    },
    {
        "label": "Car2",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment11",
        "description": "Rajvir.assignments.assignment11",
        "peekOfCode": "class Car2:\n    def __init__(self,brand,model):\n        self.brand= brand \n        self.model=model \n    def move(self):\n        print(\"Drive\")\nclass Boat:\n    def __init__(self,brand,model):\n        self.brand= brand\n        self.model= model",
        "detail": "Rajvir.assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Boat",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment11",
        "description": "Rajvir.assignments.assignment11",
        "peekOfCode": "class Boat:\n    def __init__(self,brand,model):\n        self.brand= brand\n        self.model= model\n    def move(self):\n        print(\"sail!\")\ncar1 = Car2(\"ford\", \"mustang\")\nboat_1= Boat(\"ibiza\", \"toouring 16\")\nfor x in (car1, boat_1):\n    x.move()",
        "detail": "Rajvir.assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Vehicle",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment11",
        "description": "Rajvir.assignments.assignment11",
        "peekOfCode": "class Vehicle:\n    def __init__(self,brand,model):\n        self.brand= brand\n        self.model = model\n    def move(self):\n        print(\"move!!\")\nclass Car3(Vehicle):\n    pass \nclass Plane(Vehicle):\n    def move(self):",
        "detail": "Rajvir.assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Car3",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment11",
        "description": "Rajvir.assignments.assignment11",
        "peekOfCode": "class Car3(Vehicle):\n    pass \nclass Plane(Vehicle):\n    def move(self):\n        print(\"fly\")\ncar4 = Car3(\"FORD\",\"MUSTANG\")\nplane1= Plane(\"Rajvir\",\"456\")\nfor x in (car4, plane1):\n    print(x.brand)\n    print(x.model)",
        "detail": "Rajvir.assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Plane",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment11",
        "description": "Rajvir.assignments.assignment11",
        "peekOfCode": "class Plane(Vehicle):\n    def move(self):\n        print(\"fly\")\ncar4 = Car3(\"FORD\",\"MUSTANG\")\nplane1= Plane(\"Rajvir\",\"456\")\nfor x in (car4, plane1):\n    print(x.brand)\n    print(x.model)\n    x.move()",
        "detail": "Rajvir.assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "car1",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment11",
        "description": "Rajvir.assignments.assignment11",
        "peekOfCode": "car1 = Car2(\"ford\", \"mustang\")\nboat_1= Boat(\"ibiza\", \"toouring 16\")\nfor x in (car1, boat_1):\n    x.move()\n#example 2 this belongs to class inheritence \nclass Vehicle:\n    def __init__(self,brand,model):\n        self.brand= brand\n        self.model = model\n    def move(self):",
        "detail": "Rajvir.assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "car4",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment11",
        "description": "Rajvir.assignments.assignment11",
        "peekOfCode": "car4 = Car3(\"FORD\",\"MUSTANG\")\nplane1= Plane(\"Rajvir\",\"456\")\nfor x in (car4, plane1):\n    print(x.brand)\n    print(x.model)\n    x.move()",
        "detail": "Rajvir.assignments.assignment11",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment12",
        "description": "Rajvir.assignments.assignment12",
        "peekOfCode": "class Shape(ABC):\n    def __init__(self,name):\n        self.name = name \n    @abstractmethod\n    def area(self):\n        pass \n    @abstractmethod\n    def perimeter(self):\n        pass\nclass Rectangle(Shape):",
        "detail": "Rajvir.assignments.assignment12",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment12",
        "description": "Rajvir.assignments.assignment12",
        "peekOfCode": "class Rectangle(Shape):\n    def __init__(self,name,width,height):\n        super().__init__(name)\n        self.width= width\n        self.height = height \n    def area(self):\n        return  self.width*self.height\n    def perimeter(self):\n        return 2* (self.width+self.height)\nrectangle=Rectangle(\"Rectangle\",5,4)",
        "detail": "Rajvir.assignments.assignment12",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment12",
        "description": "Rajvir.assignments.assignment12",
        "peekOfCode": "class Student:\n    def __init__(self,name,age):\n        self.__name= name\n        self.__age= age \n    def get_name(self):\n        return self.__name\n    def set_name(self,name):\n        self.__name = name\n    def get_age(self,age):\n        return self.__age",
        "detail": "Rajvir.assignments.assignment12",
        "documentation": {}
    },
    {
        "label": "student1",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment12",
        "description": "Rajvir.assignments.assignment12",
        "peekOfCode": "student1 = Student(\"Alice\", 20)\nprint (\"students name\" , student1.get_name())",
        "detail": "Rajvir.assignments.assignment12",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 2,
        "importPath": "Rajvir.assignments.assignment14",
        "description": "Rajvir.assignments.assignment14",
        "peekOfCode": "def app():\n # this is a reverse technique.. reverses the order of the data elements in place.\n    sentence = input(\"Enter a short sentence: \")\n    reversed_string= list(reversed(sentence))\n # this is for uppercase...\n    upper_case = sentence.upper()\n # this is for lowercase..\n    lower_case= upper_case.lower()\n # strip...\n    word = (\"    banana     \")",
        "detail": "Rajvir.assignments.assignment14",
        "documentation": {}
    },
    {
        "label": "wr_file",
        "kind": 2,
        "importPath": "Rajvir.assignments.assignment15",
        "description": "Rajvir.assignments.assignment15",
        "peekOfCode": "def wr_file():\n    file =open(\"test.txt\",\"w\")\n    file.write(\"this is data inside a file..\")\n    file.close()\n    file= open(\"test.txt\",\"r\")\n    print(file.read())\n    file.close()\nstart= int(input(\"Enter the range you want to begin with: \"))\nend= int(input(\"Enter the range with a number u want to stop: \"))\nstep = int(input(\"Enter the step u want it to follow: \"))",
        "detail": "Rajvir.assignments.assignment15",
        "documentation": {}
    },
    {
        "label": "step",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment15",
        "description": "Rajvir.assignments.assignment15",
        "peekOfCode": "step = int(input(\"Enter the step u want it to follow: \"))\nfor i in range(start,end,step):\n    def main():\n        print(i)\n    if __name__ ==\"__main__\":\n        main()\n        wr_file()",
        "detail": "Rajvir.assignments.assignment15",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment16",
        "description": "Rajvir.assignments.assignment16",
        "peekOfCode": "class Shape(ABC):\n    @abstractmethod\n    def calculate_area(self):\n        pass\n    @abstractmethod\n    def calculate_perimeter(self):\n        pass \nclass Triangle(Shape):\n    def __init__(self,a, b, c):\n        self.A= a ",
        "detail": "Rajvir.assignments.assignment16",
        "documentation": {}
    },
    {
        "label": "Triangle",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment16",
        "description": "Rajvir.assignments.assignment16",
        "peekOfCode": "class Triangle(Shape):\n    def __init__(self,a, b, c):\n        self.A= a \n        self.B= b \n        self.C= c \n    def calculate_area(self):\n        area1=(self.A + self.B + self.C)/2\n        return area1\n    def calculate_perimeter(self):\n        return self.A + self.B + self.C ",
        "detail": "Rajvir.assignments.assignment16",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "Rajvir.assignments.assignment16",
        "description": "Rajvir.assignments.assignment16",
        "peekOfCode": "class Square(Shape):\n    def __init__(self,side__length):\n        self.side__length= side__length\n    def calculate_area(self):\n        return self.side__length**2\n    def calculate_perimeter(self):\n        return 4*self.side__length\n# inorder to attain users input variables are created for the specific input from the sub/child class..\n# float will be used because some answers can come as points...\nA= float(input(\"Enter the first length: \"))",
        "detail": "Rajvir.assignments.assignment16",
        "documentation": {}
    },
    {
        "label": "constantPI",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment2",
        "description": "Rajvir.assignments.assignment2",
        "peekOfCode": "constantPI = 3.14\nconstantGRAVITY = 9.8\nprint(constant PI)",
        "detail": "Rajvir.assignments.assignment2",
        "documentation": {}
    },
    {
        "label": "constantGRAVITY",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment2",
        "description": "Rajvir.assignments.assignment2",
        "peekOfCode": "constantGRAVITY = 9.8\nprint(constant PI)",
        "detail": "Rajvir.assignments.assignment2",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 2,
        "importPath": "Rajvir.assignments.assignment3.2",
        "description": "Rajvir.assignments.assignment3.2",
        "peekOfCode": "def name():\n    name= input(\"Enter your name: \")\n    if(len(name)>=7):\n        print(\"you have an interesting name\")\n    else:\n        print(\"your name is cool\")\nname()\n#bitwise \nq= 10\ng= 8 ",
        "detail": "Rajvir.assignments.assignment3.2",
        "documentation": {}
    },
    {
        "label": "su",
        "kind": 2,
        "importPath": "Rajvir.assignments.assignment3",
        "description": "Rajvir.assignments.assignment3",
        "peekOfCode": "def sub ( num1, num2):\n    return (num1 - num2)\nnumber1= input (\"Enter first value\")\nnumber2= input(\"Enter second value\")\nprint (\"the subtructed value is: \", sub (int(number1),int(number2)),\"\\n\")\n# multiplication \ndef mult( num1, num2):\n    return (num1*num2)\nnumber1= input (\"Enter first value\")\nnumber2= input(\"Enter second value\")",
        "detail": "Rajvir.assignments.assignment3",
        "documentation": {}
    },
    {
        "label": "mult",
        "kind": 2,
        "importPath": "Rajvir.assignments.assignment3",
        "description": "Rajvir.assignments.assignment3",
        "peekOfCode": "def mult( num1, num2):\n    return (num1*num2)\nnumber1= input (\"Enter first value\")\nnumber2= input(\"Enter second value\")\nprint (\"the multiplied value is: \", mult(int(number1),int(number2)),\"\\n\")\n# Division\ndef div( num1, num2):\n    return (num1 / num2)\nnumber1= input (\"Enter first value\")\nnumber2= input(\"Enter second value\")",
        "detail": "Rajvir.assignments.assignment3",
        "documentation": {}
    },
    {
        "label": "div",
        "kind": 2,
        "importPath": "Rajvir.assignments.assignment3",
        "description": "Rajvir.assignments.assignment3",
        "peekOfCode": "def div( num1, num2):\n    return (num1 / num2)\nnumber1= input (\"Enter first value\")\nnumber2= input(\"Enter second value\")\nprint (\"the divided value is: \", div(int(number1),int(number2)),\"\\n\")\n# power \ndef power ( num1, num2):\n    return (num1 ** num2)\nnumber1= input (\"Enter first value\")\nnumber2= input(\"Enter second value\")",
        "detail": "Rajvir.assignments.assignment3",
        "documentation": {}
    },
    {
        "label": "powe",
        "kind": 2,
        "importPath": "Rajvir.assignments.assignment3",
        "description": "Rajvir.assignments.assignment3",
        "peekOfCode": "def power ( num1, num2):\n    return (num1 ** num2)\nnumber1= input (\"Enter first value\")\nnumber2= input(\"Enter second value\")\nprint (\"the power value is: \", power(int(number1),int(number2)),\"\\n\")",
        "detail": "Rajvir.assignments.assignment3",
        "documentation": {}
    },
    {
        "label": "planets",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment4",
        "description": "Rajvir.assignments.assignment4",
        "peekOfCode": "planets = [ \"Mars\", \"Earth\", \"Jupiter\", \"pluto\", \"saturn\"]\nnewlist= [planet for planet in planets if \"a\" in planet]\n#for x in planets:\n#if \"a\" in x:\n#newlist.append (x) \nprint (newlist)\n#how to remove an element using pop \nk= [0, 1 , 44, 56, 72, 6]\npopped_item= k.pop (3)\nprint (popped_item)",
        "detail": "Rajvir.assignments.assignment4",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment5",
        "description": "Rajvir.assignments.assignment5",
        "peekOfCode": "name = input(\"enter your name:\")\nprint(name)\nbalance = float(input(\"Enter your balance\"))\nprint(\"your balance is: \" , balance)\ntransaction = input(\"enter w for withdraw or d for deposit\")\nprint (transaction)\nif(transaction == \"d\" or transaction == \"D\"):\n    amount = int(input(\"Enter deposit amount\"))\n    if(amount< 0):\n        print(\"amount cannot be negative\")",
        "detail": "Rajvir.assignments.assignment5",
        "documentation": {}
    },
    {
        "label": "balance",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment5",
        "description": "Rajvir.assignments.assignment5",
        "peekOfCode": "balance = float(input(\"Enter your balance\"))\nprint(\"your balance is: \" , balance)\ntransaction = input(\"enter w for withdraw or d for deposit\")\nprint (transaction)\nif(transaction == \"d\" or transaction == \"D\"):\n    amount = int(input(\"Enter deposit amount\"))\n    if(amount< 0):\n        print(\"amount cannot be negative\")\n    else:\n        new_balance = balance + amount",
        "detail": "Rajvir.assignments.assignment5",
        "documentation": {}
    },
    {
        "label": "transaction",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment5",
        "description": "Rajvir.assignments.assignment5",
        "peekOfCode": "transaction = input(\"enter w for withdraw or d for deposit\")\nprint (transaction)\nif(transaction == \"d\" or transaction == \"D\"):\n    amount = int(input(\"Enter deposit amount\"))\n    if(amount< 0):\n        print(\"amount cannot be negative\")\n    else:\n        new_balance = balance + amount\n        print(\"your new balance is: \", new_balance)\nelse:",
        "detail": "Rajvir.assignments.assignment5",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Rajvir.assignments.assignment6",
        "description": "Rajvir.assignments.assignment6",
        "peekOfCode": "students = [\"emmma\", \"joel\",\"charmi\", \"affod\", \"rajvir\",\"mumbere\",\"aksam\"]\nindex =0\n#while index<len(students):\n#print(students[index])\n# index += 1\nwhile index < len(students):\n    student_name = students[index]\n    attendence = input(f\"Is {student_name} present? (yes/no):\").lower\n    if attendence == \"yes\":\n        print(f\"{student_name} is present.\")",
        "detail": "Rajvir.assignments.assignment6",
        "documentation": {}
    },
    {
        "label": "current_day",
        "kind": 2,
        "importPath": "Rajvir.assignments.assignment7",
        "description": "Rajvir.assignments.assignment7",
        "peekOfCode": "def current_day():\n    current_day= datetime.datetime.now()\n    if current_day.strftime(\"%a\") == \"Mon\":\n        print (\"Monday: is the first day of the week.\")\n    elif current_day.strftime(\"%a\") == \"Tue\":\n        print (\" Tuesday: is the second day of the week.\")\n    elif current_day.strftime(\"%a\") == \"Wed\":\n        print (\"Wednesday: mid week.\")\n    elif current_day.strftime(\"%a\") == \"Thur\":\n        print (\"Thursday: Assignment day is here.\")",
        "detail": "Rajvir.assignments.assignment7",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Rajvir.calculator.main",
        "description": "Rajvir.calculator.main",
        "peekOfCode": "def add(a,b):\n    answer= a+b\n    print(str(a) + \"+\" + str (b) + \"=\" + str(answer))\ndef sub(a,b):\n    answer=a-b\n    print(str(a)+ \"-\" + str (b) + \"=\" + str(answer))\ndef mul(a,b):\n    answer=a*b\n    print(str(a)+ \"*\" + str (b) + \"=\" + str(answer))\ndef div(a,b):",
        "detail": "Rajvir.calculator.main",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "Rajvir.calculator.main",
        "description": "Rajvir.calculator.main",
        "peekOfCode": "def sub(a,b):\n    answer=a-b\n    print(str(a)+ \"-\" + str (b) + \"=\" + str(answer))\ndef mul(a,b):\n    answer=a*b\n    print(str(a)+ \"*\" + str (b) + \"=\" + str(answer))\ndef div(a,b):\n    answer=a/b\n    print(str(a)+ \"/\" + str (b) + \"=\" + str(answer))\nprint(\"select an option: \")",
        "detail": "Rajvir.calculator.main",
        "documentation": {}
    },
    {
        "label": "mul",
        "kind": 2,
        "importPath": "Rajvir.calculator.main",
        "description": "Rajvir.calculator.main",
        "peekOfCode": "def mul(a,b):\n    answer=a*b\n    print(str(a)+ \"*\" + str (b) + \"=\" + str(answer))\ndef div(a,b):\n    answer=a/b\n    print(str(a)+ \"/\" + str (b) + \"=\" + str(answer))\nprint(\"select an option: \")\nprint('A: Addition')\nprint('B: Subtraction')\nprint('C: multiplication')",
        "detail": "Rajvir.calculator.main",
        "documentation": {}
    },
    {
        "label": "div",
        "kind": 2,
        "importPath": "Rajvir.calculator.main",
        "description": "Rajvir.calculator.main",
        "peekOfCode": "def div(a,b):\n    answer=a/b\n    print(str(a)+ \"/\" + str (b) + \"=\" + str(answer))\nprint(\"select an option: \")\nprint('A: Addition')\nprint('B: Subtraction')\nprint('C: multiplication')\nprint('D: Division')\nchoice=input(\"Enter your choice: \")\nif(choice== \"a\" or choice==\"A\"):",
        "detail": "Rajvir.calculator.main",
        "documentation": {}
    },
    {
        "label": "switch_cases",
        "kind": 2,
        "importPath": "Rajvir.conditions.switch_cases",
        "description": "Rajvir.conditions.switch_cases",
        "peekOfCode": "def switch_cases(argument):\n    if argument== \"a\":\n        print(\"you selected option:{argument}\")\n        return \"Apple\" # return only returns a value but does not print\n    elif argument== \"b\":\n        return \"Banana\"\n    elif argument== \"b\":\n        return \"Banana\"\n    elif argument== \"b\":\n        return \"Banana\"",
        "detail": "Rajvir.conditions.switch_cases",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "Rajvir.conditions.switch_cases",
        "description": "Rajvir.conditions.switch_cases",
        "peekOfCode": "input = input(\"enter the option:\")\nprint(switch_cases(input))",
        "detail": "Rajvir.conditions.switch_cases",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "Rajvir.functions.functions1",
        "description": "Rajvir.functions.functions1",
        "peekOfCode": "def func1():\n    return \"hello\"\ndef func2():\n    x=func1()\n    print (x, \"worlds\")\nfunc2()\ndef greet():\n    return \"namaste\"\ndef world():\n    x=greet()",
        "detail": "Rajvir.functions.functions1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "Rajvir.functions.functions1",
        "description": "Rajvir.functions.functions1",
        "peekOfCode": "def func2():\n    x=func1()\n    print (x, \"worlds\")\nfunc2()\ndef greet():\n    return \"namaste\"\ndef world():\n    x=greet()\n    print (x, \"India\")\nworld()",
        "detail": "Rajvir.functions.functions1",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "Rajvir.functions.functions1",
        "description": "Rajvir.functions.functions1",
        "peekOfCode": "def greet():\n    return \"namaste\"\ndef world():\n    x=greet()\n    print (x, \"India\")\nworld()\n# testing\n# casting \ndef add(a=5, b=10):\n    c= a+b",
        "detail": "Rajvir.functions.functions1",
        "documentation": {}
    },
    {
        "label": "world",
        "kind": 2,
        "importPath": "Rajvir.functions.functions1",
        "description": "Rajvir.functions.functions1",
        "peekOfCode": "def world():\n    x=greet()\n    print (x, \"India\")\nworld()\n# testing\n# casting \ndef add(a=5, b=10):\n    c= a+b\n    print(c)\n                                     # par> arg",
        "detail": "Rajvir.functions.functions1",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Rajvir.functions.functions1",
        "description": "Rajvir.functions.functions1",
        "peekOfCode": "def add(a=5, b=10):\n    c= a+b\n    print(c)\n                                     # par> arg\nadd(50,60) \n# arguements are passed in the function call \ndef func1():\n    average=(7/3)\n    return average\ndef func2():",
        "detail": "Rajvir.functions.functions1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "Rajvir.functions.functions1",
        "description": "Rajvir.functions.functions1",
        "peekOfCode": "def func1():\n    average=(7/3)\n    return average\ndef func2():\n    print (func1())\nfunc2()\ndef function():\n    pass \ndef function2():\n    print(\"not empty\")",
        "detail": "Rajvir.functions.functions1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "Rajvir.functions.functions1",
        "description": "Rajvir.functions.functions1",
        "peekOfCode": "def func2():\n    print (func1())\nfunc2()\ndef function():\n    pass \ndef function2():\n    print(\"not empty\")",
        "detail": "Rajvir.functions.functions1",
        "documentation": {}
    },
    {
        "label": "function",
        "kind": 2,
        "importPath": "Rajvir.functions.functions1",
        "description": "Rajvir.functions.functions1",
        "peekOfCode": "def function():\n    pass \ndef function2():\n    print(\"not empty\")",
        "detail": "Rajvir.functions.functions1",
        "documentation": {}
    },
    {
        "label": "function2",
        "kind": 2,
        "importPath": "Rajvir.functions.functions1",
        "description": "Rajvir.functions.functions1",
        "peekOfCode": "def function2():\n    print(\"not empty\")",
        "detail": "Rajvir.functions.functions1",
        "documentation": {}
    },
    {
        "label": "Name",
        "kind": 2,
        "importPath": "Rajvir.functions.functions2",
        "description": "Rajvir.functions.functions2",
        "peekOfCode": "def Name():\n    name= input(\"Enter your Name: \")\n    return name \ndef Agefunc():\n    age= input(\"Enter Your Age: \")\n #   print(\"Name: \" + Name() + \"\\n \"+ \"Age: \" + str(age))\n    print (Name(), (age))\nAgefunc()",
        "detail": "Rajvir.functions.functions2",
        "documentation": {}
    },
    {
        "label": "Agefunc",
        "kind": 2,
        "importPath": "Rajvir.functions.functions2",
        "description": "Rajvir.functions.functions2",
        "peekOfCode": "def Agefunc():\n    age= input(\"Enter Your Age: \")\n #   print(\"Name: \" + Name() + \"\\n \"+ \"Age: \" + str(age))\n    print (Name(), (age))\nAgefunc()",
        "detail": "Rajvir.functions.functions2",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Rajvir.functions.inputs",
        "description": "Rajvir.functions.inputs",
        "peekOfCode": "def add( num1, num2):\n    return (num1 + num2)\nnumber1= input (\"Enter first value\")\nnumber2= input(\"Enter second value\")\nprint (\"the summed value is: \", add(int(number1),int(number2)))",
        "detail": "Rajvir.functions.inputs",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Rajvir.loops.while_loop",
        "description": "Rajvir.loops.while_loop",
        "peekOfCode": "numbers = [1, 2, 3, 4, 5]\ntotal = 0\nindex = 1\nwhile total < 10:\n    total += numbers[index]\nprint(f\"total: {total} of the list {numbers}\")\n# while 0<10:\n#     print(\"infinite loop\")     #this prints infintely wihtout terminating\ncount =3       #this startes counting from 3\nwhile count <= 10:",
        "detail": "Rajvir.loops.while_loop",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "Rajvir.loops.while_loop",
        "description": "Rajvir.loops.while_loop",
        "peekOfCode": "total = 0\nindex = 1\nwhile total < 10:\n    total += numbers[index]\nprint(f\"total: {total} of the list {numbers}\")\n# while 0<10:\n#     print(\"infinite loop\")     #this prints infintely wihtout terminating\ncount =3       #this startes counting from 3\nwhile count <= 10:\n    print(count)",
        "detail": "Rajvir.loops.while_loop",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "Rajvir.loops.while_loop",
        "description": "Rajvir.loops.while_loop",
        "peekOfCode": "index = 1\nwhile total < 10:\n    total += numbers[index]\nprint(f\"total: {total} of the list {numbers}\")\n# while 0<10:\n#     print(\"infinite loop\")     #this prints infintely wihtout terminating\ncount =3       #this startes counting from 3\nwhile count <= 10:\n    print(count)\n    count +=1 #this will increament the number by 1",
        "detail": "Rajvir.loops.while_loop",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "Rajvir.loops.while_loop",
        "description": "Rajvir.loops.while_loop",
        "peekOfCode": "index = 1\nwhile index <= len(string):\n    print(str(string))\n    index += 1\nprint('*'*20)\n# counting down from a specified number\nnum= int(input(\"Enter a number to count down from: \"))\nwhile num > 0:\n    print(num)\n    num -= 1",
        "detail": "Rajvir.loops.while_loop",
        "documentation": {}
    },
    {
        "label": "ImmutableBool",
        "kind": 6,
        "importPath": "Rajvir.oop.immutability.main",
        "description": "Rajvir.oop.immutability.main",
        "peekOfCode": "class ImmutableBool:\n    def __init__(self,data):\n        self.data=data\n        print(self.data)\nbl= ImmutableBool(False)\nclass ImmutableString:\n    def __init__(self,data):\n        self.data= data\n        print(self.data)\nst= ImmutableString(\"g\")",
        "detail": "Rajvir.oop.immutability.main",
        "documentation": {}
    },
    {
        "label": "ImmutableString",
        "kind": 6,
        "importPath": "Rajvir.oop.immutability.main",
        "description": "Rajvir.oop.immutability.main",
        "peekOfCode": "class ImmutableString:\n    def __init__(self,data):\n        self.data= data\n        print(self.data)\nst= ImmutableString(\"g\")",
        "detail": "Rajvir.oop.immutability.main",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "Rajvir.oop.abstruction",
        "description": "Rajvir.oop.abstruction",
        "peekOfCode": "class Student(ABC):\n    @abstractmethod\n    def method1(self):\n        print(\"This is an abstruct method\")\n        return \nclass concreteclass(Student):\n    def method1 (self):\n        super().method1()\n        return\nobj = concreteclass()",
        "detail": "Rajvir.oop.abstruction",
        "documentation": {}
    },
    {
        "label": "concreteclass",
        "kind": 6,
        "importPath": "Rajvir.oop.abstruction",
        "description": "Rajvir.oop.abstruction",
        "peekOfCode": "class concreteclass(Student):\n    def method1 (self):\n        super().method1()\n        return\nobj = concreteclass()\nobj.method1()",
        "detail": "Rajvir.oop.abstruction",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "Rajvir.oop.abstruction",
        "description": "Rajvir.oop.abstruction",
        "peekOfCode": "obj = concreteclass()\nobj.method1()",
        "detail": "Rajvir.oop.abstruction",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "Rajvir.oop.inheritence",
        "description": "Rajvir.oop.inheritence",
        "peekOfCode": "class Person:\n    def __init__(self,name,age):\n     self.name= name\n     self.age = age\nclass Student(Person):\n    def __init__(self, name, age):\n        super().__init__(name,age)\n        self.middlename =name\n    def cook(self):\n        print(f\"{self.middlename} cooking!!\")",
        "detail": "Rajvir.oop.inheritence",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "Rajvir.oop.inheritence",
        "description": "Rajvir.oop.inheritence",
        "peekOfCode": "class Student(Person):\n    def __init__(self, name, age):\n        super().__init__(name,age)\n        self.middlename =name\n    def cook(self):\n        print(f\"{self.middlename} cooking!!\")\nkid1 =Student(\"Raj\", 19)\nprint(kid1.cook())",
        "detail": "Rajvir.oop.inheritence",
        "documentation": {}
    },
    {
        "label": "new_list",
        "kind": 5,
        "importPath": "Rajvir.operations.list_operations",
        "description": "Rajvir.operations.list_operations",
        "peekOfCode": "new_list = list1 + list2 \nprint(new_list)\n#clearing a list, Clear()removes everything from a list\nlist2.clear()\nprint(list2)\n#count\ncount_items=new_list.count(20)\nprint(count_items)\n#sort, for numbers only\nunsorted_items=[29,3,0,1,5,80]",
        "detail": "Rajvir.operations.list_operations",
        "documentation": {}
    },
    {
        "label": "a,*b,c",
        "kind": 5,
        "importPath": "Rajvir.operations.tuple_operations",
        "description": "Rajvir.operations.tuple_operations",
        "peekOfCode": "a,*b,c = tuple1\nprint(\"item assigned to 'a': \", a)\nprint(\"item assigned to 'b': \", b)\nprint(\"item assigned to 'c': \", c)\n#tuple comparison\ntuple2=(1,2,3)\ntuple3=(1,2,4)\nprint(tuple3==tuple2)\n#deleting a tuple \n#my tuple4=(1,2,4,5)",
        "detail": "Rajvir.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "slice_tuple",
        "kind": 5,
        "importPath": "Rajvir.operations.tuple_operations",
        "description": "Rajvir.operations.tuple_operations",
        "peekOfCode": "slice_tuple = tuple5[1:3]\nprint(slice_tuple)",
        "detail": "Rajvir.operations.tuple_operations",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Rajvir.string_func.app",
        "description": "Rajvir.string_func.app",
        "peekOfCode": "def main():\n    input_string=input(\"Enter the string: \")\n    substring_to_replace=input(\"Enter sub string to replace: \")\n    replacement_sub_string=input(\"Enter the replacement: \")\n    #perform replacement operation\n    replaced_string = input_string.replace(substring_to_replace,replacement_sub_string)\n    #spliting the replaced string into a list of words\n    words_list = replaced_string.split()\n    #join the splitted words with a hyphen\n    hyphenated_string = \"-\".join(words_list)",
        "detail": "Rajvir.string_func.app",
        "documentation": {}
    },
    {
        "label": "replacement",
        "kind": 2,
        "importPath": "Rajvir.string_func.find",
        "description": "Rajvir.string_func.find",
        "peekOfCode": "def replacement():\n    sentence = input(\"Enter any sentence.\")\n    word_to_find = \"my\"\n    word_to_replace =\"your\"\n    new_word= sentence.find(word_to_find)\n    if new_word != -1:\n        new_sentence= sentence.replace(word_to_find,word_to_replace)\n        print(new_sentence)\n    else:\n        print(f\"{word_to_find} does not exist\")",
        "detail": "Rajvir.string_func.find",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "Rajvir.function",
        "description": "Rajvir.function",
        "peekOfCode": "def sub(num1 , num2):\n    return(num1 - num2)\nnumber1=int(input(\"enter the first value: \"))\nnumber2= int(input(\"enter the second value: \"))\nprint(\"The answer will be:\", sub(number1,number2))",
        "detail": "Rajvir.function",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "Rajvir.range",
        "description": "Rajvir.range",
        "peekOfCode": "start = 10\nend = 20 \nstep = 2\nfor i in range(start,end,step):\n    print(i)",
        "detail": "Rajvir.range",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "Rajvir.range",
        "description": "Rajvir.range",
        "peekOfCode": "end = 20 \nstep = 2\nfor i in range(start,end,step):\n    print(i)",
        "detail": "Rajvir.range",
        "documentation": {}
    },
    {
        "label": "step",
        "kind": 5,
        "importPath": "Rajvir.range",
        "description": "Rajvir.range",
        "peekOfCode": "step = 2\nfor i in range(start,end,step):\n    print(i)",
        "detail": "Rajvir.range",
        "documentation": {}
    },
    {
        "label": "generate_readme",
        "kind": 2,
        "importPath": "readme_generator_script",
        "description": "readme_generator_script",
        "peekOfCode": "def generate_readme():\n    readme_content = \"\"\"# Greenbridge School of Open Technologies\nWelcome to the Greenbridge School of Open Technologies! Here you will embark on an exciting journey into the world of Python programming. This README provides an overview of our Certificate in Python Programming course, its structure, and what you can expect to learn throughout the five-week duration.\n## Certificate in Python Programming\n- **Duration:** 5 weeks\nPython, an object-oriented programming language created by Guido Rossum in 1989, is renowned for its versatility and simplicity. It's widely adopted by major companies like NASA, Google, and YouTube for its rapid prototyping capabilities and robustness. Our course aims to equip you with a solid foundation in Python programming, tailored for absolute beginners.\n## Course Overview\n### Week 1\n**Topics Covered:**\n- Introduction to Python Programming",
        "detail": "readme_generator_script",
        "documentation": {}
    }
]